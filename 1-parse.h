// -----------------------------------------------------------------------------
// This file was generated by the bluebird parsing tool.
// Make sure to #define BLUEBIRD_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define BLUEBIRD_PARSER_IMPLEMENTATION
//   #include "bluebird-parser.h"

#ifndef _BLUEBIRD_PARSER_H_
#define _BLUEBIRD_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The bluebird_tree struct represents an entire parse tree.  Use the
// bluebird_tree_create_...() functions to create a tree, then call
// bluebird_tree_root() to get the root bluebird_id.
struct bluebird_tree;

// Creates a bluebird_tree from a string.  The tree may directly reference
// pieces of the string -- you're responsible for keeping it around until
// bluebird_tree_destroy() is called.
struct bluebird_tree *bluebird_tree_create_from_string(const char *string);

// Creates a bluebird_tree by reading from a file.
struct bluebird_tree *bluebird_tree_create_from_file(FILE *file);

// Destroys a bluebird_tree, freeing its resources back to the system.
void bluebird_tree_destroy(struct bluebird_tree *);

// Prints a representation of the tree to standard output.
void bluebird_tree_print(struct bluebird_tree *);

// A bluebird_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct bluebird_ref {
    struct bluebird_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The bluebird_next function advances a ref to the next sibling element.
struct bluebird_ref bluebird_next(struct bluebird_ref);

// Tests two refs for equality.
bool bluebird_refs_equal(struct bluebird_ref a, struct bluebird_ref b);

// Returns the root bluebird_ref.
struct bluebird_ref bluebird_tree_root_ref(struct bluebird_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar bluebird_tree_get_parsed_grammar(struct bluebird_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum bluebird_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to bluebird_tree_create_from_file wasn't valid because
    // - it was NULL,
    // - it doesn't support fseek/ftell, or
    // - there was an error while reading it.
    ERROR_INVALID_FILE,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum bluebird_error bluebird_tree_get_error(struct bluebird_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_IDENT = 1,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct bluebird_ref rule;
    struct bluebird_ref comment_token;
};

struct parsed_rule {
    struct source_range range;
    struct bluebird_ref identifier;
    struct bluebird_ref body;
};

struct parsed_body {
    struct source_range range;
    struct bluebird_ref expr;
    struct bluebird_ref identifier;
    struct bluebird_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct bluebird_ref fixity;
    struct bluebird_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct bluebird_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct bluebird_ref expr;
    struct bluebird_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct bluebird_ref identifier;
    struct bluebird_ref exception;
    struct bluebird_ref rename;
    struct bluebird_ref string;
    struct bluebird_ref expr;
    struct bluebird_ref begin_token;
    struct bluebird_ref end_token;
    struct bluebird_ref operand;
};

struct parsed_comment_token {
    struct source_range range;
    struct bluebird_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_number {
    struct source_range range;
    double number;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
    bool has_escapes;
};

struct parsed_grammar parsed_grammar_get(struct bluebird_ref);
struct parsed_rule parsed_rule_get(struct bluebird_ref);
struct parsed_body parsed_body_get(struct bluebird_ref);
struct parsed_operators parsed_operators_get(struct bluebird_ref);
struct parsed_fixity parsed_fixity_get(struct bluebird_ref);
struct parsed_assoc parsed_assoc_get(struct bluebird_ref);
struct parsed_operator parsed_operator_get(struct bluebird_ref);
struct parsed_expr parsed_expr_get(struct bluebird_ref);
struct parsed_comment_token parsed_comment_token_get(struct bluebird_ref);
struct parsed_identifier parsed_identifier_get(struct bluebird_ref);
struct parsed_number parsed_number_get(struct bluebird_ref);
struct parsed_string parsed_string_get(struct bluebird_ref);

#endif

#ifdef BLUEBIRD_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct bluebird_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum bluebird_error error;
    struct source_range error_range;
    size_t root_offset;
    struct {
        const char *identifier;
        size_t length;
        struct source_range range;
    } *identifier_tokens;
    size_t number_of_identifier_tokens;
    size_t used_identifier_tokens;
    size_t identifier_tokens_capacity;
    struct {
        double number;
        struct source_range range;
    } *number_tokens;
    size_t number_of_number_tokens;
    size_t used_number_tokens;
    size_t number_tokens_capacity;
    struct {
        const char *string;
        size_t length;
        bool has_escapes;
        struct source_range range;
    } *string_tokens;
    size_t number_of_string_tokens;
    size_t used_string_tokens;
    size_t string_tokens_capacity;
};
static void add_identifier_token(struct bluebird_tree *tree, size_t start, size_t end, const char *identifier_param, size_t length_param) {
    size_t index = tree->number_of_identifier_tokens++;
    if (tree->number_of_identifier_tokens > tree->identifier_tokens_capacity) {
        size_t capacity = (tree->identifier_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->identifier_tokens, sizeof(tree->identifier_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->identifier_tokens_capacity = capacity;
        tree->identifier_tokens = tokens;
    }
    tree->identifier_tokens[index].range.start = start;
    tree->identifier_tokens[index].range.end = end;
    tree->identifier_tokens[index].identifier = identifier_param;
    tree->identifier_tokens[index].length = length_param;
}
static void add_number_token(struct bluebird_tree *tree, size_t start, size_t end, double number_param) {
    size_t index = tree->number_of_number_tokens++;
    if (tree->number_of_number_tokens > tree->number_tokens_capacity) {
        size_t capacity = (tree->number_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->number_tokens, sizeof(tree->number_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->number_tokens_capacity = capacity;
        tree->number_tokens = tokens;
    }
    tree->number_tokens[index].range.start = start;
    tree->number_tokens[index].range.end = end;
    tree->number_tokens[index].number = number_param;
}
static void add_string_token(struct bluebird_tree *tree, size_t start, size_t end, const char *string_param, size_t length_param, bool has_escapes_param) {
    size_t index = tree->number_of_string_tokens++;
    if (tree->number_of_string_tokens > tree->string_tokens_capacity) {
        size_t capacity = (tree->string_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->string_tokens, sizeof(tree->string_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->string_tokens_capacity = capacity;
        tree->string_tokens = tokens;
    }
    tree->string_tokens[index].range.start = start;
    tree->string_tokens[index].range.end = end;
    tree->string_tokens[index].string = string_param;
    tree->string_tokens[index].length = length_param;
    tree->string_tokens[index].has_escapes = has_escapes_param;
}
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct bluebird_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= (parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= (parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct bluebird_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct bluebird_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 8;
    result.comment_token.empty = result.comment_token._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 9;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 9;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 11;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 11;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 11;
    result.end_token.empty = result.end_token._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_comment_token){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 11;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_index = read_tree(&offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->identifier_tokens[token_index].identifier,
        .length = ref._tree->identifier_tokens[token_index].length,
        .range = ref._tree->identifier_tokens[token_index].range,
    };
    return result;
}
struct parsed_number parsed_number_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_number){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_index = read_tree(&offset, ref._tree);
    struct parsed_number result = {
        .number = ref._tree->number_tokens[token_index].number,
        .range = ref._tree->number_tokens[token_index].range,
    };
    return result;
}
struct parsed_string parsed_string_get(struct bluebird_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_index = read_tree(&offset, ref._tree);
    struct parsed_string result = {
        .string = ref._tree->string_tokens[token_index].string,
        .length = ref._tree->string_tokens[token_index].length,
        .has_escapes = ref._tree->string_tokens[token_index].has_escapes,
        .range = ref._tree->string_tokens[token_index].range,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct bluebird_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling);
    write_tree(tree, start_location);
    write_tree(tree, end_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct bluebird_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling);
    switch (rule) {
    case 9: {
        tree->used_identifier_tokens++;
        if (tree->used_identifier_tokens > tree->number_of_identifier_tokens)
            abort();
        size_t token_index = tree->number_of_identifier_tokens - tree->used_identifier_tokens;
        write_tree(tree, token_index);
        break;
    }
    case 10: {
        tree->used_number_tokens++;
        if (tree->used_number_tokens > tree->number_of_number_tokens)
            abort();
        size_t token_index = tree->number_of_number_tokens - tree->used_number_tokens;
        write_tree(tree, token_index);
        break;
    }
    case 11: {
        tree->used_string_tokens++;
        if (tree->used_string_tokens > tree->number_of_string_tokens)
            abort();
        size_t token_index = tree->number_of_string_tokens - tree->used_string_tokens;
        write_tree(tree, token_index);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct bluebird_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_number_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_rule_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_body_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_operators_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_fixity_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_assoc_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = bluebird_next(ref);
    }
}
static void parsed_operator_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_expr_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_comment_token_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = bluebird_next(ref);
    }
}
static void parsed_identifier_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = bluebird_next(ref);
    }
}
static void parsed_number_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_number it = parsed_number_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("number");
        if (strcmp("number", slot_name))
            printf("@%s", slot_name);
        printf(" - %f", it.number);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = bluebird_next(ref);
    }
}
static void parsed_string_print(struct bluebird_tree *tree, struct bluebird_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = bluebird_next(ref);
    }
}
void bluebird_tree_print(struct bluebird_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, bluebird_tree_root_ref(tree), "grammar", 0);
}
struct bluebird_ref bluebird_next(struct bluebird_ref ref) {
    if (ref.empty) return ref;
    size_t offset = read_tree(&ref._offset, ref._tree);
    return (struct bluebird_ref){
        ._tree = ref._tree,
        ._offset = offset,
        ._type = ref._type,
        .empty = offset == 0,
    };
}
bool bluebird_refs_equal(struct bluebird_ref a, struct bluebird_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct bluebird_ref bluebird_tree_root_ref(struct bluebird_tree *tree) {
    check_for_error(tree);
    return (struct bluebird_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar bluebird_tree_get_parsed_grammar(struct bluebird_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(bluebird_tree_root_ref(tree));
}
#define IGNORE_TOKEN_WRITE(...)
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct bluebird_tree *tree = info;
    add_identifier_token(tree, offset, offset + length, tree->string + offset, length);
}
static void write_number_token(size_t offset, size_t length, double number, void *info) {
    struct bluebird_tree *tree = info;
    add_number_token(tree, offset, offset + length, number);
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct bluebird_tree *tree = info;
    add_string_token(tree, offset, offset + length, string, string_length, has_escapes);
}
struct bluebird_token_run {
    struct bluebird_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct bluebird_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool encode_length(struct bluebird_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct bluebird_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct bluebird_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct bluebird_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool bluebird_default_tokenizer_advance(struct bluebird_default_tokenizer *tokenizer, struct bluebird_token_run **previous_run) {
    struct bluebird_token_run *run = malloc(sizeof(struct bluebird_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        if (char_is_whitespace(c)) {
            whitespace++;
            offset++;
            continue;
        }
        uint32_t token;
        bool is_token = false;
        bool end_token = false;
        bool comment = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 0xffffffff) comment = true;
        }
        double number = 0;
        if (char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1]))) {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                token = 22;
            }
        }
        else if (c == '\'' || c == '"') {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    token = 23;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        else if (char_starts_identifier(c)) {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                token = 21;
            }
        }
        if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 0xffffffff) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 21) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 22) {
            write_number_token(offset, token_length, number, tokenizer->info);
        }
        else if (token == 23) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = malloc(string_length);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = text[content_offset + i];
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct bluebird_default_tokenizer *tokenizer, struct bluebird_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct bluebird_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct bluebird_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity;
            int precedence;
            do {
                int local;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    void (*state_func)(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    uint32_t top_index;
    uint32_t capacity;
    bool error;
};
static void continuation_stack_push(struct fill_run_state **top) {
    struct fill_run_continuation *cont = (*top)->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        *top = &cont->stack[cont->top_index];
    } else
        (*top)++;
    (*top)->cont = cont;
}
static void state_func_0(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_1(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_2(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_3(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_4(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_5(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_6(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_7(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_8(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_9(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_10(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_11(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_12(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_13(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_14(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_15(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_16(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_17(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_18(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_19(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_20(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_21(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_22(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_23(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_24(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_25(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_26(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_27(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_28(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_29(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_30(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_31(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_32(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_33(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_34(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_35(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_36(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_37(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_38(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_39(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_40(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_41(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_42(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_43(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_44(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_45(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_46(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_47(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_48(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_49(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_50(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_51(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_52(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_53(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_54(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_55(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_56(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_57(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_58(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_59(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_60(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_61(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_62(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_63(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_64(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_65(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_66(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_67(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_68(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_69(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_70(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_71(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_72(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_73(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_74(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_75(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_76(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_77(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_78(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_79(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_80(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_81(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_82(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_83(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_84(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_85(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_86(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_87(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_88(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_89(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_90(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_91(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index);
static void state_func_0(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 0;
    switch (token) {
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_2; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_1(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 1;
    switch (token) {
    case 23: top->state_func = state_func_58; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_2(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 2;
    switch (token) {
    case 0: top->state_func = state_func_3; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_3(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 3;
    switch (token) {
    case 21: top->state_func = state_func_4; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_4(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 4;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_14; return;
    case 11: top->state_func = state_func_15; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_5(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 5;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_6(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 6;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_7(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 7;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_8(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 8;
    switch (token) {
    case 21: top->state_func = state_func_19; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_9(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 9;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_10(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 10;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_11(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 11;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_12(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 12;
    switch (token) {
    case 21: top->state_func = state_func_4; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_13(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 13;
    switch (token) {
    case 0: top->state_func = state_func_3; return;
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_14; return;
    case 11: top->state_func = state_func_15; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_14(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 14;
    switch (token) {
    case 1: top->state_func = state_func_17; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_15(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 15;
    switch (token) {
    case 21: top->state_func = state_func_16; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_16(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 16;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_17(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 17;
    switch (token) {
    case 21: top->state_func = state_func_18; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_18(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 18;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_14; return;
    case 11: top->state_func = state_func_15; return;
    case 16: top->state_func = state_func_9; return;
    case 17: top->state_func = state_func_10; return;
    case 18: top->state_func = state_func_11; return;
    case 19: top->state_func = state_func_12; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_13; return;
    case 23: top->state_func = state_func_5; return;
    case 24: top->state_func = state_func_6; return;
    case 25: top->state_func = state_func_7; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_19(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 19;
    switch (token) {
    case 2: top->state_func = state_func_20; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_21; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_20(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 20;
    switch (token) {
    case 3: top->state_func = state_func_35; return;
    case 4: top->state_func = state_func_36; return;
    case 5: top->state_func = state_func_37; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_21(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 21;
    switch (token) {
    case 0: top->state_func = state_func_3; return;
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_30; return;
    case 11: top->state_func = state_func_31; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_22(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 22;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_23(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 23;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_24(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 24;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_25(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 25;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_26(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 26;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_27(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 27;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_28(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 28;
    switch (token) {
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_29(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 29;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_30; return;
    case 11: top->state_func = state_func_31; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_30(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 30;
    switch (token) {
    case 1: top->state_func = state_func_33; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_31(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 31;
    switch (token) {
    case 21: top->state_func = state_func_32; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_32(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 32;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_33(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 33;
    switch (token) {
    case 21: top->state_func = state_func_34; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_34(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 34;
    switch (token) {
    case 1: top->state_func = state_func_8; return;
    case 10: top->state_func = state_func_30; return;
    case 11: top->state_func = state_func_31; return;
    case 16: top->state_func = state_func_25; return;
    case 17: top->state_func = state_func_26; return;
    case 18: top->state_func = state_func_27; return;
    case 19: top->state_func = state_func_28; return;
    case 21: top->state_func = state_func_29; return;
    case 23: top->state_func = state_func_22; return;
    case 24: top->state_func = state_func_23; return;
    case 25: top->state_func = state_func_24; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_35(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 35;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_36(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 36;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_37(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 37;
    switch (token) {
    case 6: top->state_func = state_func_38; return;
    case 7: top->state_func = state_func_39; return;
    case 8: top->state_func = state_func_40; return;
    case 9: top->state_func = state_func_41; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_38(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 38;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_39(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 39;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_40(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 40;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_41(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 41;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_42(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 42;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 10: top->state_func = state_func_53; return;
    case 11: top->state_func = state_func_54; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_43(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 43;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_44(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 44;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_45(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 45;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_46(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 46;
    switch (token) {
    case 21: top->state_func = state_func_51; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_47(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 47;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_48(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 48;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_49(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 49;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_50(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 50;
    switch (token) {
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_51(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 51;
    switch (token) {
    case 2: top->state_func = state_func_20; return;
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_52; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_52(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 52;
    switch (token) {
    case 0: top->state_func = state_func_3; return;
    case 1: top->state_func = state_func_46; return;
    case 10: top->state_func = state_func_53; return;
    case 11: top->state_func = state_func_54; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_53(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 53;
    switch (token) {
    case 1: top->state_func = state_func_56; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_54(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 54;
    switch (token) {
    case 21: top->state_func = state_func_55; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_55(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 55;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_56(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 56;
    switch (token) {
    case 21: top->state_func = state_func_57; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_57(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 57;
    switch (token) {
    case 1: top->state_func = state_func_46; return;
    case 10: top->state_func = state_func_53; return;
    case 11: top->state_func = state_func_54; return;
    case 16: top->state_func = state_func_47; return;
    case 17: top->state_func = state_func_48; return;
    case 18: top->state_func = state_func_49; return;
    case 19: top->state_func = state_func_50; return;
    case 21: top->state_func = state_func_42; return;
    case 23: top->state_func = state_func_43; return;
    case 24: top->state_func = state_func_44; return;
    case 25: top->state_func = state_func_45; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_58(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 58;
    switch (token) {
    case 20: top->state_func = state_func_1; return;
    case 21: top->state_func = state_func_2; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_59(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 59;
    switch (token) {
    case 12: top->state_func = state_func_60; return;
    case 14: top->state_func = state_func_61; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_60(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 60;
    switch (token) {
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_61(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 61;
    switch (token) {
    case 23: top->state_func = state_func_62; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_62(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 62;
    switch (token) {
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_64; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_63(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 63;
    switch (token) {
    case 10: top->state_func = state_func_73; return;
    case 11: top->state_func = state_func_74; return;
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_64(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 64;
    switch (token) {
    case 15: top->state_func = state_func_72; return;
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_65(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 65;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_66(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 66;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_67(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 67;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_68(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 68;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_69(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 69;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_70(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 70;
    switch (token) {
    default: top->cont->error = true; return;
    }
}
static void state_func_71(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 71;
    switch (token) {
    case 15: top->state_func = state_func_72; return;
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_72(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = true;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 25;
    top->state_func(run, top, token_index);
    return;
}
static void state_func_73(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 73;
    switch (token) {
    case 1: top->state_func = state_func_76; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_74(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 74;
    switch (token) {
    case 21: top->state_func = state_func_75; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_75(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 75;
    switch (token) {
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_76(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 76;
    switch (token) {
    case 21: top->state_func = state_func_77; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_77(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 77;
    switch (token) {
    case 10: top->state_func = state_func_73; return;
    case 11: top->state_func = state_func_74; return;
    case 16: top->state_func = state_func_67; return;
    case 17: top->state_func = state_func_68; return;
    case 18: top->state_func = state_func_69; return;
    case 19: top->state_func = state_func_70; return;
    case 21: top->state_func = state_func_63; return;
    case 23: top->state_func = state_func_71; return;
    case 24: top->state_func = state_func_65; return;
    case 25: top->state_func = state_func_66; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_78(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 78;
    switch (token) {
    case 10: top->state_func = state_func_87; return;
    case 11: top->state_func = state_func_88; return;
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_79(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 79;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_80(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 80;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_81(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 81;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_82(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = true;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 24;
    top->state_func(run, top, token_index);
    return;
}
static void state_func_83(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 83;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_84(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 84;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_85(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 85;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_86(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 86;
    switch (token) {
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_87(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 87;
    switch (token) {
    case 1: top->state_func = state_func_90; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_88(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 88;
    switch (token) {
    case 21: top->state_func = state_func_89; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_89(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 89;
    switch (token) {
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static void state_func_90(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 90;
    switch (token) {
    case 21: top->state_func = state_func_91; return;
    default: top->cont->error = true; return;
    }
}
static void state_func_91(struct bluebird_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = true;
        return;
    }
    uint32_t token = run->tokens[token_index];
    run->states[token_index] = 91;
    switch (token) {
    case 10: top->state_func = state_func_87; return;
    case 11: top->state_func = state_func_88; return;
    case 13: top->state_func = state_func_82; return;
    case 16: top->state_func = state_func_83; return;
    case 17: top->state_func = state_func_84; return;
    case 18: top->state_func = state_func_85; return;
    case 19: top->state_func = state_func_86; return;
    case 21: top->state_func = state_func_78; return;
    case 23: top->state_func = state_func_79; return;
    case 24: top->state_func = state_func_80; return;
    case 25: top->state_func = state_func_81; return;
    default:
        continuation_stack_push(&top);
        top->reachability_mask[0] = 3;
        state_func_59(run, top, token_index);
        return;
    }
}
static bool fill_run_states(struct bluebird_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct bluebird_default_tokenizer *, struct bluebird_token_run *, struct bluebird_tree *);

static struct bluebird_tree *bluebird_tree_create_empty(void) {
    return calloc(1, sizeof(struct bluebird_tree));
}

struct bluebird_tree *bluebird_tree_create_from_string(const char *string) {
    struct bluebird_tree *tree = bluebird_tree_create_empty();
    tree->string = string;
    tree->next_offset = 1;
    struct bluebird_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct bluebird_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state_func = state_func_0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (bluebird_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            return tree;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        return tree;
    }
    if (top.state_func != state_func_0 && top.state_func != state_func_4 && top.state_func != state_func_5 && top.state_func != state_func_6 && top.state_func != state_func_7 && top.state_func != state_func_9 && top.state_func != state_func_10 && top.state_func != state_func_11 && top.state_func != state_func_13 && top.state_func != state_func_16 && top.state_func != state_func_18 && top.state_func != state_func_19 && top.state_func != state_func_51 && top.state_func != state_func_58) {
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        return tree;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
    return tree;
}
static struct bluebird_tree *bluebird_tree_create_with_error(enum bluebird_error e) {
    struct bluebird_tree *tree = bluebird_tree_create_empty();
    tree->error = e;
    return tree;
}
struct bluebird_tree *bluebird_tree_create_from_file(FILE *file) {
    if (!file)
        return bluebird_tree_create_with_error(ERROR_INVALID_FILE);
    char *str = 0;
    size_t len = 32;
    size_t off = 0;
    while (true) {
        len = len * 3 / 2;
        char *s = realloc(str, len * 3 / 2);
        if (!s) {
            free(str);
            return 0;
        }
        str = s;
        off += fread(str + off, 1, len - off, file);
        if (off < len) {
            str[off] = '\0';
            break;
        }
    }
    struct bluebird_tree *tree = bluebird_tree_create_from_string(str);
    if (!tree) {
        free(str);
        return 0;
    }
    tree->owns_string = true;
    return tree;
}
enum bluebird_error bluebird_tree_get_error(struct bluebird_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void bluebird_tree_destroy(struct bluebird_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree->identifier_tokens);
    free(tree->number_tokens);
    for (uint32_t i = 0; i < tree->number_of_string_tokens; ++i) {
        if (tree->string_tokens[i].has_escapes)
            free((void *)tree->string_tokens[i].string);
    }
    free(tree->string_tokens);
    free(tree);
}
static bool fill_run_states(struct bluebird_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        top->state_func(run, top, token_index);
        if (cont->error) {
            *failing_index = token_index;
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,16385,0,4096,32768,32769,16385,0,4096,32768,32769,32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,36864,
40960,16385,0,4096,32768,32769,36864,40960,16386,0,4096,32768,32769,36864,40961,16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,4096,
32768,32769,36864,45060,0,4096,32768,32769,36864,45061,0,4096,32768,32769,36864,45062,0,4096,32769,16384,0,4096,32770,32769,16385,0,16384,0,16385,0,
16389,0,16390,0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,0,20480,8192,4096,32768,12289,0,20480,8192,4096,32768,12290,32768,12288,
0,20480,8192,4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,0,20480,8192,4096,32768,12290,32768,12291,0,20480,8192,4096,32769,16385,
0,20480,8192,16385,0,20480,8192,16389,0,20480,45063,24576,40960,16384,0,20480,45063,24576,40960,16385,0,20480,45063,24576,40960,16386,0,20480,45063,24576,
40961,16387,0,20480,45063,24576,40962,0,20480,45063,24576,40963,0,20480,45063,24576,45060,0,20480,45063,24576,45061,0,20480,45063,24576,45062,0,20480,45064,
0,24576,40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,0,24576,40962,0,24576,40963,0,24576,45060,0,24576,45061,0,24576,
45062,0,32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,16384,0,32768,32769,36864,40960,16385,0,32768,32769,36864,40960,16386,0,
32768,32769,36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,32768,32769,36864,45060,0,32768,32769,36864,45061,0,32768,32769,36864,45062,
0,32769,16384,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,36864,40961,16387,0,36864,40962,0,36864,40963,0,36864,45060,0,36864,
45061,0,36864,45062,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,0,36868,40961,16387,0,36868,40962,0,36868,40963,0,36868,45060,0,
36868,45061,0,36868,45062,0,};
struct action_table_entry {
    uint32_t target_nfa_state;
    uint32_t dfa_state;
    uint32_t dfa_symbol;
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static const struct action_table_entry action_table[1024][3] = {
{{318,77,18,318,239},{165,11,23,152,223},},{{169,24,25,341,230,153},{151,43,24,333,320,149},},{{321,85,23,163,223},},{{321,84,23,163,223},
{163,89,24,333,183,163},},{{321,83,23,163,223},{316,16,21,152,304},},{{163,84,19,321,208},{161,9,16,165,286},},{{321,81,23,163,223},
{155,9,21,152,19},},{{319,65,24,333,351,317},{150,35,23,149,223},},{{324,56,21,351,88},{322,60,23,163,347},{154,11,24,333,276,152},},
{{324,57,21,149,86},{163,80,19,321,208},},{{169,22,16,169,233},{151,45,17,150,329},},{{150,52,24,333,227,149},},{0},{{163,78,25,341,188,163},
{161,4,25,341,281,152},},{{149,49,19,150,208},},{{155,8,21,323,7},{153,27,16,169,193},},{0},{{329,84,21,163,86},{152,16,24,333,183,152},
{152,5,25,341,188,152},},{{328,18,21,152,86},{151,48,24,333,320,149},{149,52,18,150,203},},{{153,23,16,169,193},},{{316,10,23,152,316},
{219,26,24,333,320,153},},{{318,64,18,318,239},{165,9,24,333,227,152},},{{322,85,16,321,357},{151,52,24,333,320,149},},{0},{{319,63,25,341,354,317},
{150,42,17,150,236},},{{165,13,16,165,233},{165,10,23,152,223},},{{319,64,24,333,351,317},{317,67,21,317,159},{152,11,16,165,193},},
{0},{{324,44,21,149,86},{321,80,24,333,227,163},},{{152,13,21,152,159},},{{317,69,23,317,177},{316,18,17,165,329},},{{169,27,16,169,233},
{161,7,24,333,276,152},},{{319,71,25,341,354,317},{169,25,17,169,236},},{{323,34,1,219,0},{154,9,23,152,270},},{{169,21,23,153,223},
{151,57,21,149,304},},{{155,16,25,341,53,152},},{{322,78,21,163,335},{153,34,18,169,203},{153,24,16,169,193},},{{219,19,24,333,320,153},},
{{169,23,25,341,230,153},{163,60,24,333,183,163},},{{319,76,21,356,339},{153,26,21,153,159},},{{318,62,21,317,211},{317,67,23,317,177},
{155,11,25,341,53,152},},{{316,9,17,165,329},},{{163,79,23,163,177},{161,5,23,152,270},},{{317,64,23,317,177},{149,37,6,352,113},},
{{316,11,18,165,332},{316,9,24,333,320,152},},{{331,64,23,319,92},{150,47,25,341,230,149},},{{219,27,23,153,316},{165,7,21,152,211},},
{{151,36,21,149,304},{149,52,23,149,177},},{{161,9,25,341,281,152},{151,55,17,150,329},},{{321,85,24,333,227,163},{165,9,16,165,233},
{150,43,25,341,230,149},},{{340,21,10,327,0},{317,64,18,318,203},{149,41,23,149,177},},{{319,67,18,318,363},{317,66,21,317,159},
{149,43,16,150,193},},{{322,84,23,163,347},{165,5,21,152,211},},{{330,63,21,317,86},{150,48,18,150,239},},{{317,68,18,318,203},
{161,3,21,152,252},{152,10,25,341,188,152},},{0},{{330,66,21,317,86},},{{318,75,25,341,230,317},},{{321,78,16,321,233},},{{326,13,21,155,86},
{151,56,21,351,308},},{{321,78,18,321,239},{153,29,25,341,188,153},},{{327,22,21,153,86},{316,18,18,165,332},{150,35,21,149,211},},
{{149,51,25,341,188,149},},{{163,80,21,163,159},},{{219,34,24,333,320,153},{169,22,18,169,239},},{{317,69,24,333,183,317},{316,12,24,333,320,152},},
{{321,91,25,341,230,163},},{{163,78,23,163,177},{161,4,23,152,270},},{{329,89,21,163,86},{149,49,17,150,198},},{{318,77,23,317,223},
{153,8,21,323,151},},{{317,75,17,318,198},{169,22,24,333,227,153},},{{319,62,23,317,347},{317,77,18,318,203},{149,38,21,149,159},},
{{322,81,18,321,363},{151,39,25,341,323,149},},{{153,23,18,169,203},},{{327,33,21,355,88},{316,10,17,165,329},},{{149,40,23,149,177},},
{{322,85,18,321,363},{169,29,25,341,230,153},},{{319,65,18,318,363},},{{316,6,17,165,329},{163,84,24,333,183,163},},{{165,10,17,165,236},
{154,4,24,333,276,152},},{{163,89,19,321,208},{152,11,18,165,203},},{{330,67,21,317,86},{328,9,21,152,86},},{{150,40,25,341,230,149},},
{{154,16,24,333,276,152},},{{317,69,21,317,159},{153,21,25,341,188,153},},{{169,27,18,169,239},},{{321,79,25,341,230,163},{219,21,17,169,329},
{150,36,25,341,230,149},},{{319,68,21,317,335},{317,71,16,318,193},{154,9,17,165,291},},{{163,83,25,341,188,163},{151,57,23,149,316},},
{{339,13,10,328,0},{153,32,25,341,188,153},},{{333,91,13,322,0},{155,13,21,152,19},},{{154,13,17,165,291},},{{344,63,10,330,0},
{326,10,21,155,86},{219,19,21,153,304},},{{153,26,23,153,177},{149,48,25,341,188,149},},{{219,29,25,341,323,153},{155,11,23,152,40},},
{{318,69,25,341,230,317},{316,9,23,152,316},{150,49,21,149,211},},{{163,79,21,163,159},{154,3,24,333,276,152},},{{322,91,25,341,354,163},
{163,84,23,163,177},},{{153,22,24,333,183,153},},{{327,32,21,153,86},{163,86,23,163,177},{150,47,23,149,223},},{{154,18,25,341,281,152},
{154,7,24,333,276,152},},{{319,63,16,318,357},{169,26,23,153,223},{149,52,21,149,159},},{{322,80,21,163,335},{163,83,23,163,177},},
{{219,25,16,169,326},{169,24,23,153,223},},{{317,64,16,318,193},{149,41,21,149,159},},{{319,67,16,318,357},{317,66,23,317,177},
{149,43,18,150,203},},{{155,4,24,333,47,152},{151,41,21,149,304},},{{161,13,18,165,296},},{{154,46,21,332,246},{151,43,17,150,329},},
{{149,45,24,333,183,149},},{{318,67,18,318,239},{317,67,17,318,198},},{{316,10,24,333,320,152},{316,3,21,152,304},},{{321,60,24,333,227,163},
{316,16,17,165,329},},{{317,63,18,318,203},{153,27,18,169,203},},{{346,91,10,329,0},},{{155,12,21,152,19},},{0},{{163,80,23,163,177},},
{{330,68,21,317,86},{155,10,18,165,71},{153,25,23,153,177},},{{318,63,23,317,223},},{{331,69,23,319,92},{321,89,25,341,230,163},
{150,50,25,341,230,149},},{{161,4,21,152,252},{151,35,24,333,320,149},},{{149,49,23,149,177},},{{318,68,16,318,233},},{{165,4,24,333,227,152},},
{{319,77,18,318,363},{317,77,16,318,193},{149,38,23,149,177},},{{149,57,19,150,208},},{0},{{327,27,21,153,86},{316,4,25,341,323,152},
{161,18,18,165,296},},{{149,40,21,149,159},},{{161,16,18,165,296},{149,42,24,333,183,149},},{{155,7,18,165,71},{150,44,24,333,227,149},},
{{317,64,24,333,183,317},},{{163,91,24,333,183,163},{152,9,25,341,188,152},},{{155,5,17,165,65},{153,19,21,153,159},},{{322,89,25,341,354,163},
{152,6,24,333,183,152},},{{317,68,16,318,193},},{{219,23,16,169,326},{152,13,25,341,188,152},},{{154,11,18,165,296},{151,40,24,333,320,149},},
{{318,77,25,341,230,317},{150,57,17,150,236},},{0},{{317,71,18,318,203},{165,16,25,341,230,152},},{{151,44,24,333,320,149},},{{155,12,25,341,53,152},},
{{322,78,17,321,360},{155,13,23,152,40},},{{331,68,23,319,92},{219,34,25,341,323,153},},{{333,83,13,322,0},},{{149,48,23,149,177},},
{{155,11,21,152,19},{150,51,24,333,227,149},},{{316,9,21,152,304},{150,49,23,149,223},},{{169,32,18,169,239},{169,19,21,153,211},},
{{155,9,16,165,59},},{{153,23,23,153,177},},{{327,26,21,153,86},{318,67,17,318,236},{150,47,21,149,211},},{{165,7,17,165,236},
{153,21,23,153,177},},{{341,64,15,331,0},{149,55,24,333,183,149},},{{341,71,15,331,0},{318,65,18,318,239},},{{163,79,16,321,193},},
{{154,5,16,165,286},{152,6,21,152,159},},{{324,43,21,149,86},{317,66,17,318,198},{165,11,16,165,233},},{{326,18,21,155,86},
{154,12,23,152,270},},{{161,13,16,165,286},},{{319,65,21,317,335},{163,89,25,341,188,163},},{{321,83,16,321,233},{151,43,18,150,332},},
{0},{{321,81,24,333,227,163},{150,39,25,341,230,149},},{{319,71,23,317,347},{149,47,21,149,159},},{{319,64,25,341,354,317},{151,47,18,150,332},},
{{319,67,21,317,335},},{{155,12,23,152,40},{150,35,25,341,230,149},},{{340,29,10,327,0},{161,11,25,341,281,152},},{{169,26,25,341,230,153},},
{{319,71,21,317,335},{153,25,21,153,159},},{{318,63,17,318,236},},{{321,89,23,163,223},{150,50,23,149,223},},{{163,78,19,321,208},},
{{151,50,24,333,320,149},{149,49,21,149,159},},{{318,68,18,318,239},},{{317,75,21,317,159},{219,28,24,333,320,153},{161,6,16,165,286},},
{{152,16,18,165,203},{149,38,25,341,188,149},},{{169,33,21,355,215},{151,39,21,149,304},},{{326,7,21,155,86},},{{152,18,17,165,198},
{152,7,16,165,193},},{{219,29,16,169,326},},{{319,66,24,333,351,317},{165,13,17,165,236},},{{316,4,24,333,320,152},{155,7,16,165,59},},
{{321,86,24,333,227,163},{316,6,21,152,304},{161,11,17,165,291},},{{319,64,21,317,335},{317,67,24,333,183,317},{149,44,19,150,208},},
{{161,9,21,152,252},{153,19,23,153,177},},{{340,34,10,327,0},{161,8,21,323,242},},{{327,29,21,153,86},{321,80,18,321,239},
{150,40,21,149,211},},{{161,6,25,341,281,152},},{{324,52,21,149,86},{169,24,16,169,233},{154,11,16,165,286},},{{155,18,25,341,53,152},},
{{219,21,21,153,304},{150,55,18,150,239},},{{319,68,25,341,354,317},{163,85,16,321,193},{161,10,17,165,291},},{{169,21,25,341,230,153},
{163,83,21,163,159},},{0},{{323,5,1,316,0},{219,19,23,153,316},},{{343,51,2,342,2},{154,13,21,152,252},},{{161,16,24,333,276,152},},
{{349,58,4294967295U,349,0,154},{149,48,21,149,159},},{{327,25,21,153,86},{219,32,16,169,326},},{{331,62,23,353,92},{317,74,21,345,171},
{154,3,23,152,270},},{{169,19,23,153,223},{154,5,18,165,296},},{{155,9,18,165,71},{154,6,16,165,286},},{{316,11,24,333,320,152},
{154,7,18,165,296},},{{321,90,21,348,215},{318,67,23,317,223},{317,75,24,333,183,317},},{{219,27,17,169,329},{152,4,25,341,188,152},},
{{165,7,18,165,239},},{{316,5,18,165,332},{150,45,16,150,233},},{{316,7,21,152,304},{169,34,25,341,230,153},},{{149,41,25,341,188,149},},
{0},{{323,21,1,219,0},},{{163,88,21,347,171},{161,18,21,152,252},},{{219,22,24,333,320,153},{165,13,25,341,230,152},},{{169,24,17,169,236},
{151,43,16,150,326},},{{322,88,21,347,343},{321,79,21,163,211},},{{321,60,23,163,223},},{{169,26,18,169,239},{149,47,23,149,177},},
{{151,47,16,150,326},},{{153,29,19,169,208},},{{316,18,24,333,320,152},},{{317,69,25,341,188,317},{165,17,21,350,215},},{{322,79,17,321,360},
{317,68,25,341,188,317},},{{316,13,18,165,332},{153,25,19,169,208},},{{150,52,16,150,233},},{{321,89,21,163,211},{150,50,21,149,211},},
{{163,78,17,321,198},{161,4,17,165,291},},{0},{{321,91,16,321,233},{321,85,18,321,239},{150,48,16,150,233},},{{317,75,23,317,177},
{161,6,18,165,296},},{{319,62,25,341,354,317},{152,5,17,165,198},},{{163,91,19,321,208},{151,48,16,150,326},},{{165,6,17,165,236},
{154,9,25,341,281,152},},{{152,18,19,165,208},{152,7,18,165,203},},{{154,6,24,333,276,152},{151,54,21,337,312},},{{322,85,24,333,351,163},
{317,63,21,317,159},{149,55,21,149,159},},{{322,85,25,341,354,163},},{{150,42,25,341,230,149},},{{319,64,23,317,347},{149,44,17,150,198},},
{{322,91,18,321,363},{154,16,25,341,281,152},},{{322,89,21,163,335},{151,52,17,150,329},},{{325,16,20,155,0},{321,80,16,321,233},
{150,40,23,149,223},},{0},{{334,18,11,328,0},{328,10,21,152,86},},{{328,11,21,152,86},{150,57,21,149,211},},{{219,21,23,153,316},
{150,55,16,150,233},},{{165,16,21,152,211},{163,85,18,321,203},},{{163,83,19,321,208},},{{155,13,24,333,47,152},{153,34,25,341,188,153},},
{{153,28,24,333,183,153},},{{318,71,25,341,230,317},{154,13,23,152,270},},{{324,50,21,149,86},{169,23,17,169,236},{165,13,23,152,223},},
{{165,12,23,152,223},{149,48,19,150,208},},{{155,11,17,165,65},},{{163,79,24,333,183,163},{154,3,21,152,252},},{{151,51,23,149,316},},
{{319,69,24,333,351,317},{163,81,16,321,193},},{0},{{318,67,21,317,211},{165,5,24,333,227,152},{150,47,17,150,236},},{{151,49,25,341,323,149},
{151,36,24,333,320,149},},{{316,3,25,341,323,152},},{{316,5,16,165,326},{150,45,18,150,239},},{{321,85,16,321,233},{150,43,17,150,236},},
{{154,16,21,152,252},{152,6,17,165,198},},{{316,7,17,165,329},{155,4,21,152,19},},{{316,4,21,152,304},},{{161,18,23,152,270},},
{{319,65,25,341,354,317},{152,10,17,165,198},},{{322,60,24,333,351,163},{317,65,18,318,203},{149,45,18,150,203},},{{219,29,23,153,316},},
{{321,60,21,163,211},{219,28,23,153,316},},{{149,47,17,150,198},},{0},{{153,29,17,169,198},},{{219,24,23,153,316},},{{163,80,24,333,183,163},},
{{322,79,23,163,347},{151,45,24,333,320,149},},{{153,25,17,169,198},},{{316,17,21,350,308},{150,52,18,150,239},},{0},{{151,50,23,149,316},},
{0},{{152,52,0,326,97},{149,57,16,150,193},},{{219,33,21,355,308},{165,4,18,165,239},},{{319,77,24,333,351,317},{152,5,23,152,177},},
{{151,48,18,150,332},},{{219,26,17,169,329},{161,16,17,165,291},},{{337,57,11,324,0},{152,18,21,152,159},},{{323,16,1,316,0},
{219,32,25,341,323,153},{154,17,21,350,258},},{{324,40,21,149,86},{169,29,17,169,236},{149,55,23,149,177},},{{328,5,21,152,86},},
{{152,6,25,341,188,152},},{{152,11,25,341,188,152},{149,44,23,149,177},},{{322,91,16,321,357},{155,5,23,152,40},{151,42,24,333,320,149},},
{{322,89,23,163,347},{321,89,16,321,233},},{{318,76,21,356,215},{169,23,21,153,211},},{{151,40,21,149,304},},{{169,21,17,169,236},},
{{153,28,25,341,188,153},{150,57,23,149,223},},{{219,21,25,341,323,153},{163,89,21,163,159},},{{161,10,21,152,252},{152,15,21,334,171},},
{{163,83,17,321,198},},{{327,34,21,153,86},{153,24,25,341,188,153},},{{165,18,16,165,233},},{{318,71,23,317,223},{149,20,3,343,101},},
{0},{{149,48,17,150,198},},{{150,49,24,333,227,149},},{{324,35,21,149,86},},{{326,6,21,155,86},{151,51,21,149,304},},{0},{{153,22,16,169,193},
{149,55,25,341,188,149},},{{154,18,18,165,296},},{{149,52,24,333,183,149},},{{152,17,21,350,165},{151,55,24,333,320,149},},{{318,65,24,333,227,317},
{219,22,18,169,332},{165,11,17,165,236},},{{219,25,24,333,320,153},{150,43,23,149,223},},{{154,16,23,152,270},{152,6,19,165,208},},
{{337,42,11,324,0},{155,4,23,152,40},},{{321,83,17,321,236},},{{318,77,21,317,211},{161,18,25,341,281,152},},{{165,13,21,152,211},
{152,10,19,165,208},},{{169,24,21,153,211},{149,45,16,150,193},},{{345,77,11,330,0},{316,3,24,333,320,152},{163,84,16,321,193},},
{{321,83,24,333,227,163},{321,78,25,341,230,163},{155,10,23,152,40},},{{319,71,17,318,360},{152,12,25,341,188,152},{149,47,19,150,208},},
{{319,69,18,318,363},},{{330,64,21,317,86},{169,26,24,333,227,153},{153,29,23,153,177},},{{322,80,24,333,351,163},{319,71,18,318,363},},
{{319,75,17,318,360},{152,21,0,326,97},},{{322,79,21,163,335},},{0},{0},{{321,89,17,321,236},{149,52,16,150,193},},{{151,50,21,149,304},
{149,36,25,341,188,149},},{{325,6,20,155,0},{153,27,25,341,188,153},},{{318,68,24,333,227,317},},{{165,4,16,165,233},},{{317,77,24,333,183,317},
{152,5,21,152,159},},{{319,63,23,317,347},{153,23,25,341,188,153},},{{219,26,23,153,316},{165,6,21,152,211},},{{321,84,24,333,227,163},
{152,18,23,152,177},},{0},{{319,66,18,318,363},{169,29,23,153,223},{149,42,16,150,193},},{{219,24,25,341,323,153},{161,9,18,165,296},},
{{161,17,21,350,258},{154,4,23,152,270},},{{149,44,21,149,159},},{{155,5,25,341,53,152},},{{322,89,17,321,360},{169,34,21,153,211},
{151,57,16,150,326},},{0},{{322,83,17,321,360},{151,40,23,149,316},},{{331,63,23,319,92},{169,27,25,341,230,153},},{{316,6,24,333,320,152},
{150,57,25,341,230,149},},{{319,77,23,317,347},},{{165,16,17,165,236},{161,10,23,152,270},},{{155,16,16,165,59},{153,32,18,169,203},},
{{161,16,23,152,270},},{{316,13,24,333,320,152},{165,18,18,165,239},},{{318,71,21,317,211},{219,34,17,169,329},},{{323,25,1,219,0},
{154,4,21,152,252},},{{316,15,21,334,312},{154,5,21,152,252},},{{333,85,13,322,0},{219,32,18,169,332},{154,6,17,165,291},},
{{317,68,21,317,159},{152,7,19,165,208},},{{354,59,14,349,0},{317,75,25,341,188,317},{155,6,18,165,71},},{{155,9,24,333,47,152},
{152,5,19,165,208},},{{153,22,18,169,203},},{{154,18,16,165,286},{154,7,17,165,291},},{{169,34,24,333,227,153},{149,39,25,341,188,149},},
{{169,28,23,153,223},},{{161,3,23,152,270},},{{150,43,21,149,211},},{{326,0,21,155,86},{149,43,25,341,188,149},},{{322,84,24,333,351,163},
{155,4,17,165,65},},{0},{{165,11,18,165,239},{161,13,24,333,276,152},},{{161,15,21,334,264},{152,10,21,152,159},},{{330,69,21,317,86},
{325,11,20,155,0},},{{321,81,21,163,211},{318,75,16,318,233},{151,51,25,341,323,149},},{{151,50,25,341,323,149},},{{161,9,23,152,270},
{151,41,25,341,323,149},},{{330,65,21,317,86},{319,69,16,318,357},},{{332,44,1,151,0},{317,68,24,333,183,317},{153,29,21,153,159},},
{{316,13,17,165,329},},{{324,38,21,149,86},{319,75,23,317,347},},{{169,22,21,153,211},},{{155,10,24,333,47,152},},{{318,63,25,341,230,317},
{169,21,24,333,227,153},},{{155,13,17,165,65},},{0},{{322,83,24,333,351,163},},{{330,75,21,317,86},{163,91,16,321,193},},{{161,6,24,333,276,152},
{152,3,24,333,183,152},},{{343,19,2,342,2},{322,81,21,163,335},{153,21,18,169,203},},{{319,64,18,318,363},},{{318,66,16,318,233},
{165,6,23,152,223},},{{318,64,21,317,211},{152,18,25,341,188,152},{152,7,24,333,183,152},},{{154,6,18,165,296},},{{169,29,21,153,211},
{149,42,18,150,203},},{{321,86,23,163,223},},{{317,65,23,317,177},{152,9,18,165,203},{151,52,16,150,326},},{{317,67,16,318,193},
{152,11,21,152,159},{149,55,16,150,193},},{0},{{155,3,24,333,47,152},},{{152,13,18,165,203},},{{165,11,24,333,227,152},},{0},{{155,18,17,165,65},
{150,38,24,333,227,149},},{{324,42,21,149,86},{150,36,21,149,211},},{{324,39,21,149,86},{151,44,17,150,329},},{{155,16,18,165,71},
{153,32,16,169,193},},{{323,6,1,316,0},{322,78,24,333,351,163},},{0},{{219,34,23,153,316},{163,81,24,333,183,163},},{{169,23,23,153,223},
{155,10,16,165,59},},{{332,49,1,151,0},{322,85,23,163,347},{163,86,21,163,159},},{{318,69,16,318,233},{165,3,21,152,211},},
{{161,5,18,165,296},{149,35,24,333,183,149},},{{169,32,24,333,227,153},{151,38,24,333,320,149},},{{355,30,1,340,0},{149,37,8,352,129},},
{{165,5,23,152,223},{161,7,17,165,291},},{{165,7,24,333,227,152},{152,4,18,165,203},},{{322,80,23,163,347},{161,4294967295U,4294967295U,154,1,154},
{151,41,23,149,316},},{{338,21,11,327,0},{169,28,21,153,211},},{{319,77,25,341,354,317},{150,45,24,333,227,149},},{{154,5,25,341,281,152},
{153,34,17,169,198},},{{319,67,25,341,354,317},{153,33,21,355,165},},{0},{{328,6,21,152,86},{150,41,24,333,227,149},},{{318,77,17,318,236},},
{{163,86,24,333,183,163},{152,10,23,152,177},},{0},{0},{{321,78,21,163,211},{161,10,25,341,281,152},},{{154,10,17,165,291},{152,12,21,152,159},},
{{318,63,21,317,211},{151,47,24,333,320,149},},{{316,18,21,152,304},},{{161,11,16,165,286},},{{319,75,21,317,335},{165,5,25,341,230,152},},
{{322,79,25,341,354,163},{165,4,25,341,230,152},},{{161,3,25,341,281,152},},{0},{{149,57,17,150,198},},{0},{{153,27,21,153,159},},{{150,48,24,333,227,149},},
{{161,16,16,165,286},},{{322,81,23,163,347},{153,21,16,169,193},},{{219,32,24,333,320,153},},{{317,71,24,333,183,317},{165,6,25,341,230,152},},
{{318,64,23,317,223},{219,24,18,169,332},},{{149,40,25,341,188,149},},{{329,91,21,163,86},{150,44,17,150,236},},{{317,75,16,318,193},
{150,42,18,150,239},},{{317,65,21,317,159},{163,91,17,321,198},{152,9,16,165,193},},{{317,67,18,318,203},{149,44,25,341,188,149},},
{{353,61,23,354,90},{151,42,18,150,332},},{0},{{219,23,25,341,323,153},{152,13,16,165,193},},{{169,25,16,169,233},{154,11,25,341,281,152},},
{{169,27,21,153,211},},{{155,18,23,152,40},},{{150,36,23,149,223},},{{169,21,16,169,233},{151,57,18,150,332},},{{329,79,21,163,86},},
{{155,13,16,165,59},{153,24,19,169,208},},{{327,23,21,153,86},},{{318,71,17,318,236},{219,34,21,153,304},},{{153,26,16,169,193},},
{{150,51,23,149,223},},{{318,69,18,318,239},{165,3,23,152,223},{153,21,21,153,159},},{{152,18,18,165,203},},{{351,53,1,335,0},
{169,19,25,341,230,153},{149,50,24,333,183,149},},{{316,11,17,165,329},{152,2,0,326,97},},{{318,67,24,333,227,317},{163,78,16,321,193},},
{{219,22,17,169,329},{152,4,16,165,193},},{{322,80,25,341,354,163},{169,34,16,169,233},{149,39,21,149,159},},{{347,78,11,329,0},
{151,55,18,150,332},},{{316,5,24,333,320,152},{155,6,16,165,59},},{{321,83,18,321,239},{317,64,21,317,159},{161,16,25,341,281,152},},
{{317,66,24,333,183,317},{152,12,23,152,177},},{{321,81,18,321,239},},{{163,85,19,321,208},},{{332,45,1,151,0},{152,11,23,152,177},},
{{322,84,17,321,360},{322,60,21,163,335},},{{322,85,17,321,360},},{{321,81,17,321,236},},{{334,13,11,328,0},{321,78,23,163,223},},
{{154,10,23,152,270},{149,47,25,341,188,149},},{{322,81,25,341,354,163},},{{316,18,23,152,316},},{{161,11,18,165,296},},{{163,80,16,321,193},},
{{346,78,10,329,0},{169,22,17,169,236},{151,45,16,150,326},},{{153,25,25,341,188,153},},{0},{{154,12,25,341,281,152},{151,35,23,149,316},},
{{149,49,18,150,203},},{{153,27,23,153,177},},{{325,5,20,155,0},{219,29,18,169,332},},{{319,77,21,317,335},{317,77,23,317,177},},
{{322,81,17,321,360},{151,48,25,341,323,149},},{0},{{219,26,25,341,323,153},},{{318,64,17,318,236},{219,24,24,333,320,153},},{{151,52,25,341,323,149},},
{{316,4,17,165,329},{155,7,25,341,53,152},},{{150,42,16,150,233},},{{151,57,17,150,329},},{{163,89,16,321,193},{152,11,17,165,198},},
{{322,91,24,333,351,163},{151,42,16,150,326},},{{324,49,21,149,86},{321,80,25,341,230,163},},{{316,6,25,341,323,152},},{{319,77,16,318,357},
{316,7,25,341,323,152},{154,11,23,152,270},},{{318,66,25,341,230,317},{169,27,23,153,223},},{{155,18,21,152,19},},{{319,68,16,318,357},
{317,71,21,317,159},{161,10,24,333,276,152},},{{332,43,1,151,0},{151,44,21,149,304},},{{155,15,21,334,33},},{{153,34,19,169,208},
{153,24,17,169,198},},{{332,42,1,151,0},{165,18,24,333,227,152},{155,5,21,152,19},},{{317,69,18,318,203},{169,23,24,333,227,153},},
{{321,91,23,163,223},{153,26,18,169,203},},{{321,88,21,347,219},{155,11,24,333,47,152},{150,51,21,149,211},},{{165,3,25,341,230,152},
{150,49,16,150,233},},{{331,66,23,319,92},{169,23,16,169,233},},{0},{{165,5,16,165,233},},{{161,7,21,152,252},},{0},{{319,63,21,317,335},
{169,34,18,169,239},{149,39,23,149,177},},{{151,55,16,150,326},{149,57,24,333,183,149},},{{219,25,21,153,304},},{{317,62,21,317,159},
{161,3,24,333,276,152},{149,54,21,337,171},},{{321,79,23,163,223},},{0},{{335,42,10,324,0},},{{163,60,21,163,159},{152,10,24,333,183,152},},
{{169,24,24,333,227,153},{151,43,25,341,323,149},},{{149,49,24,333,183,149},},{{153,21,19,169,208},},{{316,16,18,165,332},{155,16,21,152,19},},
{{163,84,18,321,203},{154,10,21,152,252},},{{153,29,24,333,183,153},},{{326,16,21,155,86},{155,12,24,333,47,152},},{0},{{334,4,11,328,0},
{163,80,18,321,203},},{{326,11,21,155,86},{155,13,18,165,71},{151,45,18,150,332},},{{321,84,18,321,239},{150,52,25,341,230,149},},
{0},{{161,4,24,333,276,152},{151,35,21,149,304},},{{149,49,16,150,193},},{{342,8,21,323,4},{322,83,18,321,363},{153,27,17,169,198},},
{{161,6,21,152,252},{152,3,21,152,159},},{{152,16,25,341,188,152},{152,5,24,333,183,152},},{{169,28,25,341,230,153},{151,39,24,333,320,149},},
{{153,23,17,169,198},},{{316,10,16,165,326},{165,18,25,341,230,152},},{{321,84,16,321,233},},{{169,29,24,333,227,153},},{{150,44,21,149,211},
{149,55,17,150,198},},{{316,6,16,165,326},},{{317,65,25,341,188,317},{163,79,25,341,188,163},},{{163,89,18,321,203},{152,11,19,165,208},},
{{326,4,21,155,86},{155,3,23,152,40},},{{165,10,25,341,230,152},{150,40,24,333,227,149},},{{165,9,21,152,211},},{{323,10,1,316,0},
{154,11,21,152,252},},{{169,27,17,169,236},{155,4294967295U,4294967295U,154,2,154},},{{321,79,24,333,227,163},{150,55,23,149,223},{150,36,24,333,227,149},},
{{317,71,23,317,177},{161,13,17,165,291},},{{326,51,21,155,86},{151,44,23,149,316},},{{155,16,24,333,47,152},},{{333,78,13,322,0},
{322,78,18,321,363},{153,24,23,153,177},},{{316,13,16,165,326},{219,19,25,341,323,153},},{{163,81,18,321,203},},{{319,68,24,333,351,317},
{169,26,16,169,233},},{{322,80,16,321,357},{169,25,18,169,239},},{{316,9,16,165,326},{150,49,18,150,239},},{{154,3,25,341,281,152},},
{{149,37,7,352,121},},{{316,11,21,152,304},{153,22,25,341,188,153},},{{323,11,1,316,0},{161,7,23,152,270},{150,47,24,333,227,149},},
{{154,18,24,333,276,152},{154,7,25,341,281,152},},{{318,66,23,317,223},{151,49,21,149,304},},{{327,24,21,153,86},{316,5,23,152,316},
{150,45,21,149,211},},{{321,85,25,341,230,163},{219,25,23,153,316},{150,43,24,333,227,149},},{{324,41,21,149,86},{317,64,17,318,198},
{317,62,23,317,177},},{{149,43,17,150,198},},{{322,84,16,321,357},{155,4,25,341,53,152},{154,4,16,165,286},},{{219,31,21,338,312},
{165,12,24,333,227,152},},{{317,68,17,318,198},{163,60,23,163,177},},{{219,25,17,169,329},},{{219,24,17,169,329},},{{318,75,24,333,227,317},
{219,27,21,153,304},},{{321,60,25,341,230,163},{316,16,16,165,326},{219,26,21,153,304},},{{151,47,23,149,316},},{{325,19,20,155,0},
{151,57,24,333,320,149},},{{323,27,1,219,0},{150,54,21,337,219},},{{323,26,1,219,0},{169,32,17,169,236},},{{331,71,23,319,92},},
{{323,24,1,219,0},{161,46,21,332,246},},{{316,12,25,341,323,152},},{{321,89,24,333,227,163},{150,50,24,333,227,149},},{{321,79,17,321,236},
{154,12,21,152,252},},{{321,78,17,321,236},{149,36,23,149,177},},{{328,16,21,152,86},{322,83,16,321,357},{153,27,19,169,208},},
{{161,6,23,152,270},{152,3,23,152,177},},{{317,71,25,341,188,317},{149,51,21,149,159},},{{326,5,21,155,86},{151,48,21,149,304},},
{{153,23,19,169,208},},{{318,66,24,333,227,317},{316,10,18,165,332},{155,7,24,333,47,152},},{{318,75,18,318,239},{317,61,23,354,155},},
{{322,85,21,163,335},{317,63,24,333,183,317},{149,42,25,341,188,149},},{{150,44,23,149,223},},{{316,6,18,165,332},{169,22,23,153,223},},
{{165,10,16,165,233},{154,4,25,341,281,152},},{{322,91,23,163,347},{155,5,16,165,59},},{{330,62,21,317,86},{155,3,21,152,19},},
{{165,12,21,152,211},},{{163,91,23,163,177},},{{151,40,25,341,323,149},{149,46,21,332,145},},{0},{{150,55,21,149,211},},{{317,71,17,318,198},
{154,9,16,165,286},},{{151,44,25,341,323,149},},{{153,32,24,333,183,153},},{{322,78,16,321,357},{153,34,23,153,177},{153,24,21,153,159},},
{{154,13,16,165,286},},{{151,52,21,149,304},},{{154,18,17,165,291},{149,48,24,333,183,149},},{{328,17,21,350,88},{318,62,24,333,227,317},
{150,51,25,341,230,149},},{{318,69,24,333,227,317},{152,16,19,165,208},},{{149,50,21,149,159},},{{219,22,16,169,326},{155,9,23,152,40},},
{{325,9,20,155,0},{316,11,23,152,316},},{{219,29,17,169,329},{161,7,25,341,281,152},},{{219,27,18,169,332},{165,7,16,165,233},},
{{319,63,17,318,360},{151,49,23,149,316},},{{316,5,21,152,304},{150,45,23,149,223},},{{322,89,24,333,351,163},{165,9,23,152,223},},
{{317,62,25,341,188,317},{154,16,16,165,286},{154,5,17,165,291},},{{329,81,21,163,86},{319,67,17,318,360},{149,43,19,150,208},},
{{322,84,18,321,363},{319,67,24,333,351,317},{155,10,21,152,19},},{{165,11,25,341,230,152},{161,18,16,165,286},},{{337,52,11,324,0},
{317,68,23,317,177},},{{322,90,21,348,339},{319,68,18,318,363},{149,45,25,341,188,149},},{{319,71,16,318,357},{163,83,24,333,183,163},},
{{325,58,20,155,0},{322,81,24,333,351,163},},{{324,55,21,149,86},{169,26,17,169,236},},{{151,47,21,149,304},},{{319,75,24,333,351,317},},
{{155,17,21,350,26},},{{318,65,17,318,236},{161,11,24,333,276,152},},{0},{{155,10,17,165,65},},{{318,63,18,318,239},},{{153,28,23,153,177},},
{{317,63,23,317,177},{151,35,25,341,323,149},},{{319,62,21,317,335},{149,36,21,149,159},},{{321,91,21,163,211},{318,68,17,318,236},
{150,48,21,149,211},},{{329,90,21,348,88},{219,28,25,341,323,153},{161,6,17,165,291},},{{317,77,17,318,198},{149,51,23,149,177},},
{{153,21,24,333,183,153},{151,48,23,149,316},},{{153,23,21,153,159},},{{152,18,16,165,193},{152,7,17,165,198},},{{332,48,1,151,0},},
{{319,66,25,341,354,317},{169,34,23,153,223},{161,5,24,333,276,152},},{{150,44,25,341,230,149},},{{321,86,25,341,230,163},{169,32,23,153,223},},
{{331,77,23,319,92},{161,12,24,333,276,152},{152,9,24,333,183,152},},{{322,91,21,163,335},{319,74,21,345,343},{155,5,18,165,71},},
{{319,77,17,318,360},{316,7,24,333,320,152},},{{161,18,17,165,291},},{{318,74,21,345,219},{219,23,17,169,329},{152,13,24,333,183,152},},
{{169,25,24,333,227,153},{154,11,17,165,291},},{{325,18,20,155,0},{150,57,16,150,233},},{0},{{165,16,24,333,227,152},{154,9,18,165,296},},
{{329,60,21,163,86},{154,5,23,152,270},},{0},{{165,18,21,152,211},{154,7,23,152,270},},{{163,81,23,163,177},{154,13,18,165,296},},
{{154,1,23,325,301},},{{153,26,24,333,183,153},},{{155,11,18,165,71},},{{165,5,17,165,236},{161,5,21,152,252},},{{324,45,21,149,86},
{149,50,23,149,177},},{{155,9,17,165,65},},{{316,11,25,341,323,152},{153,22,21,153,159},},{{318,67,16,318,233},{149,57,25,341,188,149},},
{{219,27,16,169,326},{152,4,24,333,183,152},},{{322,86,23,163,347},},{{318,65,21,317,211},{150,45,17,150,236},},{{150,55,24,333,227,149},},
{{154,16,18,165,296},{149,41,24,333,183,149},},{{319,67,23,317,347},{317,66,16,318,193},{149,43,21,149,159},},{0},{{149,49,25,341,188,149},},
{{219,22,25,341,323,153},{165,13,24,333,227,152},},{{149,45,23,149,177},},{{219,21,16,169,326},},{{342,46,21,332,81},{321,81,25,341,230,163},
{150,39,24,333,227,149},},{{338,29,11,327,0},{154,10,24,333,276,152},},{{319,69,25,341,354,317},},{{321,86,21,163,211},{153,29,18,169,203},},
{{328,12,21,152,86},{321,85,17,321,236},{150,35,24,333,227,149},},{{321,84,17,321,236},},{{333,79,13,322,0},{322,79,18,321,363},
{321,83,21,163,211},},{{153,25,18,169,203},},{{326,58,21,155,86},{318,63,16,318,233},},{0},{{347,91,11,329,0},{163,78,18,321,203},
{152,11,24,333,183,152},},{0},{{319,66,16,318,357},{150,48,23,149,223},},{{322,86,24,333,351,163},},{{152,5,18,165,203},{149,38,24,333,183,149},},
{{151,48,17,150,329},},{{333,81,13,322,0},{151,52,18,150,332},},{{333,80,13,322,0},{149,55,18,150,203},},{{153,19,25,341,188,153},},
{{169,29,18,169,239},{149,42,21,149,159},},{{163,78,24,333,183,163},{155,7,17,165,65},},{{333,84,13,322,0},{150,42,24,333,227,149},},
{{317,67,25,341,188,317},{165,10,24,333,227,152},{149,44,18,150,203},},{{330,77,21,317,86},{328,7,21,152,86},},{{333,89,13,322,0},},
{{332,57,1,151,0},{321,80,17,321,236},{165,12,25,341,230,152},},{{317,63,25,341,188,317},{219,23,23,153,316},},{{165,13,18,165,239},
{153,26,25,341,188,153},},{{155,18,24,333,47,152},{150,57,18,150,239},},{{150,55,17,150,236},},{{323,29,1,219,0},{163,85,17,321,198},
{161,10,16,165,286},},{{163,83,18,321,203},},{{322,86,21,163,335},},{{165,18,23,152,223},},{{322,80,17,321,360},{163,81,17,321,198},},
{{165,16,23,152,223},},{0},{{155,11,16,165,59},},{0},{{151,38,23,149,316},},{{151,43,21,149,304},},{{153,22,23,153,177},},{{219,29,21,153,304},
{150,47,18,150,239},},{{151,49,24,333,320,149},{151,36,25,341,323,149},},{{317,65,17,318,198},},{{318,65,23,317,223},{316,5,17,165,329},
{155,6,25,341,53,152},},{{154,4,17,165,291},{150,43,18,150,239},},{{152,6,16,165,193},},{{317,66,18,318,203},{149,43,23,149,177},},
{{219,25,18,169,332},},{{318,77,24,333,227,317},{219,24,16,169,326},{161,13,23,152,270},},{{219,22,23,153,316},{152,10,16,165,193},},
{{165,7,23,152,223},{149,45,21,149,159},},{{316,16,24,333,320,152},},{{165,15,21,334,219},{151,57,25,341,323,149},},{{163,84,25,341,188,163},
{149,47,16,150,193},},{{169,32,16,169,233},{151,47,17,150,329},},{{153,29,16,169,193},},{{323,9,1,316,0},{316,18,25,341,323,152},},
{{319,75,18,318,363},{163,80,25,341,188,163},},{{322,79,16,321,357},},{{321,79,18,321,239},{153,25,16,169,193},},{{150,52,17,150,236},},
{{321,89,18,321,239},},{{161,4,16,165,286},},{{155,46,21,332,12},},{{321,91,17,321,236},{318,68,21,317,211},{150,48,17,150,236},},
{{219,28,21,153,304},},{{319,62,24,333,351,317},{152,5,16,165,193},},{{317,75,18,318,203},{316,13,21,152,304},},{{219,26,18,169,332},
{165,6,16,165,233},},{{318,64,24,333,227,317},{152,7,21,152,159},},{{154,6,25,341,281,152},},{{319,66,21,317,335},{169,29,16,169,233},
{149,42,23,149,177},},{{155,7,23,152,40},},{{161,12,23,152,270},{152,9,23,152,177},},{{149,44,16,150,193},},{{322,91,17,321,360},
{151,42,25,341,323,149},},{0},{{321,80,23,163,223},{319,65,16,318,357},{163,85,24,333,183,163},},{{219,23,21,153,304},},{0},{{150,38,23,149,223},},
{{321,79,16,321,233},{219,21,24,333,320,153},},{{161,10,18,165,296},},{{163,83,16,321,193},{154,15,21,334,264},},{{155,13,25,341,53,152},
{153,34,24,333,183,153},},{{165,18,17,165,236},},{{318,71,24,333,227,317},{163,81,19,321,208},},{{152,16,16,165,193},},{{149,48,18,150,203},},
{{318,69,21,317,211},{219,32,17,169,329},{150,49,25,341,230,149},},{{165,10,18,165,239},{161,5,25,341,281,152},},{{326,19,21,155,86},
{151,38,21,149,304},},{{339,18,10,328,0},},{{153,22,17,169,198},},{{163,91,25,341,188,163},{150,47,16,150,233},},{{322,80,18,321,363},
{321,81,16,321,233},{149,52,25,341,188,149},},{{163,85,21,163,159},},{{163,84,21,163,159},{155,6,23,152,40},},{{165,9,25,341,230,152},
{150,43,16,150,233},},{{161,16,21,152,252},{152,6,18,165,203},},{{163,81,21,163,159},},{{327,28,21,153,86},{169,26,21,153,211},
{150,41,21,149,211},},{{169,25,25,341,230,153},{161,13,21,152,252},},{{219,22,21,153,304},{152,10,18,165,203},},{{322,60,25,341,354,163},
{151,43,23,149,316},{149,45,19,150,208},},{{150,39,23,149,223},},{{345,63,11,330,0},{319,75,25,341,354,317},},{{152,12,24,333,183,152},
{149,47,18,150,203},},{{319,69,21,317,335},{318,65,16,318,233},},{{318,66,18,318,239},{153,34,21,153,159},},{{325,0,20,155,0},},
{{356,73,1,344,0},{319,75,16,318,357},},{{153,31,21,338,171},{151,45,25,341,323,149},},{{319,63,18,318,363},{317,63,16,318,193},},
{{325,4,20,155,0},},{{161,12,25,341,281,152},},{0},{{325,51,20,155,0},{153,27,24,333,183,153},},{{318,68,23,317,223},{318,62,25,341,230,317},
{161,9,17,165,291},},{{219,27,24,333,320,153},{165,4,17,165,236},},{{165,7,25,341,230,152},{152,16,23,152,177},},{{328,3,21,152,86},
{153,23,24,333,183,153},},{{219,26,16,169,326},{165,6,18,165,239},},{{321,84,25,341,230,163},{152,7,23,152,177},},{{154,6,23,152,270},},
{{149,42,17,150,198},},{{155,7,21,152,19},},{{317,65,16,318,193},{161,12,21,152,252},{152,9,21,152,159},},{{319,64,16,318,357},
{169,31,21,338,219},{149,57,23,149,177},},{{155,5,24,333,47,152},{151,42,23,149,316},},{{335,52,10,324,0},{323,7,1,316,0},},
{{321,80,21,163,211},{317,65,24,333,183,317},},{{169,25,23,153,223},},{{169,27,24,333,227,153},},{{327,19,21,153,86},{150,38,21,149,211},},
{{317,69,16,318,193},{163,59,12,349,94},},{{165,16,18,165,239},{154,9,24,333,276,152},},{{155,16,17,165,65},{153,32,19,169,208},},
{{153,24,24,333,183,153},},{{316,13,25,341,323,152},{169,23,18,169,239},},{{219,34,18,169,332},{154,13,24,333,276,152},},{{323,4,1,316,0},
{169,21,18,169,239},},{{149,48,16,150,193},},{{318,69,23,317,223},{316,9,25,341,323,152},{169,32,25,341,230,153},},{{149,35,21,149,159},},
{0},{{323,23,1,219,0},},{{323,22,1,219,0},{153,22,19,169,208},},{{161,1,23,325,301},{152,4,23,152,177},},{{154,4294967295U,4294967295U,154,0,154},
{149,39,24,333,183,149},},{{169,28,24,333,227,153},{151,55,25,341,323,149},},{{155,6,21,152,19},},{{316,7,16,165,326},{219,25,25,341,323,153},},
{{149,43,24,333,183,149},},{{331,65,23,319,92},{328,4,21,152,86},},{{150,41,23,149,223},},{{331,67,23,319,92},{161,18,24,333,276,152},},
{{163,79,18,321,203},{163,60,25,341,188,163},},{{149,45,17,150,198},},{{318,75,17,318,236},{150,39,21,149,211},},{{321,83,25,341,230,163},
{321,78,24,333,227,163},},{{154,10,18,165,296},{151,41,24,333,320,149},},{{319,69,23,317,347},{317,77,21,317,159},},{0},{{161,11,21,152,252},},
{{324,51,21,149,86},},{{319,65,23,317,347},{154,10,25,341,281,152},},{{155,10,25,341,53,152},},{{316,12,23,152,316},{150,52,21,149,211},},
{{319,66,23,317,347},},{{322,86,25,341,354,163},{149,36,24,333,183,149},},{{322,83,25,341,354,163},{319,68,23,317,347},},{{318,68,25,341,230,317},},
{{165,4,23,152,223},{152,3,25,341,188,152},},{{317,77,25,341,188,317},{152,16,21,152,159},{149,55,19,150,208},},{{328,13,21,152,86},
{323,18,1,316,0},},{{330,76,21,356,88},{316,10,25,341,323,152},},{{152,18,24,333,183,152},{152,7,25,341,188,152},},{{322,78,25,341,354,163},
{154,6,21,152,252},},{{319,66,17,318,360},{151,52,23,149,316},{149,42,19,150,208},},{{150,42,23,149,223},},{{163,91,18,321,203},
{152,9,19,165,208},},{{149,57,21,149,159},},{{151,42,21,149,304},},{{322,89,16,321,357},{317,62,24,333,183,317},},{{152,13,19,165,208},},
{{169,25,21,153,211},{152,13,0,326,97},},{0},{{155,18,18,165,71},{150,57,24,333,227,149},},{{348,87,1,346,0},{316,18,16,165,326},},
{{165,16,16,165,233},{163,85,23,163,177},},{{319,71,24,333,351,317},{153,32,17,169,198},},{{322,81,16,321,357},{169,24,18,169,239},},
{{316,13,23,152,316},},{{219,34,16,169,326},},{0},{{327,21,21,153,86},{318,64,25,341,230,317},},{{318,69,17,318,236},{318,65,25,341,230,317},
{219,32,21,153,304},},{{318,66,21,317,211},{149,35,23,149,177},},{{151,51,24,333,320,149},{151,38,25,341,323,149},},{{155,9,25,341,53,152},},
{{219,29,24,333,320,153},{161,7,16,165,286},},{{154,7,16,165,286},{152,4,21,152,159},},{{319,63,24,333,351,317},{154,4,18,165,296},},
{{151,55,23,149,316},},{{150,45,25,341,230,149},},{{321,85,21,163,211},{316,7,18,165,332},},{{161,9,24,333,276,152},{149,56,21,351,165},},
{{322,84,25,341,354,163},{155,4,16,165,59},},{{323,32,1,219,0},{150,41,25,341,230,149},},{{352,20,5,343,2},{161,13,25,341,281,152},},
{{163,86,25,341,188,163},{161,5,16,165,286},},{{323,13,1,316,0},{161,4,18,165,296},},{{332,47,1,151,0},{318,75,23,317,223},},
{{332,52,1,151,0},{316,16,25,341,323,152},},{{154,10,16,165,286},},{{338,34,11,327,0},{319,69,17,318,360},},{0},{{161,11,23,152,270},},
{0},{{344,77,10,330,0},{151,45,21,149,304},},{{149,51,24,333,183,149},},{{316,12,21,152,304},{150,52,23,149,223},},{0},{0},{{322,83,23,163,347},
{321,91,24,333,227,163},},{{155,6,24,333,47,152},},{{165,4,21,152,211},{151,36,23,149,316},},{{151,39,23,149,316},},{{169,22,25,341,230,153},},
{{318,66,17,318,236},{169,21,21,153,211},},{{321,84,21,163,211},},{{163,89,17,321,198},},{{316,4,18,165,332},{150,44,16,150,233},},
{{163,91,21,163,159},{150,42,21,149,211},},{{329,80,21,163,86},{163,90,21,348,165},{152,9,17,165,198},},{{331,75,23,319,92},
{319,65,17,318,360},{163,85,25,341,188,163},},{{319,64,17,318,360},{153,19,24,333,183,153},},{{322,89,18,321,363},{155,3,25,341,53,152},},
{{219,23,24,333,320,153},{152,13,17,165,198},},{0},{0},{{155,1,23,325,77},{150,38,25,341,230,149},},{{150,55,25,341,230,149},},{{151,44,16,150,326},},
{{153,32,23,153,177},},{{155,18,16,165,59},{152,16,17,165,198},},{{163,78,21,163,159},},{{318,71,18,318,239},{163,81,25,341,188,163},},
{{153,26,17,169,198},},{{339,4,10,328,0},{165,9,17,165,236},},{{219,32,23,153,316},},{{149,35,25,341,188,149},},{{169,19,24,333,227,153},
{149,50,25,341,188,149},},{{149,37,9,352,137},},{{318,67,25,341,230,317},{161,7,18,165,296},},{{154,18,23,152,270},{152,4,19,165,208},},
{{324,47,21,149,86},{151,49,16,150,326},{149,52,19,150,208},},{{151,55,21,149,304},},{{316,5,25,341,323,152},{155,6,17,165,65},},
{{154,5,24,333,276,152},},{{317,66,25,341,188,317},},{{155,4,18,165,71},},{{316,3,23,152,316},},{{318,77,16,318,233},{165,11,21,152,211},},
{{329,86,21,163,86},},{{316,6,23,152,316},},{{318,75,21,317,211},{316,7,23,152,316},},{{329,83,21,163,86},{316,4,23,152,316},
{150,56,21,351,215},},{{163,84,17,321,198},{149,47,24,333,183,149},},{{324,36,21,149,86},{151,47,25,341,323,149},},{{335,57,10,324,0},
{153,28,21,153,159},},{{317,63,17,318,198},{154,8,21,323,242},},{{163,80,17,321,198},},{{322,79,24,333,351,163},{151,45,23,149,316},},
{{153,25,24,333,183,153},},{0},{{326,9,21,155,86},{154,12,24,333,276,152},},{{318,63,24,333,227,317},{219,27,25,341,323,153},},{{322,83,21,163,335},},
{{316,16,23,152,316},{150,48,25,341,230,149},},{{169,34,17,169,236},},{{153,21,17,169,198},},{{169,32,21,153,211},},{{325,10,20,155,0},
{316,10,21,152,304},{165,6,24,333,227,152},},{{318,64,16,318,233},{219,24,21,153,304},{149,57,18,150,203},},{{149,40,24,333,183,149},},
{{316,4,16,165,326},{150,44,18,150,239},},{0},{{165,10,21,152,211},},{{163,89,23,163,177},{149,44,24,333,183,149},},{{317,64,25,341,188,317},
{151,42,17,150,329},},{{316,9,18,165,332},},{{152,13,23,152,177},},{{317,69,17,318,198},{152,6,23,152,177},},{{321,91,18,321,239},
{154,7,21,152,252},},{0},{{329,78,21,163,86},{319,68,17,318,360},{154,9,21,152,252},},{{324,48,21,149,86},{151,44,18,150,332},},
{{330,71,21,317,86},{155,16,23,152,40},{153,32,21,153,159},},{{322,78,23,163,347},{153,34,16,169,193},{153,24,18,169,203},},
{{332,55,1,151,0},{154,13,25,341,281,152},},{{318,71,16,318,233},{149,20,4,343,107},},{{153,26,19,169,208},},{{318,62,23,317,223},},
{{325,7,20,155,0},{165,3,24,333,227,152},{150,49,17,150,236},},{{163,79,17,321,198},{161,5,17,165,291},},{{317,76,21,356,165},},
{{316,11,16,165,326},{151,49,17,150,329},},{{165,5,18,165,239},},{{329,85,21,163,86},{152,4,17,165,198},},{{151,49,18,150,332},
{149,52,17,150,198},},{{154,16,17,165,291},},{{165,9,18,165,239},},{{350,14,1,339,0},{154,18,21,152,252},},{{325,13,20,155,0},
{219,21,18,169,332},},{{322,84,21,163,335},{163,79,19,321,208},},{{219,23,18,169,332},},};

static const struct action_table_entry *action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    uint32_t j = 0;
    const struct action_table_entry *entry = 0;
    for (; j < 3; ++j) {
        entry = &action_table[index1][j];
        if (entry->target_nfa_state == nfa_state && entry->dfa_state == dfa_state && entry->dfa_symbol == token)
            break;
        entry = &action_table[index2][j];
        if (entry->target_nfa_state == nfa_state && entry->dfa_state == dfa_state && entry->dfa_symbol == token)
            break;
    }
    if (j >= 3)
        return 0;
    return entry;
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct bluebird_default_tokenizer *tokenizer, struct bluebird_token_run *run, struct bluebird_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 161;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            const struct action_table_entry *entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (!entry)
                abort();
            if (entry->dfa_symbol < 24)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry->push_nfa_state;
            }
            apply_actions(&construct_state, entry->actions, end, end + whitespace);
            if (entry->dfa_state == 59) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry->nfa_state;
            whitespace = end - offset - len;
        }
        struct bluebird_token_run *old = run;
        run = run->prev;
        free(old);
    }
    const struct action_table_entry *entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    if (!entry)
        abort();
    apply_actions(&construct_state, entry->actions, offset, offset + whitespace);
    free(state_stack);
    return construct_finish(&construct_state, offset);
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        if (text[1] == 111 && text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
            *end_token = false;
            *token = 2;
            return 10;
        } else {
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 20;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 8;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 9;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 9;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 9;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 9;
        case 1: return 9;
        case 2: return 9;
        case 3: return 11;
        case 4: return 7;
        case 5: return 11;
        case 6: return 11;
        case 7: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 11;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 2;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 8;
    case 8: return 1;
    case 9: return 0;
    case 10: return 0;
    case 11: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 7;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

