// -----------------------------------------------------------------------------
// This file was generated by the bluebird parsing tool.
// Make sure to #define BLUEBIRD_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define BLUEBIRD_PARSER_IMPLEMENTATION
//   #include "bluebird-parser.h"

#ifndef _BLUEBIRD_PARSER_H_
#define _BLUEBIRD_PARSER_H_

#include "stdbool.h"
#include "stddef.h"
#include "stdint.h"

// A parsed_id represents an element in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// element into its appropriate type of parsed_... element struct.
typedef size_t parsed_id;

// The bluebird_tree struct represents an entire parse tree.  Use the
// bluebird_tree_create_...() functions to create a tree, then call
// bluebird_tree_root() to get the root bluebird_id.
struct bluebird_tree;

// Creates a bluebird_tree from a string.  Remember to call
// bluebird_tree_destroy() when you're done with it.
struct bluebird_tree *bluebird_tree_create_from_string(const char *string);

// Destroys a bluebird_tree, freeing its resources back to the system.
void bluebird_tree_destroy(struct bluebird_tree *);

// Prints a representation of the tree to stdout.
void bluebird_tree_print(struct bluebird_tree *);

// Returns the root parsed_id.
parsed_id bluebird_tree_root_id(struct bluebird_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root parsed_id.
struct parsed_grammar bluebird_tree_get_parsed_grammar(struct bluebird_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};
enum parsed_type {
    PARSED_IDENT,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id comment_token;
    parsed_id rule;
};

struct parsed_comment_token {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id string;
};

struct parsed_rule {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id identifier;
    parsed_id body;
};

struct parsed_body {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id expr;
    parsed_id identifier;
    parsed_id operators;
};

struct parsed_operators {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id fixity;
    parsed_id operator;
};

struct parsed_operator {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    parsed_id expr;
    parsed_id identifier;
};

struct parsed_fixity {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    enum parsed_type type;
    parsed_id assoc;
};

struct parsed_assoc {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    enum parsed_type type;
};

struct parsed_expr {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    enum parsed_type type;
    parsed_id identifier;
    parsed_id rename;
    parsed_id string;
    parsed_id expr;
    parsed_id begin_token;
    parsed_id end_token;
    parsed_id operand;
};

struct parsed_identifier {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    const char *identifier;
    size_t length;
};

struct parsed_number {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    double number;
};

struct parsed_string {
    struct bluebird_tree *_tree;
    parsed_id _next;
    struct source_range range;
    bool empty;
    const char *string;
    size_t length;
};

struct parsed_grammar parsed_grammar_get(struct bluebird_tree *, parsed_id);
struct parsed_comment_token parsed_comment_token_get(struct bluebird_tree *, parsed_id);
struct parsed_rule parsed_rule_get(struct bluebird_tree *, parsed_id);
struct parsed_body parsed_body_get(struct bluebird_tree *, parsed_id);
struct parsed_operators parsed_operators_get(struct bluebird_tree *, parsed_id);
struct parsed_operator parsed_operator_get(struct bluebird_tree *, parsed_id);
struct parsed_fixity parsed_fixity_get(struct bluebird_tree *, parsed_id);
struct parsed_assoc parsed_assoc_get(struct bluebird_tree *, parsed_id);
struct parsed_expr parsed_expr_get(struct bluebird_tree *, parsed_id);
struct parsed_identifier parsed_identifier_get(struct bluebird_tree *, parsed_id);
struct parsed_number parsed_number_get(struct bluebird_tree *, parsed_id);
struct parsed_string parsed_string_get(struct bluebird_tree *, parsed_id);

static inline struct parsed_grammar parsed_grammar_next(struct parsed_grammar parsed)
{
    return parsed_grammar_get(parsed._tree, parsed._next);
}
static inline struct parsed_comment_token parsed_comment_token_next(struct parsed_comment_token parsed)
{
    return parsed_comment_token_get(parsed._tree, parsed._next);
}
static inline struct parsed_rule parsed_rule_next(struct parsed_rule parsed)
{
    return parsed_rule_get(parsed._tree, parsed._next);
}
static inline struct parsed_body parsed_body_next(struct parsed_body parsed)
{
    return parsed_body_get(parsed._tree, parsed._next);
}
static inline struct parsed_operators parsed_operators_next(struct parsed_operators parsed)
{
    return parsed_operators_get(parsed._tree, parsed._next);
}
static inline struct parsed_operator parsed_operator_next(struct parsed_operator parsed)
{
    return parsed_operator_get(parsed._tree, parsed._next);
}
static inline struct parsed_fixity parsed_fixity_next(struct parsed_fixity parsed)
{
    return parsed_fixity_get(parsed._tree, parsed._next);
}
static inline struct parsed_assoc parsed_assoc_next(struct parsed_assoc parsed)
{
    return parsed_assoc_get(parsed._tree, parsed._next);
}
static inline struct parsed_expr parsed_expr_next(struct parsed_expr parsed)
{
    return parsed_expr_get(parsed._tree, parsed._next);
}
static inline struct parsed_identifier parsed_identifier_next(struct parsed_identifier parsed)
{
    return parsed_identifier_get(parsed._tree, parsed._next);
}
static inline struct parsed_number parsed_number_next(struct parsed_number parsed)
{
    return parsed_number_get(parsed._tree, parsed._next);
}
static inline struct parsed_string parsed_string_next(struct parsed_string parsed)
{
    return parsed_string_get(parsed._tree, parsed._next);
}

#endif

#ifdef BLUEBIRD_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct bluebird_tree {
    const char *string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    parsed_id next_id;
    parsed_id root_id;
    struct {
        const char *identifier;
        size_t length;
        struct source_range range;
    } *identifier_tokens;
    size_t number_of_identifier_tokens;
    size_t used_identifier_tokens;
    size_t identifier_tokens_capacity;
    struct {
        double number;
        struct source_range range;
    } *number_tokens;
    size_t number_of_number_tokens;
    size_t used_number_tokens;
    size_t number_tokens_capacity;
    struct {
        const char *string;
        size_t length;
        struct source_range range;
    } *string_tokens;
    size_t number_of_string_tokens;
    size_t used_string_tokens;
    size_t string_tokens_capacity;
};
static void add_identifier_token(struct bluebird_tree *tree, size_t start, size_t end, const char *identifier_param, size_t length_param) {
    size_t index = tree->number_of_identifier_tokens++;
    if (tree->number_of_identifier_tokens > tree->identifier_tokens_capacity) {
        size_t capacity = (tree->identifier_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->identifier_tokens, sizeof(tree->identifier_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->identifier_tokens_capacity = capacity;
        tree->identifier_tokens = tokens;
    }
    tree->identifier_tokens[index].range.start = start;
    tree->identifier_tokens[index].range.end = end;
    tree->identifier_tokens[index].identifier = identifier_param;
    tree->identifier_tokens[index].length = length_param;
}
static void add_number_token(struct bluebird_tree *tree, size_t start, size_t end, double number_param) {
    size_t index = tree->number_of_number_tokens++;
    if (tree->number_of_number_tokens > tree->number_tokens_capacity) {
        size_t capacity = (tree->number_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->number_tokens, sizeof(tree->number_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->number_tokens_capacity = capacity;
        tree->number_tokens = tokens;
    }
    tree->number_tokens[index].range.start = start;
    tree->number_tokens[index].range.end = end;
    tree->number_tokens[index].number = number_param;
}
static void add_string_token(struct bluebird_tree *tree, size_t start, size_t end, const char *string_param, size_t length_param) {
    size_t index = tree->number_of_string_tokens++;
    if (tree->number_of_string_tokens > tree->string_tokens_capacity) {
        size_t capacity = (tree->string_tokens_capacity + 1) * 3 / 2;
        void *tokens = realloc(tree->string_tokens, sizeof(tree->string_tokens[0]) * capacity);
        if (!tokens)
            abort();
        tree->string_tokens_capacity = capacity;
        tree->string_tokens = tokens;
    }
    tree->string_tokens[index].range.start = start;
    tree->string_tokens[index].range.end = end;
    tree->string_tokens[index].string = string_param;
    tree->string_tokens[index].length = length_param;
}
static inline parsed_id read_tree(parsed_id *id, struct bluebird_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    if (*id >= parse_tree_size)
        return 0;
    parsed_id result = parse_tree[*id] & 0x7f;
    (*id)++;
    int shift_amount = 7;
    while (*id < parse_tree_size && (parse_tree[*id] & 0x80) != 0) {
        result |= (parse_tree[*id] & 0x7f) << shift_amount;
        shift_amount += 7;
        (*id)++;
    }
    return result;
}
static bool grow_tree(struct bluebird_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    memset(parse_tree + tree->parse_tree_size, 0, n - tree->parse_tree_size);
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct bluebird_tree *tree, parsed_id value)
{
    // Reserve 10 bytes (the maximum encoded size of a 64-bit value).
    size_t reserved_size = tree->next_id + 10;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        return;
    tree->parse_tree[tree->next_id++] = value & 0x7f;
    value >>= 7;
    while (value > 0) {
        tree->parse_tree[tree->next_id++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
}
struct parsed_grammar parsed_grammar_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_grammar){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_grammar){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .comment_token = read_tree(&id, tree),
        .rule = read_tree(&id, tree),
    };
}
struct parsed_comment_token parsed_comment_token_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_comment_token){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_comment_token){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .string = read_tree(&id, tree),
    };
}
struct parsed_rule parsed_rule_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_rule){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_rule){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .identifier = read_tree(&id, tree),
        .body = read_tree(&id, tree),
    };
}
struct parsed_body parsed_body_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_body){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_body){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .expr = read_tree(&id, tree),
        .identifier = read_tree(&id, tree),
        .operators = read_tree(&id, tree),
    };
}
struct parsed_operators parsed_operators_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_operators){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_operators){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .fixity = read_tree(&id, tree),
        .operator = read_tree(&id, tree),
    };
}
struct parsed_operator parsed_operator_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_operator){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_operator){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .expr = read_tree(&id, tree),
        .identifier = read_tree(&id, tree),
    };
}
struct parsed_fixity parsed_fixity_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_fixity){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_fixity){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&id, tree),
        .assoc = read_tree(&id, tree),
    };
}
struct parsed_assoc parsed_assoc_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_assoc){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_assoc){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&id, tree),
    };
}
struct parsed_expr parsed_expr_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_expr){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t start_location = read_tree(&id, tree);
    size_t end_location = read_tree(&id, tree);
    return (struct parsed_expr){
        ._tree = tree,
        ._next = next,
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&id, tree),
        .identifier = read_tree(&id, tree),
        .rename = read_tree(&id, tree),
        .string = read_tree(&id, tree),
        .expr = read_tree(&id, tree),
        .begin_token = read_tree(&id, tree),
        .end_token = read_tree(&id, tree),
        .operand = read_tree(&id, tree),
    };
}
struct parsed_identifier parsed_identifier_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_identifier){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t token_index = read_tree(&id, tree);
    return (struct parsed_identifier){
        ._tree = tree,
        ._next = next,
        .identifier = tree->identifier_tokens[token_index].identifier,
        .length = tree->identifier_tokens[token_index].length,
        .range = tree->identifier_tokens[token_index].range,
    };
}
struct parsed_number parsed_number_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_number){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t token_index = read_tree(&id, tree);
    return (struct parsed_number){
        ._tree = tree,
        ._next = next,
        .number = tree->number_tokens[token_index].number,
        .range = tree->number_tokens[token_index].range,
    };
}
struct parsed_string parsed_string_get(struct bluebird_tree *tree, parsed_id id) {
    if (id == 0)
        return (struct parsed_string){ ._tree = tree, .empty = true };
    parsed_id next = read_tree(&id, tree);
    size_t token_index = read_tree(&id, tree);
    return (struct parsed_string){
        ._tree = tree,
        ._next = next,
        .string = tree->string_tokens[token_index].string,
        .length = tree->string_tokens[token_index].length,
        .range = tree->string_tokens[token_index].range,
    };
}
static parsed_id finish_node(uint32_t rule, uint32_t choice, parsed_id next_sibling, parsed_id *slots, size_t start_location, size_t end_location, void *info) {
    struct bluebird_tree *tree = info;
    parsed_id id = tree->next_id;
    write_tree(tree, next_sibling);
    write_tree(tree, (parsed_id)start_location);
    write_tree(tree, (parsed_id)end_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 4: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 5: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 6: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 8: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        break;
    }
    default:
        break;
    }
    return id;
}
static parsed_id finish_token(uint32_t rule, parsed_id next_sibling, void *info) {
    struct bluebird_tree *tree = info;
    parsed_id id = tree->next_id;
    write_tree(tree, next_sibling);
    switch (rule) {
    case 9: {
        tree->used_identifier_tokens++;
        if (tree->used_identifier_tokens > tree->number_of_identifier_tokens)
            abort();
        size_t token_index = tree->number_of_identifier_tokens - tree->used_identifier_tokens;
        write_tree(tree, (parsed_id)token_index);
        break;
    }
    case 10: {
        tree->used_number_tokens++;
        if (tree->used_number_tokens > tree->number_of_number_tokens)
            abort();
        size_t token_index = tree->number_of_number_tokens - tree->used_number_tokens;
        write_tree(tree, (parsed_id)token_index);
        break;
    }
    case 11: {
        tree->used_string_tokens++;
        if (tree->used_string_tokens > tree->number_of_string_tokens)
            abort();
        size_t token_index = tree->number_of_string_tokens - tree->used_string_tokens;
        write_tree(tree, (parsed_id)token_index);
        break;
    }
    default:
        break;
    }
    return id;
}
static void parsed_grammar_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_comment_token_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_rule_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_body_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_operators_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_operator_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_fixity_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_assoc_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_expr_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_identifier_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_number_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_string_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent);
static void parsed_grammar_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_grammar it = parsed_grammar_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        it = parsed_grammar_next(it);
    }
}
static void parsed_comment_token_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_comment_token it = parsed_comment_token_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        it = parsed_comment_token_next(it);
    }
}
static void parsed_rule_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_rule it = parsed_rule_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        it = parsed_rule_next(it);
    }
}
static void parsed_body_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_body it = parsed_body_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        it = parsed_body_next(it);
    }
}
static void parsed_operators_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_operators it = parsed_operators_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        it = parsed_operators_next(it);
    }
}
static void parsed_operator_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_operator it = parsed_operator_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        it = parsed_operator_next(it);
    }
}
static void parsed_fixity_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_fixity it = parsed_fixity_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        it = parsed_fixity_next(it);
    }
}
static void parsed_assoc_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_assoc it = parsed_assoc_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        it = parsed_assoc_next(it);
    }
}
static void parsed_expr_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_expr it = parsed_expr_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        it = parsed_expr_next(it);
    }
}
static void parsed_identifier_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_identifier it = parsed_identifier_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        it = parsed_identifier_next(it);
    }
}
static void parsed_number_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_number it = parsed_number_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("number");
        if (strcmp("number", slot_name))
            printf("@%s", slot_name);
        printf(" - %f", it.number);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        it = parsed_number_next(it);
    }
}
static void parsed_string_print(struct bluebird_tree *tree, parsed_id id, const char *slot_name, int indent) {
    struct parsed_string it = parsed_string_get(tree, id);
    while (!it.empty) {
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        it = parsed_string_next(it);
    }
}
void bluebird_tree_print(struct bluebird_tree *tree) {
    parsed_grammar_print(tree, tree->root_id, "grammar", 0);
}
parsed_id bluebird_tree_root_id(struct bluebird_tree *tree) {
    return tree->root_id;
}
#define IGNORE_TOKEN_WRITE(...)
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct bluebird_tree *tree = info;
    add_identifier_token(tree, offset, offset + length, tree->string + offset, length);
}
static void write_number_token(size_t offset, size_t length, double number, void *info) {
    struct bluebird_tree *tree = info;
    add_number_token(tree, offset, offset + length, number);
}
static void write_string_token(size_t offset, size_t length, size_t content_offset, size_t content_length, void *info) {
    struct bluebird_tree *tree = info;
    add_string_token(tree, offset, offset + length, tree->string + offset, length);
}
struct bluebird_token_run {
    struct bluebird_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct bluebird_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool encode_length(struct bluebird_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct bluebird_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct bluebird_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    size_t shift_amount = 0;
    while (*length_offset < sizeof(run->lengths) && shift_amount < sizeof(size_t) * 8) {
        size_t l = run->lengths[(*length_offset)--];
        length += (l & 0x7f) << shift_amount;
        shift_amount += 7;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct bluebird_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool bluebird_default_tokenizer_advance(struct bluebird_default_tokenizer *tokenizer, struct bluebird_token_run **previous_run) {
    struct bluebird_token_run *run = malloc(sizeof(struct bluebird_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        if (char_is_whitespace(c)) {
            whitespace++;
            offset++;
            continue;
        }
        uint32_t token;
        bool is_token = false;
        bool end_token = false;
        bool comment = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 0xffffffff) comment = true;
        }
        double number = 0;
        if (char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1]))) {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                token = 21;
            }
        }
        else if (c == '\'' || c == '"') {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    token = 22;
                    break;
                }
                if (text[string_offset] == '\\') {
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        else if (char_starts_identifier(c)) {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                token = 20;
            }
        }
        if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 0xffffffff) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 20) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 21) {
            write_number_token(offset, token_length, number, tokenizer->info);
        }
        else if (token == 22) {
            write_string_token(offset, token_length, offset + 1, token_length - 2, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            if (number_of_tokens >= 4096) break;
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    parsed_id *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        parsed_id *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(parsed_id));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(parsed_id));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(parsed_id));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        parsed_id operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static parsed_id construct_finish(struct construct_state *s, size_t offset) {
    parsed_id finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            parsed_id *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            parsed_id *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            parsed_id *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity;
            int precedence;
            do {
                int local;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct state_stack {
    uint32_t *states;
    size_t capacity;
    size_t depth;
};
struct fill_run_continuation {
    uint32_t state;
    struct state_stack stack;
};
static void fill_run_states(struct bluebird_token_run *, struct fill_run_continuation *);
static parsed_id build_parse_tree(struct bluebird_default_tokenizer *, struct bluebird_token_run *, struct bluebird_tree *);

struct bluebird_tree *bluebird_tree_create_from_string(const char *string) {
    struct bluebird_tree *tree = calloc(1, sizeof(struct bluebird_tree));
    tree->string = string;
    tree->next_id = 1;
    struct bluebird_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct bluebird_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .state = 0,
    };
    while (bluebird_default_tokenizer_advance(&tokenizer, &token_run))
        fill_run_states(token_run, &c);
    if (string[tokenizer.offset] != '\0') {
        // TODO: Return error instead of printing it
        fprintf(stderr, "error: tokenizing failed. next char was %u\n", string[tokenizer.offset]);
        exit(-1);
    }
    if (c.stack.depth > 0) {
        // TODO: Return error instead of printing it
        fprintf(stderr, "error: parsing failed because the stack was still full\n");
    }
    free(c.stack.states);
    tree->root_id = build_parse_tree(&tokenizer, token_run, tree);
    return tree;
}
void bluebird_tree_destroy(struct bluebird_tree *tree) {
    free(tree->parse_tree);
    free(tree->identifier_tokens);
    free(tree->number_tokens);
    free(tree->string_tokens);
    free(tree);
}
static bool grow_state_stack(struct state_stack *stack) {
    size_t new_capacity = (stack->capacity + 2) * 3 / 2;
    if (new_capacity <= stack->capacity)
        return false;
    uint32_t *new_states = realloc(stack->states, new_capacity * sizeof(uint32_t));
    if (!new_states)
        return false;
    stack->states = new_states;
    stack->capacity = new_capacity;
    return true;
}
static void fill_run_states(struct bluebird_token_run *run, struct fill_run_continuation *cont) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    uint16_t start_state = cont->state;
start:
    switch (start_state) {
    case 0:
state_0: {
        if (token_index >= number_of_tokens) {
            cont->state = 0;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 0;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 20: goto state_2;
        default: break;
        }
        break;
    }
    case 1:
state_1: {
        if (token_index >= number_of_tokens) {
            cont->state = 1;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 1;
        token_index++;
        switch (token) {
        case 22: goto state_94;
        default: break;
        }
        break;
    }
    case 2:
state_2: {
        if (token_index >= number_of_tokens) {
            cont->state = 2;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 2;
        token_index++;
        switch (token) {
        case 1: goto state_3;
        default: break;
        }
        break;
    }
    case 3:
state_3: {
        if (token_index >= number_of_tokens) {
            cont->state = 3;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 3;
        token_index++;
        switch (token) {
        case 20: goto state_4;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 3;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 4:
state_4: {
        if (token_index >= number_of_tokens) {
            cont->state = 4;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 4;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 11: goto state_14;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 4;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 5:
state_5: {
        if (token_index >= number_of_tokens) {
            cont->state = 5;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 5;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 5;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 6:
state_6: {
        if (token_index >= number_of_tokens) {
            cont->state = 6;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 6;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 6;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 7:
state_7: {
        if (token_index >= number_of_tokens) {
            cont->state = 7;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 7;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 7;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 8:
state_8: {
        if (token_index >= number_of_tokens) {
            cont->state = 8;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 8;
        token_index++;
        switch (token) {
        case 20: goto state_16;
        default: break;
        }
        break;
    }
    case 9:
state_9: {
        if (token_index >= number_of_tokens) {
            cont->state = 9;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 9;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 9;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 10:
state_10: {
        if (token_index >= number_of_tokens) {
            cont->state = 10;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 10;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 10;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 11:
state_11: {
        if (token_index >= number_of_tokens) {
            cont->state = 11;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 11;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 11;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 12:
state_12: {
        if (token_index >= number_of_tokens) {
            cont->state = 12;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 12;
        token_index++;
        switch (token) {
        case 20: goto state_4;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 12;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 13:
state_13: {
        if (token_index >= number_of_tokens) {
            cont->state = 13;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 13;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 1: goto state_3;
        case 2: goto state_8;
        case 11: goto state_14;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 13;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 14:
state_14: {
        if (token_index >= number_of_tokens) {
            cont->state = 14;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 14;
        token_index++;
        switch (token) {
        case 20: goto state_15;
        default: break;
        }
        break;
    }
    case 15:
state_15: {
        if (token_index >= number_of_tokens) {
            cont->state = 15;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 15;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 2: goto state_8;
        case 16: goto state_9;
        case 17: goto state_10;
        case 18: goto state_11;
        case 19: goto state_12;
        case 20: goto state_13;
        case 22: goto state_5;
        case 23: goto state_6;
        case 24: goto state_7;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 15;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 16:
state_16: {
        if (token_index >= number_of_tokens) {
            cont->state = 16;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 16;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 3: goto state_17;
        case 20: goto state_18;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 16;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 17:
state_17: {
        if (token_index >= number_of_tokens) {
            cont->state = 17;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 17;
        token_index++;
        switch (token) {
        case 4: goto state_29;
        case 5: goto state_30;
        case 6: goto state_31;
        default: break;
        }
        break;
    }
    case 18:
state_18: {
        if (token_index >= number_of_tokens) {
            cont->state = 18;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 18;
        token_index++;
        switch (token) {
        case 1: goto state_3;
        case 2: goto state_8;
        case 11: goto state_27;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 18;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 19:
state_19: {
        if (token_index >= number_of_tokens) {
            cont->state = 19;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 19;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 19;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 20:
state_20: {
        if (token_index >= number_of_tokens) {
            cont->state = 20;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 20;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 20;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 21:
state_21: {
        if (token_index >= number_of_tokens) {
            cont->state = 21;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 21;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 21;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 22:
state_22: {
        if (token_index >= number_of_tokens) {
            cont->state = 22;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 22;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 22;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 23:
state_23: {
        if (token_index >= number_of_tokens) {
            cont->state = 23;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 23;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 23;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 24:
state_24: {
        if (token_index >= number_of_tokens) {
            cont->state = 24;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 24;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 24;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 25:
state_25: {
        if (token_index >= number_of_tokens) {
            cont->state = 25;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 25;
        token_index++;
        switch (token) {
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 25;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 26:
state_26: {
        if (token_index >= number_of_tokens) {
            cont->state = 26;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 26;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 11: goto state_27;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 26;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 27:
state_27: {
        if (token_index >= number_of_tokens) {
            cont->state = 27;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 27;
        token_index++;
        switch (token) {
        case 20: goto state_28;
        default: break;
        }
        break;
    }
    case 28:
state_28: {
        if (token_index >= number_of_tokens) {
            cont->state = 28;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 28;
        token_index++;
        switch (token) {
        case 2: goto state_8;
        case 16: goto state_22;
        case 17: goto state_23;
        case 18: goto state_24;
        case 19: goto state_25;
        case 20: goto state_26;
        case 22: goto state_19;
        case 23: goto state_20;
        case 24: goto state_21;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 28;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 29:
state_29: {
        if (token_index >= number_of_tokens) {
            cont->state = 29;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 29;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 29;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 30:
state_30: {
        if (token_index >= number_of_tokens) {
            cont->state = 30;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 30;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 30;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 31:
state_31: {
        if (token_index >= number_of_tokens) {
            cont->state = 31;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 31;
        token_index++;
        switch (token) {
        case 7: goto state_32;
        case 8: goto state_33;
        case 9: goto state_34;
        case 10: goto state_35;
        default: break;
        }
        break;
    }
    case 32:
state_32: {
        if (token_index >= number_of_tokens) {
            cont->state = 32;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 32;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 32;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 33:
state_33: {
        if (token_index >= number_of_tokens) {
            cont->state = 33;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 33;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 33;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 34:
state_34: {
        if (token_index >= number_of_tokens) {
            cont->state = 34;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 34;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 34;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 35:
state_35: {
        if (token_index >= number_of_tokens) {
            cont->state = 35;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 35;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 35;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 36:
state_36: {
        if (token_index >= number_of_tokens) {
            cont->state = 36;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 36;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 11: goto state_92;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 36;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 37:
state_37: {
        if (token_index >= number_of_tokens) {
            cont->state = 37;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 37;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 37;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 38:
state_38: {
        if (token_index >= number_of_tokens) {
            cont->state = 38;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 38;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 38;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 39:
state_39: {
        if (token_index >= number_of_tokens) {
            cont->state = 39;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 39;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 39;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 40:
state_40: {
        if (token_index >= number_of_tokens) {
            cont->state = 40;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 40;
        token_index++;
        switch (token) {
        case 20: goto state_45;
        default: break;
        }
        break;
    }
    case 41:
state_41: {
        if (token_index >= number_of_tokens) {
            cont->state = 41;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 41;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 41;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 42:
state_42: {
        if (token_index >= number_of_tokens) {
            cont->state = 42;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 42;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 42;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 43:
state_43: {
        if (token_index >= number_of_tokens) {
            cont->state = 43;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 43;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 43;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 44:
state_44: {
        if (token_index >= number_of_tokens) {
            cont->state = 44;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 44;
        token_index++;
        switch (token) {
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 44;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 45:
state_45: {
        if (token_index >= number_of_tokens) {
            cont->state = 45;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 45;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 3: goto state_46;
        case 20: goto state_47;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 45;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 46:
state_46: {
        if (token_index >= number_of_tokens) {
            cont->state = 46;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 46;
        token_index++;
        switch (token) {
        case 4: goto state_60;
        case 5: goto state_61;
        case 6: goto state_62;
        default: break;
        }
        break;
    }
    case 47:
state_47: {
        if (token_index >= number_of_tokens) {
            cont->state = 47;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 47;
        token_index++;
        switch (token) {
        case 1: goto state_3;
        case 2: goto state_51;
        case 11: goto state_57;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 47;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 48:
state_48: {
        if (token_index >= number_of_tokens) {
            cont->state = 48;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 48;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 48;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 49:
state_49: {
        if (token_index >= number_of_tokens) {
            cont->state = 49;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 49;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 49;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 50:
state_50: {
        if (token_index >= number_of_tokens) {
            cont->state = 50;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 50;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 50;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 51:
state_51: {
        if (token_index >= number_of_tokens) {
            cont->state = 51;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 51;
        token_index++;
        switch (token) {
        case 20: goto state_59;
        default: break;
        }
        break;
    }
    case 52:
state_52: {
        if (token_index >= number_of_tokens) {
            cont->state = 52;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 52;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 52;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 53:
state_53: {
        if (token_index >= number_of_tokens) {
            cont->state = 53;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 53;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 53;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 54:
state_54: {
        if (token_index >= number_of_tokens) {
            cont->state = 54;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 54;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 54;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 55:
state_55: {
        if (token_index >= number_of_tokens) {
            cont->state = 55;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 55;
        token_index++;
        switch (token) {
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 55;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 56:
state_56: {
        if (token_index >= number_of_tokens) {
            cont->state = 56;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 56;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 11: goto state_57;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 56;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 57:
state_57: {
        if (token_index >= number_of_tokens) {
            cont->state = 57;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 57;
        token_index++;
        switch (token) {
        case 20: goto state_58;
        default: break;
        }
        break;
    }
    case 58:
state_58: {
        if (token_index >= number_of_tokens) {
            cont->state = 58;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 58;
        token_index++;
        switch (token) {
        case 2: goto state_51;
        case 16: goto state_52;
        case 17: goto state_53;
        case 18: goto state_54;
        case 19: goto state_55;
        case 20: goto state_56;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 58;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 59:
state_59: {
        if (token_index >= number_of_tokens) {
            cont->state = 59;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 59;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 3: goto state_46;
        case 20: goto state_47;
        case 22: goto state_48;
        case 23: goto state_49;
        case 24: goto state_50;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 59;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 60:
state_60: {
        if (token_index >= number_of_tokens) {
            cont->state = 60;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 60;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 60;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 61:
state_61: {
        if (token_index >= number_of_tokens) {
            cont->state = 61;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 61;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 61;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 62:
state_62: {
        if (token_index >= number_of_tokens) {
            cont->state = 62;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 62;
        token_index++;
        switch (token) {
        case 7: goto state_63;
        case 8: goto state_64;
        case 9: goto state_65;
        case 10: goto state_66;
        default: break;
        }
        break;
    }
    case 63:
state_63: {
        if (token_index >= number_of_tokens) {
            cont->state = 63;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 63;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 63;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 64:
state_64: {
        if (token_index >= number_of_tokens) {
            cont->state = 64;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 64;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 64;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 65:
state_65: {
        if (token_index >= number_of_tokens) {
            cont->state = 65;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 65;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 65;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 66:
state_66: {
        if (token_index >= number_of_tokens) {
            cont->state = 66;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 66;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 66;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 67:
state_67: {
        if (token_index >= number_of_tokens) {
            cont->state = 67;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 67;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 11: goto state_90;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 67;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 68:
state_68: {
        if (token_index >= number_of_tokens) {
            cont->state = 68;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 68;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 68;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 69:
state_69: {
        if (token_index >= number_of_tokens) {
            cont->state = 69;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 69;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 69;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 70:
state_70: {
        if (token_index >= number_of_tokens) {
            cont->state = 70;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 70;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 70;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 71:
state_71: {
        if (token_index >= number_of_tokens) {
            cont->state = 71;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 71;
        token_index++;
        switch (token) {
        case 20: goto state_76;
        default: break;
        }
        break;
    }
    case 72:
state_72: {
        if (token_index >= number_of_tokens) {
            cont->state = 72;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 72;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 72;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 73:
state_73: {
        if (token_index >= number_of_tokens) {
            cont->state = 73;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 73;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 73;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 74:
state_74: {
        if (token_index >= number_of_tokens) {
            cont->state = 74;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 74;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 74;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 75:
state_75: {
        if (token_index >= number_of_tokens) {
            cont->state = 75;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 75;
        token_index++;
        switch (token) {
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 75;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 76:
state_76: {
        if (token_index >= number_of_tokens) {
            cont->state = 76;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 76;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 3: goto state_46;
        case 20: goto state_77;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 76;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 77:
state_77: {
        if (token_index >= number_of_tokens) {
            cont->state = 77;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 77;
        token_index++;
        switch (token) {
        case 1: goto state_3;
        case 2: goto state_81;
        case 11: goto state_87;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 77;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 78:
state_78: {
        if (token_index >= number_of_tokens) {
            cont->state = 78;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 78;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 78;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 79:
state_79: {
        if (token_index >= number_of_tokens) {
            cont->state = 79;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 79;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 79;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 80:
state_80: {
        if (token_index >= number_of_tokens) {
            cont->state = 80;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 80;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 80;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 81:
state_81: {
        if (token_index >= number_of_tokens) {
            cont->state = 81;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 81;
        token_index++;
        switch (token) {
        case 20: goto state_89;
        default: break;
        }
        break;
    }
    case 82:
state_82: {
        if (token_index >= number_of_tokens) {
            cont->state = 82;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 82;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 82;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 83:
state_83: {
        if (token_index >= number_of_tokens) {
            cont->state = 83;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 83;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 83;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 84:
state_84: {
        if (token_index >= number_of_tokens) {
            cont->state = 84;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 84;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 84;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 85:
state_85: {
        if (token_index >= number_of_tokens) {
            cont->state = 85;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 85;
        token_index++;
        switch (token) {
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 85;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 86:
state_86: {
        if (token_index >= number_of_tokens) {
            cont->state = 86;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 86;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 11: goto state_87;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 86;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 87:
state_87: {
        if (token_index >= number_of_tokens) {
            cont->state = 87;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 87;
        token_index++;
        switch (token) {
        case 20: goto state_88;
        default: break;
        }
        break;
    }
    case 88:
state_88: {
        if (token_index >= number_of_tokens) {
            cont->state = 88;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 88;
        token_index++;
        switch (token) {
        case 2: goto state_81;
        case 16: goto state_82;
        case 17: goto state_83;
        case 18: goto state_84;
        case 19: goto state_85;
        case 20: goto state_86;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 88;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 89:
state_89: {
        if (token_index >= number_of_tokens) {
            cont->state = 89;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 89;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 3: goto state_46;
        case 20: goto state_77;
        case 22: goto state_78;
        case 23: goto state_79;
        case 24: goto state_80;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 89;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 90:
state_90: {
        if (token_index >= number_of_tokens) {
            cont->state = 90;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 90;
        token_index++;
        switch (token) {
        case 20: goto state_91;
        default: break;
        }
        break;
    }
    case 91:
state_91: {
        if (token_index >= number_of_tokens) {
            cont->state = 91;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 91;
        token_index++;
        switch (token) {
        case 2: goto state_71;
        case 16: goto state_72;
        case 17: goto state_73;
        case 18: goto state_74;
        case 19: goto state_75;
        case 20: goto state_67;
        case 22: goto state_68;
        case 23: goto state_69;
        case 24: goto state_70;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 91;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 92:
state_92: {
        if (token_index >= number_of_tokens) {
            cont->state = 92;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 92;
        token_index++;
        switch (token) {
        case 20: goto state_93;
        default: break;
        }
        break;
    }
    case 93:
state_93: {
        if (token_index >= number_of_tokens) {
            cont->state = 93;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 93;
        token_index++;
        switch (token) {
        case 2: goto state_40;
        case 16: goto state_41;
        case 17: goto state_42;
        case 18: goto state_43;
        case 19: goto state_44;
        case 20: goto state_36;
        case 22: goto state_37;
        case 23: goto state_38;
        case 24: goto state_39;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 93;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 94:
state_94: {
        if (token_index >= number_of_tokens) {
            cont->state = 94;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 94;
        token_index++;
        switch (token) {
        case 0: goto state_1;
        case 20: goto state_2;
        default: break;
        }
        break;
    }
    case 95:
state_95: {
        if (token_index >= number_of_tokens) {
            cont->state = 95;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 95;
        token_index++;
        switch (token) {
        case 12: goto state_96;
        case 14: goto state_97;
        default: break;
        }
        break;
    }
    case 96:
state_96: {
        if (token_index >= number_of_tokens) {
            cont->state = 96;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 96;
        token_index++;
        switch (token) {
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 96;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 97:
state_97: {
        if (token_index >= number_of_tokens) {
            cont->state = 97;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 97;
        token_index++;
        switch (token) {
        case 22: goto state_98;
        default: break;
        }
        break;
    }
    case 98:
state_98: {
        if (token_index >= number_of_tokens) {
            cont->state = 98;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 98;
        token_index++;
        switch (token) {
        case 20: goto state_99;
        case 22: goto state_100;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 98;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 99:
state_99: {
        if (token_index >= number_of_tokens) {
            cont->state = 99;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 99;
        token_index++;
        switch (token) {
        case 11: goto state_110;
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 99;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 100:
state_100: {
        if (token_index >= number_of_tokens) {
            cont->state = 100;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 100;
        token_index++;
        switch (token) {
        case 15: goto state_108;
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 100;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 101:
state_101: {
        if (token_index >= number_of_tokens) {
            cont->state = 101;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 101;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 101;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 102:
state_102: {
        if (token_index >= number_of_tokens) {
            cont->state = 102;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 102;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 102;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 103:
state_103: {
        if (token_index >= number_of_tokens) {
            cont->state = 103;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 103;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 103;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 104:
state_104: {
        if (token_index >= number_of_tokens) {
            cont->state = 104;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 104;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 104;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 105:
state_105: {
        if (token_index >= number_of_tokens) {
            cont->state = 105;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 105;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 105;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 106:
state_106: {
        if (token_index >= number_of_tokens) {
            cont->state = 106;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 106;
        token_index++;
        switch (token) {
        case 20: goto state_99;
        case 22: goto state_109;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 106;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 107:
state_107: {
        if (token_index >= number_of_tokens) {
            cont->state = 107;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 107;
        token_index++;
        switch (token) {
        case 15: goto state_108;
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 107;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 108:
state_108: {
        if (cont->stack.depth == 0)
            break;
        start_state = cont->stack.states[--cont->stack.depth];
        run->tokens[token_index] = 24;
        goto start;
    }
    case 109:
state_109: {
        if (token_index >= number_of_tokens) {
            cont->state = 109;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 109;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 109;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 110:
state_110: {
        if (token_index >= number_of_tokens) {
            cont->state = 110;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 110;
        token_index++;
        switch (token) {
        case 20: goto state_111;
        default: break;
        }
        break;
    }
    case 111:
state_111: {
        if (token_index >= number_of_tokens) {
            cont->state = 111;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 111;
        token_index++;
        switch (token) {
        case 16: goto state_103;
        case 17: goto state_104;
        case 18: goto state_105;
        case 19: goto state_106;
        case 20: goto state_99;
        case 22: goto state_107;
        case 23: goto state_101;
        case 24: goto state_102;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 111;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 112:
state_112: {
        if (token_index >= number_of_tokens) {
            cont->state = 112;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 112;
        token_index++;
        switch (token) {
        case 11: goto state_121;
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 112;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 113:
state_113: {
        if (token_index >= number_of_tokens) {
            cont->state = 113;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 113;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 113;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 114:
state_114: {
        if (token_index >= number_of_tokens) {
            cont->state = 114;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 114;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 114;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 115:
state_115: {
        if (token_index >= number_of_tokens) {
            cont->state = 115;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 115;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 115;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 116:
state_116: {
        if (cont->stack.depth == 0)
            break;
        start_state = cont->stack.states[--cont->stack.depth];
        run->tokens[token_index] = 23;
        goto start;
    }
    case 117:
state_117: {
        if (token_index >= number_of_tokens) {
            cont->state = 117;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 117;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 117;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 118:
state_118: {
        if (token_index >= number_of_tokens) {
            cont->state = 118;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 118;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 118;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 119:
state_119: {
        if (token_index >= number_of_tokens) {
            cont->state = 119;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 119;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 119;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 120:
state_120: {
        if (token_index >= number_of_tokens) {
            cont->state = 120;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 120;
        token_index++;
        switch (token) {
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 120;
            token_index--;
            goto state_95;
        }
        break;
    }
    case 121:
state_121: {
        if (token_index >= number_of_tokens) {
            cont->state = 121;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 121;
        token_index++;
        switch (token) {
        case 20: goto state_122;
        default: break;
        }
        break;
    }
    case 122:
state_122: {
        if (token_index >= number_of_tokens) {
            cont->state = 122;
            return;
        }
        uint32_t token = run->tokens[token_index];
        run->states[token_index] = 122;
        token_index++;
        switch (token) {
        case 13: goto state_116;
        case 16: goto state_117;
        case 17: goto state_118;
        case 18: goto state_119;
        case 19: goto state_120;
        case 20: goto state_112;
        case 22: goto state_113;
        case 23: goto state_114;
        case 24: goto state_115;
        default:
            if (cont->stack.depth >= cont->stack.capacity) {
                if (!grow_state_stack(&cont->stack))
                    break;
            }
            cont->stack.states[cont->stack.depth++] = 122;
            token_index--;
            goto state_95;
        }
        break;
    }
    }
}
static const uint16_t actions[] = {
0,0,4096,0,4096,32768,16384,0,4096,32769,32769,16385,0,4096,32769,32769,32770,32769,16385,0,4096,32769,32769,36864,40960,16384,0,4096,32769,32769,
36864,40960,16385,0,4096,32769,32769,36864,40961,16386,0,4096,32769,32769,36864,40962,0,4096,32769,32769,36864,40963,0,4096,32769,32769,36864,45060,0,4096,
32769,32769,36864,45061,0,4096,32769,32769,36864,45062,0,4097,0,4097,32768,16384,0,4097,32769,32769,16385,0,4097,32769,32769,32770,32769,16385,0,4097,
32769,32769,36864,40960,16384,0,4097,32769,32769,36864,40960,16385,0,4097,32769,32769,36864,40961,16386,0,4097,32769,32769,36864,40962,0,4097,32769,32769,36864,
40963,0,4097,32769,32769,36864,45060,0,4097,32769,32769,36864,45061,0,4097,32769,32769,36864,45062,0,4098,16385,0,4098,32770,32769,16385,0,16384,0,
16388,0,16389,0,20480,8192,4097,0,20480,8192,4097,32768,12288,0,20480,8192,4097,32768,12289,0,20480,8192,4097,32768,12290,32768,12288,0,20480,8192,
4097,32768,12290,32768,12289,0,20480,8192,4097,32768,12290,32768,12290,0,20480,8192,4097,32768,12290,32768,12291,0,20480,8192,4097,32769,16385,0,20480,8192,
16385,0,20480,8195,0,20480,8195,16388,0,20480,45063,24583,40960,16384,0,20480,45063,24583,40960,16385,0,20480,45063,24583,40961,16386,0,20480,45063,24583,
40962,0,20480,45063,24583,40963,0,20480,45063,24583,45060,0,20480,45063,24583,45061,0,20480,45063,24583,45062,0,20480,45064,0,20481,8192,4097,0,20481,
8192,4097,32768,12288,0,20481,8192,4097,32768,12289,0,20481,8192,4097,32768,12290,32768,12288,0,20481,8192,4097,32768,12290,32768,12289,0,20481,8192,4097,
32768,12290,32768,12290,0,20481,8192,4097,32768,12290,32768,12291,0,20481,8192,4097,32769,16385,0,20481,8192,16385,0,20481,8195,0,20481,8195,16388,0,
20481,45063,24583,40960,16384,0,20481,45063,24583,40960,16385,0,20481,45063,24583,40961,16386,0,20481,45063,24583,40962,0,20481,45063,24583,40963,0,20481,45063,
24583,45060,0,20481,45063,24583,45061,0,20481,45063,24583,45062,0,20481,45064,0,20482,8192,4097,0,20482,8192,4097,32768,12288,0,20482,8192,4097,32768,
12289,0,20482,8192,4097,32768,12290,32768,12288,0,20482,8192,4097,32768,12290,32768,12289,0,20482,8192,4097,32768,12290,32768,12290,0,20482,8192,4097,32768,
12290,32768,12291,0,20482,8192,4097,32769,16385,0,20482,8192,16385,0,20482,8195,0,20482,8195,16388,0,20482,45063,24583,40960,16384,0,20482,45063,24583,
40960,16385,0,20482,45063,24583,40961,16386,0,20482,45063,24583,40962,0,20482,45063,24583,40963,0,20482,45063,24583,45060,0,20482,45063,24583,45061,0,20482,
45063,24583,45062,0,20482,45064,0,20483,8192,4097,0,20483,8192,4097,32768,12288,0,20483,8192,4097,32768,12289,0,20483,8192,4097,32768,12290,32768,12288,
0,20483,8192,4097,32768,12290,32768,12289,0,20483,8192,4097,32768,12290,32768,12290,0,20483,8192,4097,32768,12290,32768,12291,0,20483,8192,4097,32769,16385,
0,20483,8192,16385,0,20483,8195,0,20483,8195,16388,0,20483,45063,24583,40960,16384,0,20483,45063,24583,40960,16385,0,20483,45063,24583,40961,16386,0,
20483,45063,24583,40962,0,20483,45063,24583,40963,0,20483,45063,24583,45060,0,20483,45063,24583,45061,0,20483,45063,24583,45062,0,20483,45064,0,24580,40960,
16384,0,24580,40960,16385,0,24580,40961,16386,0,24580,40962,0,24580,40963,0,24580,45060,0,24580,45061,0,24580,45062,0,24581,40960,16384,0,24581,
40960,16385,0,24581,40961,16386,0,24581,40962,0,24581,40963,0,24581,45060,0,24581,45061,0,24581,45062,0,24582,40960,16384,0,24582,40960,16385,0,
24582,40961,16386,0,24582,40962,0,24582,40963,0,24582,45060,0,24582,45061,0,24582,45062,0,24584,40960,16384,0,24584,40960,16385,0,24584,40961,16386,
0,24584,40962,0,24584,40963,0,24584,45060,0,24584,45061,0,24584,45062,0,32768,16384,0,32769,32769,16385,0,32769,32769,32770,32769,16385,0,32769,
32769,36864,40960,16384,0,32769,32769,36864,40960,16385,0,32769,32769,36864,40961,16386,0,32769,32769,36864,40962,0,32769,32769,36864,40963,0,32769,32769,36864,
45060,0,32769,32769,36864,45061,0,32769,32769,36864,45062,0,36864,40960,16384,0,36864,40960,16385,0,36864,40961,16386,0,36864,40962,0,36864,40963,0,
36864,45060,0,36864,45061,0,36864,45062,0,36867,40960,16384,0,36867,40960,16385,0,36867,40961,16386,0,36867,40962,0,36867,40963,0,36867,45060,0,
36867,45061,0,36867,45062,0,};
struct action_table_entry {
    uint32_t target_nfa_state;
    uint32_t dfa_state;
    uint32_t dfa_symbol;
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static const struct action_table_entry action_table[8192][2] = {
{{409,104,20,406,330},},{{444,76,24,13059,464,4745},},{{8332,49,22,1417,606},},{{10942,26,22,7927,660},},{0},{{8238,6,20,7893,89},},{{9451,88,24,13059,667,4745},
{7918,69,20,303,762},},{{7924,23,17,10915,474},{303,91,22,299,231},},{{7915,74,20,303,625},},{{10286,118,16,11931,469},{275,35,20,275,219},},
{{7908,33,22,403,687},{1417,45,23,13041,348,969},},{{7896,14,20,13061,558},{275,93,16,7900,247},},{{8890,79,24,13059,613,4745},{7893,6,18,10370,257},},
{0},{{7951,104,20,406,789},},{{12952,122,20,9967,652},},{0},{0},{{8597,47,17,8419,783},{405,104,18,7935,590},},{0},{0},{{409,109,20,406,330},},{{444,83,24,13059,464,4745},},
{0},{{7902,37,18,7907,649},},{{8314,102,20,406,679},},{0},{{9451,78,23,13041,664,444},},{0},{0},{{1436,54,17,8419,252},},{{7908,36,22,403,687},},{{10895,24,18,10942,622},},
{{7896,13,1,12980,487},},{{10391,19,23,13041,691,7924},},{{7935,105,16,8142,670},},{0},{0},{{10591,4,16,10591,616},},{{405,101,18,7935,590},},{0},{0},{{8521,56,22,1417,687},},
{0},{0},{0},{{299,72,16,7914,358},},{{444,86,20,485,441},},{0},{0},{{10758,9,20,7893,762},},{0},{{7918,91,24,13059,777,280},},{{10895,21,18,10942,622},},{0},{0},{0},{0},{{8890,85,20,485,598},},
{{339,38,23,13041,459,339},},{{7894,13,22,7894,342},{415,100,18,7935,479},},{{7900,43,23,13041,610,339},{447,84,23,13041,348,444},},{0},{{406,100,20,406,219},},
{{7910,36,23,13041,774,339},},{{7907,39,16,7900,670},},{0},{{7895,7,22,7894,453},{288,72,18,7899,479},},{{8173,15,23,13041,737,7895},},{{4745,77,20,485,552},},
{0},{{10758,12,20,7893,762},},{{7899,68,18,7899,676},{485,88,16,8890,247},},{0},{{280,70,17,7915,585},},{{8193,103,16,8142,643},{1436,56,22,1417,231},},
{{8419,49,23,13041,637,969},{1417,52,20,1436,330},},{{303,65,22,299,231},},{{10927,28,16,10895,780},{7896,7,24,13059,575,7896},},{{275,42,23,13041,237,339},},
{{969,52,24,13059,464,700},},{{12952,115,23,13041,664,10286},},{0},{{9861,95,12,13065,545},},{{7951,99,17,8193,810},},{0},{0},{{406,103,19,8314,262},},{0},{0},{{4745,82,20,485,552},},
{0},{{8173,12,24,13059,742,7896},},{0},{0},{{280,69,23,13041,570,288},},{{8238,15,24,13059,116,7896},},{{9451,84,23,13041,664,444},},{{7924,28,23,13041,459,7924},},{{303,66,23,13041,237,288},},
{0},{0},{0},{0},{{9795,82,20,485,762},},{0},{{13012,43,20,275,148},},{0},{0},{{7910,42,16,7900,780},{405,111,18,7935,590},},{0},{0},{{409,100,24,13059,353,405},},{{8173,9,24,13059,742,7896},},
{{10370,9,24,13059,667,7896},},{0},{0},{{331,29,22,403,564},},{{11031,114,22,10275,633},},{{10974,117,17,11031,700},},{0},{{8044,9,17,10381,752},},{0},{{10927,26,23,13041,774,7924},},
{0},{{9795,87,20,13062,766},},{0},{{10591,15,18,10370,622},},{0},{{9861,115,18,12952,590},{339,93,18,7907,479},},{0},{{10915,21,16,10895,643},},{{8310,5,22,7894,34},},
{{8521,55,22,1417,687},},{0},{{10370,4,24,13059,667,7896},{4745,84,19,9543,595},},{{7914,91,24,13059,613,280},{409,105,17,8193,363},},{{7902,93,23,13041,637,339},},
{{444,79,24,13059,464,4745},},{0},{0},{0},{{7915,75,23,13041,637,288},{7915,60,20,303,625},},{{9451,89,24,13059,667,4745},{8193,105,18,7935,649},},{{10895,28,22,7927,606},},
{{10286,117,23,13041,459,10286},},{{8419,56,20,1436,625},},{{10391,23,22,7927,687},},{{8918,79,20,485,625},{700,55,22,1417,564},},{{8890,78,24,13059,613,4745},
{415,111,16,8142,469},},{0},{{7894,6,22,7894,342},},{{10915,22,16,10895,643},},{{7900,32,20,275,598},},{0},{0},{0},{{7914,70,24,13059,613,280},},{{7895,11,19,10770,484},
{288,63,24,13059,464,280},},{{8173,51,20,13036,713},{444,82,24,13059,464,4745},},{{10370,7,20,7893,652},},{0},{{331,41,17,7902,585},},{0},{0},{0},{{1436,49,18,8509,257},},
{{7908,39,17,7902,700},},{0},{{8918,82,20,485,625},{700,58,22,1417,564},},{0},{{13053,71,20,13052,143},},{{7894,9,18,10370,368},},{{13056,59,3,13053,2},
{12978,28,2,10927,0},},{{7900,39,20,275,598},{447,88,20,485,330},},{0},{0},{0},{0},{{8509,59,24,13059,667,700},},{0},{{10275,115,16,11931,358},},{0},{0},{{7899,64,22,299,660},},
{{8332,58,22,1417,606},},{0},{{1436,52,18,8509,257},},{0},{{10895,26,17,10915,619},},{{9543,84,16,8890,697},},{{10286,120,24,13059,464,9861},{7896,11,17,10381,585},},
{{7908,29,24,13059,694,331},},{0},{{8890,84,17,8918,619},},{{9795,77,24,13059,777,4745},},{{12308,117,20,9967,789},},{0},{0},{{9967,113,20,9967,219},{406,99,23,13041,237,415},},
{{7910,35,20,275,762},{405,99,23,13041,570,415},},{0},{{403,36,16,7900,358},},{0},{{7927,24,22,7927,342},{444,84,17,8918,474},},{{4745,78,19,9543,595},},
{0},{0},{{7917,69,17,7915,700},{331,93,23,13041,570,339},},{{11031,117,22,10275,633},},{{280,73,18,7899,590},},{{7924,24,22,7927,453},{303,70,19,7917,262},},
{0},{{13021,89,20,485,148},},{0},{{7896,6,24,13059,575,7896},{275,43,18,7907,257},},{0},{0},{{10591,3,23,13041,610,7895},{9861,122,16,11931,580},},{{10381,11,16,10591,643},},
{0},{{7910,38,20,275,762},},{{8597,52,18,8509,786},},{{403,41,16,7900,358},},{0},{{7929,21,16,10895,247},},{{4745,83,17,8918,585},},{{8142,102,18,7935,622},},
{{7902,29,22,403,633},},{{8173,13,24,13059,742,7896},},{{10942,21,20,7929,652},},{{280,68,18,7899,590},},{{331,32,22,403,564},},{0},{{8193,101,23,13041,637,415},},
{{9543,82,23,13041,691,444},{9543,79,22,447,687},},{{7896,5,24,13059,575,7896},{275,44,22,403,231},},{{7908,92,20,13064,683},{1417,58,23,13041,348,969},},
{{9795,83,23,13041,774,444},},{0},{{12952,113,16,11931,670},},{0},{0},{{8597,49,18,8509,786},},{{447,83,17,8918,363},},{0},{{7929,26,16,10895,247},},{{10770,10,22,7894,687},},
{0},{0},{{8173,10,24,13059,742,7896},},{{299,62,7,13072,281},},{{8314,105,22,409,687},},{{331,37,22,403,564},},{0},{0},{{9451,86,16,8890,670},},{{8044,8,20,12978,709},},
{{7908,44,23,13041,691,339},},{{12987,45,0,8310,0},},{{7935,98,20,406,652},},{0},{0},{0},{0},{0},{0},{0},{{10770,5,18,10370,703},},{0},{0},{{8509,50,17,8419,673},},{{10370,11,24,13059,667,7896},},
{{299,69,18,7899,368},},{{7927,22,22,7927,342},},{{331,38,23,13041,570,339},},{{485,80,20,485,219},},{{280,63,23,13041,570,288},},{{8044,15,20,7893,719},
{7915,72,24,13059,640,280},},{0},{0},{0},{0},{0},{{10927,20,18,10942,786},},{{8890,88,22,447,606},{8890,77,23,13041,610,444},},{0},{{12308,114,16,11931,807},{10381,5,18,10370,649},},
{{10591,9,23,13041,610,7895},},{0},{{8521,53,23,13041,691,969},},{{406,111,23,13041,237,415},},{0},{{7929,28,17,10915,252},},{0},{{8173,7,16,10591,747},{7927,19,22,7927,342},},
{{10370,6,17,10381,673},{444,77,24,13059,464,4745},},{{8332,54,18,8509,622},{485,77,20,485,219},},{{7902,35,22,403,633},},{{10758,4,24,13059,777,7896},},
{0},{0},{{7924,20,19,10391,484},{303,73,17,7915,252},},{0},{{10286,119,16,11931,469},},{0},{{275,34,22,403,231},},{0},{0},{0},{0},{{7951,107,22,409,797},},{0},{{405,103,22,409,564},},
{{403,32,20,275,330},},{0},{{288,61,24,13059,464,280},},{{444,80,24,13059,464,4745},},{0},{{7902,38,22,403,633},},{0},{0},{0},{{10974,122,22,10275,687},},{0},{0},{{303,74,22,299,231},},
{{12987,9,0,8310,0},{275,39,22,403,231},},{0},{{969,49,20,1436,441},},{{7935,104,16,8142,670},},{0},{{7951,100,18,7935,813},},{{10591,7,16,10591,616},},
{{7910,34,23,13041,774,339},{405,100,18,7935,590},},{0},{{7907,37,23,13041,664,339},},{0},{{8310,13,16,10591,53},},{0},{0},{0},{{8332,56,23,13041,610,969},{8332,47,20,1436,598},},
{{8314,98,22,409,687},},{0},{{8238,10,20,7893,89},{331,44,23,13041,570,339},},{{1436,58,17,8419,252},},{0},{0},{{10286,122,24,13059,464,9861},},{{10895,20,24,13059,613,7919},
{1417,54,20,1436,330},},{{7935,101,16,8142,670},},{{7896,9,24,13059,575,7896},},{{9795,79,24,13059,777,4745},},{0},{0},{0},{0},{{8597,53,23,13041,774,969},},{{403,38,19,7908,373},},
{{8521,47,23,13041,691,969},{7907,38,16,7900,670},},{0},{{288,73,18,7899,479},},{0},{{8314,109,18,7935,703},},{{299,91,24,13059,353,280},},{{8238,13,20,7893,89},},
{0},{{11031,119,17,11031,646},{9451,82,20,485,652},},{{8044,4,16,10591,747},{7915,68,23,13041,637,288},},{{8193,102,16,8142,643},},{{8419,48,17,8419,646},
{1417,59,20,1436,330},},{0},{{7896,4,24,13059,575,7896},},{{10391,24,20,7929,679},{9795,80,24,13059,777,4745},},{{700,47,17,8419,585},},{0},{0},{{10381,9,23,13041,637,7895},
{339,31,7,13074,392},},{0},{{447,80,22,447,342},},{{7907,93,22,403,660},{7907,43,16,7900,670},},{0},{0},{{7929,8,20,12978,208},},{0},{0},{0},{{485,84,16,8890,247},},
{{10942,23,17,10915,673},{7902,44,22,403,633},},{0},{0},{{280,66,23,13041,570,288},},{0},{0},{{8419,53,24,13059,640,700},},{{700,50,23,13041,570,969},},{0},{0},{{9795,85,20,485,762},
{969,56,23,13041,459,969},},{0},{{447,77,22,447,342},},{0},{{8521,49,22,1417,687},{406,107,19,8314,262},},{{7910,43,16,7900,780},},{0},{0},{0},{0},{{4745,86,23,13041,570,444},},
{0},{0},{{8332,50,23,13041,610,969},},{0},{{280,65,22,299,564},},{{7915,73,24,13059,640,280},},{0},{{7924,16,20,7929,441},},{0},{{10286,115,19,10974,484},{10286,96,20,9967,441},},
{0},{0},{{7919,20,16,10895,580},{7893,9,19,10770,262},},{0},{{10591,14,20,13061,602},{9861,114,18,12952,590},},{{405,107,18,7935,590},},{{10915,20,16,10895,643},},
{0},{{8509,48,20,1436,652},},{{8310,6,20,7893,20},},{0},{{409,104,23,13041,348,415},},{0},{{8332,49,17,8419,619},},{0},{{331,17,4,13075,491},},{{10758,3,24,13059,777,7896},
{8238,6,17,10381,128},},{{8044,13,17,10381,752},},{{7924,23,20,7929,441},{303,91,19,7917,262},},{{7915,74,23,13041,637,288},{7915,63,22,299,633},},
{{12992,69,20,303,148},},{0},{0},{{7893,6,17,10381,252},},{{10391,22,16,10895,697},},{{10591,11,20,7893,598},},{{12952,122,17,11031,673},},{0},{{10381,3,23,13041,637,7895},},
{{8597,47,22,1417,770},},{{8310,9,20,7893,20},},{0},{{409,109,17,8193,363},},{{7895,10,17,10381,474},{288,60,24,13059,464,280},},{0},{{7902,37,17,7902,646},},
{0},{{10758,6,24,13059,777,7896},},{0},{0},{0},{{8193,109,20,406,625},},{{1417,50,16,8332,358},},{{10895,24,17,10915,619},},{0},{{10391,19,16,10895,697},},{{8918,83,22,447,633},
{700,59,20,1436,552},},{0},{0},{{12308,96,24,13059,804,9861},{7900,93,17,7902,619},},{{7910,33,24,13059,777,331},{405,101,23,13041,570,415},},{{7900,36,22,403,606},},
{{7907,34,20,275,652},{7907,29,23,13041,664,339},},{{8521,56,17,8419,700},},{{8509,58,24,13059,667,700},},{0},{0},{0},{{444,86,17,8918,474},},{0},{0},{0},{{8193,98,20,406,625},
{1436,53,18,8509,257},},{0},{{10895,21,23,13041,610,7924},},{0},{0},{{8918,86,22,447,633},},{0},{0},{{9795,76,24,13059,777,4745},},{{415,100,17,8193,474},},{{7900,43,18,7907,622},
{447,84,18,9451,368},},{{10381,13,16,10591,643},},{{7907,30,22,403,660},{406,100,17,8193,252},},{{7910,36,20,275,762},{7910,30,22,403,770},},
{{13026,109,22,7951,152},{7929,23,23,13041,237,7924},},{0},{0},{{8173,15,20,7893,719},},{{4745,77,17,8918,585},},{0},{0},{{7899,68,17,7915,673},{485,88,19,9543,262},},
{{9451,83,17,8918,673},{7918,75,20,303,762},},{{280,70,22,299,564},},{{9543,80,16,8890,697},{9543,77,17,8918,700},},{{8419,49,20,1436,625},
{1417,52,23,13041,348,969},},{{10895,22,24,13059,613,7919},},{{7896,7,23,13041,570,7895},},{{275,42,18,7907,257},},{0},{0},{0},{{12308,122,17,11031,810},{10381,10,16,10591,643},},
{{7951,99,18,7935,813},},{0},{0},{{9967,96,20,9967,219},{406,103,22,409,231},},{0},{{7929,20,16,10895,247},{403,29,23,13041,348,339},},{{10370,14,20,13061,656},
{4745,82,19,9543,595},},{{8142,103,18,7935,622},},{{444,88,22,447,453},},{0},{{7902,30,20,275,625},},{{280,69,18,7899,590},},{0},{{7915,70,16,7914,643},},
{{10895,19,24,13059,613,7919},{7924,28,16,10895,469},},{0},{0},{{12992,73,20,303,148},{8419,50,24,13059,640,700},},{{10391,26,17,10915,700},},{{8890,83,22,447,606},},
{{9795,82,23,13041,774,444},},{{9861,118,22,10275,564},},{0},{{10915,16,20,7929,625},{8597,48,18,8509,786},},{{406,106,22,409,231},},{{405,111,23,13041,570,415},},
{0},{{403,30,22,403,342},},{0},{{7895,13,19,10770,484},},{0},{0},{0},{0},{0},{{10974,117,20,9967,679},},{0},{{1436,47,18,8509,257},},{{13021,85,20,485,148},{8419,55,24,13059,640,700},},
{0},{{10286,114,22,10275,453},},{0},{{8918,76,22,447,633},},{{10591,15,23,13041,610,7895},{9861,96,22,10275,564},},{0},{{447,79,17,8918,363},},{0},{0},{0},{0},{{288,66,22,299,453},},
{{4745,84,22,447,564},},{{409,105,18,7935,368},},{{299,68,18,7899,368},},{0},{0},{0},{{8238,5,22,7894,103},{331,30,20,275,552},},{{7915,75,24,13059,640,280},
{1436,50,18,8509,257},},{{8193,105,23,13041,637,415},},{0},{0},{{7908,32,20,275,679},},{{7935,109,17,8193,673},},{{8918,79,23,13041,637,444},},{0},{{7893,7,18,10370,257},},
{{7894,6,19,10770,373},},{0},{{12308,115,22,10275,797},{10381,4,20,7893,625},},{0},{0},{0},{0},{{288,63,23,13041,459,288},},{{8173,6,16,10591,747},},{{10370,7,23,13041,664,7895},},
{{10942,28,23,13041,664,7924},},{{331,41,22,403,564},},{{10758,5,24,13059,777,7896},{485,76,22,447,231},},{0},{0},{{7924,21,17,10915,474},{303,72,19,7917,262},},
{{7908,39,20,275,679},},{0},{0},{{7896,12,20,7893,552},{275,37,18,7907,257},},{{7919,19,23,13041,570,7924},{7893,4,22,7894,231},},{{7894,9,17,10381,363},},
{0},{{12308,118,22,10275,797},},{0},{{7910,32,24,13059,777,331},},{{8597,58,18,8509,786},},{{8521,57,20,13057,683},},{{288,91,16,7914,469},},{{403,93,24,13059,353,331},},
{0},{0},{0},{{7899,63,22,299,660},},{0},{{7918,90,20,13071,766},{280,74,18,7899,590},},{0},{0},{{10895,26,20,7929,598},},{0},{{7896,11,20,7893,552},},{0},{0},{{8890,84,22,447,606},},
{{969,48,22,1417,453},},{{12308,117,23,13041,801,10286},},{{10591,6,16,10591,616},},{0},{{9967,113,17,11031,252},{406,99,18,7935,257},},{{7910,35,23,13041,774,339},
{405,99,20,406,552},},{{8509,56,24,13059,667,700},{7929,16,20,7929,219},},{{403,36,23,13041,348,339},},{{8142,99,22,409,606},{7895,77,1,12980,376},},
{{444,84,18,9451,479},},{{4745,78,22,447,564},},{{10942,18,16,10895,670},},{0},{{7917,69,18,7899,703},{331,93,20,275,552},},{{10758,11,20,7893,762},},
{0},{0},{{8044,6,16,10591,747},},{0},{{10895,23,24,13059,613,7919},},{{11931,112,16,11931,616},{275,43,23,13041,237,339},},{{969,53,22,1417,453},},{{9795,78,24,13059,777,4745},
{7935,100,22,409,660},},{{9861,122,23,13041,570,10286},},{{7894,15,18,10370,368},{415,102,22,409,453},},{0},{{13023,10,20,7893,148},{7910,38,17,7902,783},},
{0},{0},{{7907,41,16,7900,670},},{0},{{4745,83,22,447,564},},{0},{{7902,42,22,403,633},},{0},{{10758,14,20,13061,766},},{{10974,113,16,11931,697},{280,68,23,13041,570,288},},
{0},{{8044,5,16,10591,747},},{{8193,101,16,8142,643},},{{10895,16,24,13059,613,7919},},{{11931,117,16,11931,616},},{{7908,41,16,7900,697},{1417,58,18,8509,368},},
{{9795,83,24,13059,777,4745},},{0},{{415,99,22,409,453},},{{7919,25,23,13041,570,7924},{7894,18,1,12980,265},},{0},{0},{{447,83,18,9451,368},},{{7907,42,16,7900,670},},
{0},{0},{{409,101,22,409,342},},{{288,70,19,7917,484},},{0},{{10275,122,22,10275,342},},{0},{{331,37,19,7908,595},},{{485,83,22,447,231},},{0},{0},{{7924,18,19,10391,484},},
{0},{{8419,52,24,13059,640,700},},{{7935,98,23,13041,664,415},},{0},{{7893,11,22,7894,231},},{{10591,12,24,13059,613,7896},},{0},{0},{0},{0},{{10770,5,17,10381,700},{8310,4,24,13059,47,7896},},
{{8521,48,16,8332,697},},{{7895,15,16,10591,469},},{{8509,50,20,1436,652},},{0},{{8142,105,22,409,606},},{{7927,22,17,10915,363},{444,78,18,9451,479},},
{0},{{7899,75,22,299,660},{485,80,23,13041,237,444},},{{7918,67,16,7914,780},{331,31,9,13074,519},},{{10974,119,17,11031,700},},{{8193,106,24,13059,640,405},},
{{303,62,7,13072,170},},{{9543,88,18,9451,703},},{0},{0},{{10927,20,17,10915,783},{700,54,24,13059,575,700},},{{8890,77,18,9451,622},},{{7919,23,16,10895,580},
{969,47,22,1417,453},},{{10381,5,23,13041,637,7895},},{{10591,9,20,7893,598},{9861,113,22,10275,564},},{0},{{8521,53,16,8332,697},},{{9967,120,24,13059,242,9861},
{7910,93,16,7900,780},},{0},{{7929,28,20,7929,219},{288,62,7,13072,392},},{{7914,69,23,13041,610,288},},{{7927,19,19,10391,373},},{{10370,6,18,10370,676},},
{{10942,27,20,13060,656},},{0},{{7917,73,23,13041,691,288},},{{8193,111,24,13059,640,405},},{0},{0},{0},{{12992,66,20,303,148},{10286,119,19,10974,484},},{{8419,58,20,1436,625},},
{0},{{7893,5,19,10770,262},},{0},{0},{{415,105,22,409,453},},{0},{{9967,117,24,13059,242,9861},},{{10915,24,22,7927,633},},{0},{{7907,32,20,275,652},},{0},{0},{{8142,111,17,8193,619},},
{0},{0},{{10758,7,24,13059,777,7896},{331,43,17,7902,585},},{0},{{8238,81,20,13039,82},},{0},{{1436,55,22,1417,231},},{{7908,37,17,7902,700},{1417,49,16,8332,358},},
{{275,39,19,7908,262},},{0},{{10391,18,16,10895,697},},{{8918,84,18,9451,649},{7935,104,23,13041,664,415},},{{12952,118,17,11031,673},{7894,11,22,7894,342},},
{{7951,100,17,8193,810},},{0},{{8597,56,17,8419,783},{7910,34,24,13059,777,331},},{0},{{7907,37,20,275,652},},{{9967,118,20,9967,219},},{{8310,13,23,13041,41,7895},},
{{7914,67,18,7899,622},},{{288,74,24,13059,464,280},},{0},{{10275,117,22,10275,342},{10275,96,23,13041,348,10286},},{0},{{10974,96,24,13059,694,9861},},{{10758,10,17,10381,783},},
{{1436,58,22,1417,231},},{{7918,73,20,303,762},},{{7915,67,22,299,633},},{0},{{10895,20,23,13041,610,7924},},{0},{0},{{8890,86,17,8918,619},},{0},{{415,103,19,8314,484},},
{0},{0},{{9967,115,20,9967,219},{406,101,19,8314,262},},{{403,38,22,403,342},},{{8521,47,20,1436,679},},{{7895,6,20,7893,441},},{0},{{7927,26,18,10942,368},},
{{8314,109,17,8193,700},},{0},{{13017,101,20,406,148},},{0},{{11031,119,18,12952,649},{9451,82,23,13041,664,444},},{{7917,67,23,13041,691,288},},{{8193,102,23,13041,637,415},},
{0},{0},{0},{0},{{700,47,20,1436,552},},{0},{{7893,15,19,10770,262},},{{10381,9,16,10591,643},},{{339,42,22,403,453},},{0},{0},{0},{{8509,54,16,8332,670},},{0},{0},{{8173,11,18,10370,757},},
{{10370,15,22,7894,660},},{{485,84,19,9543,262},},{{10942,23,20,7929,652},},{0},{0},{{280,66,20,303,552},},{{10895,18,24,13059,613,7919},},{0},{{11931,119,23,13041,610,10286},
{10286,112,17,11031,474},},{{700,50,20,1436,552},},{{7896,3,22,7894,564},},{{7919,27,20,13060,558},},{{969,56,18,8509,479},},{{10591,13,24,13059,613,7896},},
{0},{0},{0},{0},{{8310,3,24,13059,47,7896},{7929,24,16,10895,247},},{{10770,4,18,10370,703},},{0},{{10370,10,22,7894,660},},{0},{0},{{8314,107,18,7935,703},{299,66,22,299,342},},
{{8332,50,20,1436,598},},{{13052,91,2,7918,0},},{0},{{303,63,23,13041,237,288},},{{8193,107,24,13059,640,405},},{{8419,54,24,13059,640,700},{1417,40,20,13046,313},},
{0},{{12992,63,20,303,148},},{0},{{700,49,24,13059,575,700},},{{7894,4,22,7894,342},},{{10381,6,24,13059,640,7896},},{{9861,114,17,11031,585},},{0},{{10915,20,23,13041,637,7924},},
{{10770,7,22,7894,687},},{{8509,48,23,13041,664,969},{403,17,4,13075,269},},{{8310,6,17,10381,59},},{{7914,68,18,7899,622},},{{409,104,18,7935,368},},
{0},{0},{{7902,34,20,275,625},},{{7917,74,16,7914,697},},{{8238,6,18,10370,134},},{{8193,104,24,13059,640,405},{8044,13,20,7893,719},},{{9451,88,23,13041,664,444},
{9451,77,22,447,660},},{{7915,74,18,7899,649},},{0},{0},{{700,52,24,13059,575,700},},{{10927,22,22,7927,770},},{0},{{10591,11,17,10381,619},},{{7894,7,17,10381,363},},
{0},{{10381,3,20,7893,625},},{{9967,122,24,13059,242,9861},},{{403,33,22,403,342},},{0},{{409,109,18,7935,368},},{{7895,10,20,7893,441},},{{8173,5,16,10591,747},
{444,83,23,13041,459,444},},{{7902,37,20,275,625},},{0},{0},{{8332,52,24,13059,613,700},},{0},{0},{{8193,109,17,8193,646},},{0},{{10895,24,20,7929,598},},{{10927,19,22,7927,770},},
{{275,36,18,7907,257},},{{8918,83,17,8918,646},},{{7894,10,19,10770,373},{415,107,23,13041,459,415},},{{13056,45,3,13053,2},{7893,3,24,13059,242,7896},},
{{7900,93,20,275,598},},{{7951,101,18,7935,813},{339,37,22,403,453},},{0},{{7907,34,23,13041,664,339},{7907,29,20,275,652},},{{9967,119,17,11031,252},},
{0},{{7929,18,20,7929,219},},{0},{0},{0},{{8332,59,24,13059,613,700},},{0},{0},{0},{{7918,91,22,299,770},{7918,72,17,7915,783},},{{10895,21,20,7929,598},},{0},{{12987,11,0,8310,0},
{275,41,18,7907,257},},{{7935,106,22,409,660},},{0},{0},{0},{{7951,102,22,409,797},},{{7900,43,17,7902,619},{447,84,17,8918,363},},{0},{{9967,112,19,10974,262},},
{{8597,54,24,13059,777,700},{7910,36,17,7902,783},},{{7929,23,20,7929,219},},{{10770,13,22,7894,687},{8310,15,16,10591,53},},{{288,72,24,13059,464,280},},
{{10275,119,23,13041,348,10286},},{{8142,100,24,13059,613,405},{4745,77,18,9451,590},},{{10942,19,16,10895,670},{8332,45,20,1436,598},},{0},{{7899,68,20,303,652},
{485,88,22,447,231},},{{9451,83,18,9451,676},{7918,75,23,13041,774,288},},{{7917,68,20,303,679},},{{9543,80,23,13041,691,444},{9543,77,22,447,687},},
{{8044,7,16,10591,747},},{0},{{7896,7,18,10370,590},{275,31,9,13074,186},},{{11931,115,16,11931,616},},{0},{{13053,51,20,13036,143},},{0},{{12308,122,22,10275,797},
{10381,10,23,13041,637,7895},},{{339,43,19,7908,484},},{{13023,5,20,7893,148},},{0},{0},{0},{{7929,20,19,10391,262},{403,29,20,275,330},},{{7914,72,23,13041,610,288},},
{{409,103,18,7935,368},},{{8314,111,22,409,687},},{{13046,38,2,7910,0},{485,85,22,447,231},},{{7902,43,16,7900,643},},{{10974,114,16,11931,697},
{7917,65,20,303,679},},{0},{{8044,10,16,10591,747},},{{11031,113,23,13041,637,10286},{8193,100,16,8142,643},},{0},{0},{0},{{10391,26,20,7929,679},},{{10927,25,22,7927,770},},
{{9795,82,18,9451,786},},{{12978,22,2,10927,0},},{0},{0},{{447,82,18,9451,368},},{{7910,42,22,403,770},{405,111,20,406,552},},{0},{{10770,11,17,10381,700},},
{{13039,86,2,9795,0},{7914,75,22,299,606},},{{7895,13,16,10591,469},},{{7927,20,22,7927,342},},{0},{{299,67,19,7917,373},},{0},{0},{0},{{303,60,24,13059,242,280},},
{{1436,47,17,8419,252},},{0},{0},{{700,48,19,8521,595},},{0},{{12980,45,20,8238,148},},{{10591,15,24,13059,613,7896},},{0},{{10381,7,24,13059,640,7896},{447,79,18,9451,368},},
{0},{0},{{8310,5,24,13059,47,7896},},{0},{0},{0},{{409,105,23,13041,348,415},},{{299,68,17,7915,363},},{{444,79,18,9451,479},},{0},{{10942,25,20,7929,652},},{{331,30,23,13041,570,339},},
{{1436,50,23,13041,237,969},},{{8193,105,24,13059,640,405},{7918,68,22,299,770},},{{10895,28,16,10895,616},},{0},{{275,32,22,403,231},},{{7935,109,22,409,660},},
{{700,55,24,13059,575,700},},{{415,111,22,409,453},},{{7919,22,16,10895,580},{7893,7,23,13041,237,7895},},{{7951,105,22,409,797},},{{10915,22,22,7927,633},},
{{10381,4,23,13041,637,7895},},{{8521,52,16,8332,697},},{{405,105,24,13059,575,405},},{0},{0},{{288,65,20,303,441},},{{7927,18,17,10915,363},{444,82,18,9451,479},},
{{10370,7,18,10370,676},},{{10942,28,20,7929,652},},{{8314,101,22,409,687},},{0},{{9451,79,23,13041,664,444},},{{7917,91,24,13059,694,280},},{{7924,21,20,7929,441},
{303,72,22,299,231},},{{7915,91,16,7914,643},},{0},{{700,58,24,13059,575,700},},{{11931,122,20,9967,598},},{{7919,19,16,10895,580},{7893,4,17,10381,252},},
{0},{0},{0},{0},{{405,102,24,13059,575,405},},{{8597,58,17,8419,783},},{{8310,11,20,7893,20},},{{288,91,23,13041,459,288},},{{7929,19,17,10915,252},},{{10275,115,22,10275,342},},
{{7914,65,22,299,606},},{{7902,39,17,7902,646},},{0},{{8332,58,24,13059,613,700},},{0},{0},{{8044,3,20,7893,719},},{{10895,26,23,13041,610,7924},},{0},{{275,38,17,7902,252},},
{0},{0},{{700,57,20,13057,558},},{{9795,77,18,9451,786},{969,48,17,8419,474},},{{339,39,23,13041,459,339},},{{7894,12,24,13059,353,7896},},{{8597,55,23,13041,774,969},},
{{7900,42,18,7907,622},},{{7910,29,20,275,762},{405,99,17,8193,585},},{{7929,16,23,13041,237,7924},},{0},{{8142,99,17,8193,619},},{{7895,4,20,7893,441},
{288,75,24,13059,464,280},},{0},{0},{{8314,99,17,8193,700},},{{7917,69,23,13041,691,288},{331,93,17,7902,585},},{{13017,103,20,406,148},{10758,11,23,13041,774,7895},},
{0},{0},{{1436,59,20,1436,219},},{0},{0},{{8918,88,18,9451,649},},{{7919,28,24,13059,575,7919},{969,53,19,8521,484},},{0},{{12952,114,23,13041,664,10286},},{{415,102,17,8193,474},},
{{7900,41,22,403,606},{447,86,22,447,342},},{{7910,38,18,7907,786},},{{8597,52,24,13059,777,700},},{0},{0},{0},{0},{{8142,102,24,13059,613,405},},{{7902,29,24,13059,640,331},},
{0},{0},{{7899,70,17,7915,673},},{0},{0},{{11031,118,20,9967,625},{9451,85,23,13041,664,444},},{0},{{303,67,23,13041,237,288},},{{1417,58,17,8419,363},},{0},{0},{{12952,113,22,10275,660},
{415,99,19,8314,484},},{{7919,25,20,7929,552},},{0},{{8597,49,24,13059,777,700},},{0},{0},{0},{{8509,53,16,8332,670},},{{409,101,19,8314,373},},{{288,70,16,7914,469},},
{{8173,10,18,10370,757},{7927,21,19,10391,373},},{{10275,122,17,11031,363},},{{299,62,10,13072,305},},{{331,37,16,7900,580},},{{485,83,19,9543,262},},
{{11031,115,20,9967,625},},{{9451,86,22,447,660},},{{7924,18,16,10895,469},{303,61,24,13059,242,280},},{0},{0},{0},{0},{{7893,11,19,10770,262},},{0},{0},{0},{0},{0},{{405,109,19,8314,595},},
{0},{{13013,56,20,1436,148},{288,69,16,7914,469},},{0},{0},{0},{0},{0},{{10942,24,17,10915,673},},{{331,31,10,13074,527},},{{10974,119,20,9967,679},},{{7915,72,23,13041,637,288},
{7915,61,22,299,633},},{0},{{9543,88,17,8918,700},},{0},{0},{{10391,20,20,7929,679},},{{8890,88,16,8890,616},{8890,77,17,8918,619},},{{969,47,19,8521,484},},
{{10381,5,24,13059,640,7896},},{{10591,9,17,10381,619},{9861,113,19,10974,595},},{0},{{7900,35,22,403,606},},{{7910,93,23,13041,774,339},},{0},{{7929,28,23,13041,237,7924},},
{{7914,69,18,7899,622},},{0},{{10370,6,23,13041,664,7895},},{0},{0},{{7917,73,16,7914,697},},{{8238,7,18,10370,134},},{0},{{303,90,20,13071,225},},{{303,46,5,13056,164},},
{{10286,119,22,10275,453},},{{8419,58,23,13041,637,969},},{{7935,111,17,8193,673},{700,53,24,13059,575,700},},{{7919,16,23,13041,570,7924},{7893,5,20,7893,219},},
{0},{{339,35,22,403,453},},{{415,105,19,8314,484},},{{7900,38,22,403,606},{447,89,22,447,342},},{0},{{405,103,24,13059,575,405},},{{8310,10,17,10381,59},},
{0},{0},{0},{{8142,111,20,406,598},},{0},{{7927,28,24,13059,353,7919},},{{331,43,18,7907,590},},{{8332,53,24,13059,613,700},},{0},{0},{0},{{7908,37,20,275,679},},{0},{0},{{13024,26,20,7929,148},},
{{700,56,17,8419,585},},{{12952,118,22,10275,660},{7894,11,17,10381,363},},{0},{{10591,7,22,7894,606},},{{8597,56,20,1436,762},{405,100,24,13059,575,405},},
{{7900,37,17,7902,619},},{{7907,37,17,7902,673},},{{9967,118,23,13041,237,10286},},{0},{{8142,98,20,406,598},},{{7895,5,17,10381,474},},{{7927,25,24,13059,353,7919},
{299,75,22,299,342},},{{10275,117,19,10974,373},},{{8332,56,24,13059,613,700},},{{7917,70,24,13059,694,280},},{{10758,10,18,10370,786},},{0},{{7918,61,23,13041,774,288},
{280,72,24,13059,575,280},},{{7924,27,20,13060,447},},{0},{{12987,10,0,8310,0},{10895,20,18,10942,622},},{0},{0},{{8890,86,18,9451,622},},{{969,54,18,8509,479},},
{{415,103,20,406,441},},{0},{0},{{9967,115,17,11031,252},{406,101,22,409,231},},{{8597,53,24,13059,777,700},},{{8521,47,17,8419,700},{7907,38,22,403,660},},
{{7895,6,23,13041,459,7895},},{{288,73,24,13059,464,280},},{0},{{8142,101,24,13059,613,405},},{0},{{10758,13,22,7894,770},},{{10942,20,22,7927,660},},{{11031,119,23,13041,637,10286},
{9451,82,18,9451,676},},{{10974,112,16,11931,697},{7917,67,20,303,679},},{0},{0},{{9543,83,23,13041,691,444},{9543,76,20,485,679},},{0},{{11931,114,16,11931,616},
{275,30,20,275,219},},{{9795,80,23,13041,774,444},},{0},{{7893,15,16,10591,247},},{0},{{339,42,17,7902,474},},{{8597,50,24,13059,777,700},},{{7907,93,16,7900,670},
{7907,43,22,403,660},},{0},{0},{0},{0},{{409,102,18,7935,368},},{{10370,15,17,10381,673},},{{13046,39,2,7910,0},},{{10942,23,23,13041,664,7924},{8314,104,24,13059,694,405},},
{{10974,115,16,11931,697},},{0},{0},{0},{{8044,11,22,7894,731},},{{11931,119,16,11931,616},{10286,112,22,10275,453},},{{1417,56,22,1417,342},},{0},{0},{0},{{12978,23,2,10927,0},},
{{12952,96,22,10275,660},},{{10915,19,17,10915,646},},{0},{0},{{7929,24,19,10391,262},},{{10770,4,23,13041,691,7895},},{{409,107,18,7935,368},},{0},{{8142,104,16,8142,616},},
{0},{0},{{8238,3,22,7894,103},{331,39,23,13041,570,339},},{{13052,68,2,7918,0},{7918,66,22,299,770},},{{280,62,7,13072,503},},{{7915,73,18,7899,649},
{303,63,24,13059,242,280},},{0},{0},{0},{0},{{10391,21,17,10915,700},{9795,86,18,9451,786},},{0},{{7894,4,19,10770,373},},{0},{{9861,114,20,9967,552},{339,92,20,13064,447},},
{0},{{447,78,20,485,330},},{{10770,7,17,10381,700},},{{8521,54,16,8332,697},},{{8310,6,18,10370,65},},{{8142,107,16,8142,616},{7914,68,23,13041,610,288},},
{{7895,9,22,7894,453},},{0},{{444,76,22,447,453},},{{485,78,22,447,231},},{{7917,74,23,13041,691,288},},{{10758,3,22,7894,770},},{{8044,13,23,13041,737,7895},},
{{9451,88,18,9451,676},{280,61,24,13059,575,280},},{0},{{11931,120,24,13059,613,9861},},{0},{0},{{10927,22,17,10915,783},},{{8890,79,22,447,606},},{{10591,11,18,10370,622},},
{{7894,7,20,7893,330},},{0},{0},{0},{{405,104,24,13059,575,405},},{{7907,33,22,403,660},},{0},{{7895,10,23,13041,459,7895},},{{444,83,18,9451,479},},{0},{0},{{10758,6,22,7894,770},},
{0},{0},{{10974,121,20,13063,683},{280,91,16,7914,580},},{{8193,109,18,7935,649},{1436,54,24,13059,242,700},},{0},{{303,75,20,303,219},},{0},{{275,36,17,7902,252},},
{{7919,18,16,10895,580},{969,50,22,1417,453},},{{7894,10,20,7893,330},{415,107,16,8142,469},},{{13056,76,3,13053,2},},{{7900,93,23,13041,610,339},},
{{7951,101,23,13041,801,415},{339,37,19,7908,484},},{{7910,33,23,13041,774,339},{405,101,24,13059,575,405},},{0},{{9967,119,18,12952,257},},{{13060,18,11,13024,0},
{8509,58,18,8509,676},},{{7929,18,19,10391,262},},{0},{0},{{10275,114,16,11931,358},},{{8332,59,23,13041,610,969},{7899,67,16,7914,670},},{0},{0},{{8238,9,22,7894,103},},
{{7918,91,17,7915,783},{7918,72,22,299,770},},{{7924,26,17,10915,474},{303,68,20,303,219},},{0},{{275,41,23,13041,237,339},},{{1417,55,22,1417,342},},
{0},{0},{{10391,28,22,7927,687},},{{12978,24,2,10927,0},{7951,102,17,8193,810},},{{7894,13,24,13059,353,7896},},{{10381,13,22,7894,633},},{{9967,112,22,10275,231},},
{{8597,54,23,13041,774,969},},{{7929,23,17,10915,252},},{0},{{13039,88,2,9795,0},{409,98,22,409,342},},{{10275,119,16,11931,358},},{0},{{8332,45,23,13041,610,969},},
{0},{{8238,12,22,7894,103},},{{9451,83,23,13041,664,444},{7918,63,22,299,770},},{{7917,68,23,13041,691,288},{280,70,24,13059,575,280},},{{7915,69,23,13041,637,288},},
{{8044,7,23,13041,737,7895},},{{7908,43,20,275,679},},{{7896,7,17,10381,585},{275,31,10,13074,194},},{{275,42,24,13059,242,331},},{{10391,25,22,7927,687},
{969,52,17,8419,474},},{{8918,89,24,13059,640,4745},},{0},{{8890,80,23,13041,610,444},},{{7951,99,24,13059,804,405},{339,43,20,275,441},},{{7910,39,18,7907,786},},
{0},{0},{{8521,45,20,1436,679},},{{7929,20,22,7927,231},},{{7914,72,20,303,598},},{{8142,103,24,13059,613,405},},{{8314,111,17,8193,700},{299,60,23,13041,348,288},},
{{8173,12,22,7894,731},},{0},{{280,69,24,13059,575,280},},{{8238,15,17,10381,128},},{{7915,70,22,299,633},},{{11031,113,20,9967,625},},{0},{0},{{8419,50,22,1417,633},
{7908,93,18,7907,703},},{{10391,26,23,13041,691,7924},},{{700,45,20,1436,552},},{0},{{9861,118,16,11931,580},{339,44,20,275,441},},{0},{{8597,48,24,13059,777,700},
{7900,30,23,13041,610,339},},{0},{{8521,50,20,1436,679},},{{7929,25,22,7927,231},},{{10770,11,20,7893,679},},{{409,100,17,8193,363},},{{13013,58,20,1436,148},},
{{8173,9,22,7894,731},},{{10370,9,18,10370,676},},{{8314,106,24,13059,694,405},{299,67,20,303,330},},{{331,36,16,7900,580},},{0},{0},{{280,64,20,303,552},},
{{1436,47,20,1436,219},},{{8419,55,22,1417,633},},{{7924,19,22,7927,453},},{{700,48,20,1436,552},},{0},{0},{0},{0},{{7900,29,22,403,606},{447,79,23,13041,348,444},},
{0},{0},{{10770,6,20,7893,679},},{{406,109,16,8142,247},},{{13013,55,20,1436,148},},{0},{{10370,4,18,10370,676},},{{299,68,20,303,330},},{{444,79,17,8918,474},},
{{7899,74,20,303,652},{485,79,19,9543,262},},{{8332,48,20,1436,598},},{0},{{1436,50,20,1436,219},},{{9451,89,23,13041,664,444},},{{7924,22,22,7927,453},},
{0},{0},{{12992,61,20,303,148},},{{10927,23,20,7929,762},},{0},{{7919,22,19,10391,595},{7893,7,20,7893,219},},{0},{{9861,112,17,11031,585},},{{12308,115,16,11931,807},
{10381,4,18,10370,649},},{0},{0},{0},{0},{{288,65,23,13041,459,288},},{{7927,18,20,7929,330},{444,82,23,13041,459,444},},{0},{{10942,28,17,10915,673},{8332,55,20,1436,598},},
{0},{{7917,72,16,7914,697},{7917,60,20,303,679},},{{11031,120,23,13041,637,10286},{9451,79,16,8890,670},},{0},{{7924,21,23,13041,459,7924},},{{1436,49,24,13059,242,700},},
{{7908,30,22,403,687},},{{10927,16,20,7929,762},},{{11931,122,23,13041,610,10286},},{0},{{13072,46,6,13056,2},{10391,16,23,13041,691,7924},},{{10591,5,17,10381,619},},
{{12308,118,16,11931,807},},{{7951,106,20,406,789},},{{405,102,23,13041,570,415},},{{8597,58,20,1436,762},{8597,45,23,13041,774,969},},{{8310,11,23,13041,41,7895},},
{0},{{7929,19,22,7927,231},{403,93,18,7907,368},},{0},{0},{{7902,39,20,275,625},},{{8173,3,22,7894,731},},{0},{0},{{331,42,20,275,552},},{{7915,65,22,299,633},
{1436,52,24,13059,242,700},},{{8193,99,17,8193,646},},{0},{{10286,120,23,13041,459,10286},{275,38,20,275,219},},{{8419,45,22,1417,633},},{0},{0},{{415,101,19,8314,484},},
{{7951,103,20,406,789},{339,39,16,7900,469},},{{12952,119,20,9967,652},},{{8597,55,20,1436,762},},{{7900,42,23,13041,610,339},{447,85,23,13041,348,444},},
{0},{0},{0},{{409,99,19,8314,373},},{{7895,4,19,10770,484},},{{7927,24,24,13059,353,7919},},{{10942,18,22,7927,660},},{{8314,99,20,406,679},{299,74,16,7914,358},},
{{7917,69,24,13059,694,280},},{{10758,11,18,10370,786},},{{11031,117,24,13059,640,9861},},{{7918,74,17,7915,783},{280,73,24,13059,575,280},},{0},{{7908,42,17,7902,700},
{1417,53,23,13041,348,969},},{{12987,13,0,8310,0},},{{8918,88,23,13041,637,444},},{{7896,6,18,10370,590},{275,43,24,13059,242,331},},{{12980,7,20,8238,148},
{7935,100,16,8142,670},},{{12952,114,20,9967,652},},{{8890,87,20,13062,602},{7894,15,24,13059,353,7896},},{{7900,41,17,7902,619},{447,86,17,8918,363},},
{0},{0},{{10770,15,16,10591,697},},{{406,102,20,406,219},},{0},{0},{{10370,13,22,7894,660},},{{8314,110,20,13073,683},},{0},{0},{{7899,70,20,303,652},},{{280,68,24,13059,575,280},},
{{8044,5,22,7894,731},},{{11031,118,23,13041,637,10286},{9451,85,20,485,652},},{0},{{7924,8,20,12978,430},{303,67,16,7914,247},},{{7896,5,22,7894,564},
{275,44,24,13059,242,331},},{{13024,22,20,7929,148},},{0},{{8890,82,20,485,598},},{{969,58,24,13059,464,700},},{0},{{9861,119,19,10974,595},},{{7900,44,24,13059,613,331},
{447,83,24,13059,353,4745},},{{406,105,20,406,219},},{0},{0},{0},{0},{{8173,10,17,10381,752},{7927,21,16,10895,358},},{{4745,80,20,485,552},},{{7899,91,20,303,652},},
{{8314,105,24,13059,694,405},},{{485,83,16,8890,247},},{{11031,115,17,11031,646},},{{280,67,19,7917,595},},{0},{0},{{11931,118,16,11931,616},},{0},{{10286,113,20,9967,441},},
{{7893,11,16,10591,247},},{{9795,84,22,447,770},},{{10591,12,23,13041,610,7895},{7894,47,1,12980,265},},{{447,76,24,13059,353,4745},},{{7951,109,16,8142,807},},
{{7910,44,23,13041,774,339},},{{405,109,20,406,552},},{0},{{7895,15,22,7894,453},{288,69,19,7917,484},},{{13057,47,11,13013,0},},{{10370,11,17,10381,673},
{4745,85,20,485,552},},{{8142,105,16,8142,616},{409,106,24,13059,353,405},},{{7902,92,20,13064,629},},{0},{{10942,24,22,7927,660},},{{13052,69,2,7918,0},
{331,31,7,13074,503},},{{10974,119,23,13041,691,10286},{8238,4,24,13059,116,7896},},{{7915,72,18,7899,649},},{{8193,106,23,13041,637,415},},{{9543,88,20,485,679},},
{0},{{7908,35,22,403,687},{1417,47,23,13041,348,969},},{{9795,89,22,447,770},},{{8918,78,23,13041,637,444},},{{7919,23,22,7927,564},{969,47,16,8332,469},},
{0},{{13012,44,20,275,148},},{{405,106,20,406,552},},{0},{0},{0},{{8310,7,18,10370,65},{288,62,9,13072,408},},{{7914,69,17,7915,619},{409,111,24,13059,353,405},},
{0},{{299,70,17,7915,363},},{0},{{8314,100,16,8142,697},},{0},{{10758,4,18,10370,786},},{{1436,48,19,8521,262},},{{303,73,24,13059,242,280},},{0},{{7908,38,22,403,687},},
{{8419,58,18,8509,649},},{{7935,111,18,7935,676},},{{7896,15,22,7894,564},},{0},{{13012,35,20,275,148},{10591,10,18,10370,622},},{{415,105,16,8142,469},},
{0},{0},{{10915,24,16,10895,643},},{{8310,10,18,10370,65},},{{10770,3,24,13059,694,7896},{8521,58,22,1417,687},},{0},{{8509,47,17,8419,673},{288,61,22,299,453},},
{{8142,111,23,13041,610,415},{7914,64,24,13059,613,280},},{{8314,103,16,8142,697},},{{7927,28,23,13041,348,7924},},{{331,43,23,13041,570,339},},{0},{{11031,122,16,11931,643},},
{0},{{1436,55,24,13059,242,700},},{{7908,37,23,13041,691,339},{1417,49,22,1417,342},},{0},{{10927,18,17,10915,783},{7896,10,22,7894,564},},{{10391,18,22,7927,687},},
{{700,56,18,8509,590},},{0},{0},{{10381,15,17,10381,646},},{{8597,56,23,13041,774,969},},{{7900,37,20,275,598},},{0},{{9967,118,18,12952,257},{406,98,23,13041,237,415},},
{0},{{403,37,23,13041,348,339},},{{7895,5,22,7894,453},{288,74,18,7899,479},},{0},{{10275,117,16,11931,358},{4745,79,24,13059,575,4745},},{0},{0},{{10758,10,23,13041,774,7895},},
{{1436,58,24,13059,242,700},},{0},{0},{0},{{10895,20,17,10915,619},},{{8918,87,20,13062,629},},{{7896,9,17,10381,585},{275,29,22,403,231},},{{8890,86,23,13041,610,444},},
{{9795,79,22,447,770},{969,54,17,8419,474},},{{339,41,19,7908,484},},{{447,87,20,13062,336},},{0},{{9967,115,18,12952,257},},{{7910,37,22,403,770},},
{{7929,22,19,10391,262},},{{7895,6,18,10370,479},},{0},{{10275,118,16,11931,358},{7927,26,24,13059,353,7919},},{0},{{7902,41,20,275,625},},{0},{0},{{11031,119,24,13059,640,9861},},
{{7917,67,17,7915,700},},{0},{{1436,57,20,13057,225},},{{9543,83,16,8890,697},{303,64,23,13041,237,288},},{{7896,4,19,10770,595},},{{275,30,23,13041,237,339},},
{{9795,80,18,9451,786},{969,59,23,13041,459,969},},{0},{0},{0},{{7951,98,24,13059,804,405},},{0},{{447,80,24,13059,353,4745},},{0},{0},{{403,43,16,7900,358},},{0},{{409,102,17,8193,363},},
{0},{0},{{299,63,23,13041,348,288},},{0},{{8238,71,20,13052,82},},{0},{0},{0},{0},{{8419,53,18,8509,649},{1417,56,17,8419,363},},{{7935,99,23,13041,664,415},},{0},{{969,56,24,13059,464,700},},
{{10591,13,18,10370,622},{9861,117,16,11931,580},},{0},{{10915,19,18,10942,649},{447,77,24,13059,353,4745},},{0},{0},{{8310,3,22,7894,34},},{{10770,4,20,7893,679},},
{{409,107,23,13041,348,415},},{{288,68,16,7914,469},},{0},{0},{{8314,107,24,13059,694,405},},{{331,39,16,7900,580},},{{7899,72,20,303,652},},{0},{{7915,73,23,13041,637,288},},
{{8193,107,18,7935,649},},{0},{0},{0},{{10391,21,22,7927,687},},{{8918,77,16,8890,643},{700,49,22,1417,564},},{{7894,4,16,10591,358},},{{8890,76,23,13041,610,444},},
{{10381,6,23,13041,637,7895},},{0},{{447,78,23,13041,348,444},},{0},{{8521,54,23,13041,691,969},},{{288,67,16,7914,469},},{{7914,68,20,303,598},},{{7895,9,19,10770,484},
{409,104,24,13059,353,405},},{0},{{10370,5,24,13059,667,7896},{7927,16,20,7929,330},},{0},{{10942,26,17,10915,673},},{{8238,6,24,13059,116,7896},},{{8193,104,22,409,633},},
{{9451,88,17,8918,673},{9451,77,16,8890,670},},{0},{0},{{8419,59,23,13041,637,969},},{{8918,80,16,8890,643},{700,52,22,1417,564},},{{275,93,23,13041,237,339},},
{{8890,79,17,8918,619},},{{969,45,23,13041,459,969},},{{12952,122,24,13059,667,9861},{7894,7,23,13041,348,7895},},{0},{{12308,112,16,11931,807},},{0},{{8597,47,24,13059,777,700},},
{0},{{409,109,24,13059,353,405},},{0},{{8173,5,22,7894,731},{444,83,17,8918,474},},{{4745,88,16,8890,580},},{0},{0},{{8332,52,22,1417,606},},{{9451,78,16,8890,670},},
{{280,91,23,13041,570,288},},{0},{0},{0},{0},{{275,36,20,275,219},},{{7919,18,19,10391,595},},{{7935,105,23,13041,664,415},},{0},{{12308,119,16,11931,807},},{{7951,101,20,406,789},
{339,37,16,7900,469},},{0},{0},{{9967,119,23,13041,237,10286},},{{8509,58,17,8419,673},},{{8310,12,23,13041,41,7895},{403,34,20,275,330},},{{7914,66,24,13059,613,280},},
{0},{{10275,114,19,10974,373},{444,86,24,13059,464,4745},},{0},{0},{{280,75,20,303,552},},{0},{{1436,53,24,13059,242,700},},{{7924,26,22,7927,453},{303,68,19,7917,262},},
{{7915,64,20,303,625},},{{275,41,20,275,219},},{{10286,95,12,13065,434},},{{13024,24,20,7929,148},},{{8890,85,24,13059,613,4745},},{0},{{339,38,16,7900,469},},
{0},{0},{{406,100,24,13059,242,405},},{{8597,54,18,8509,786},{405,98,22,409,564},},{{403,39,20,275,330},},{{10770,13,16,10591,697},{8310,15,22,7894,34},},
{{13039,79,2,9795,0},},{{7895,7,17,10381,474},},{{8142,100,18,7935,622},{4745,77,24,13059,575,4745},},{0},{0},{0},{0},{{7917,68,18,7899,703},},{{9543,77,24,13059,694,4745},
{7915,69,20,303,625},},{{8193,103,23,13041,637,415},{1436,56,17,8419,252},},{0},{{10895,22,22,7927,606},},{{11931,115,22,10275,606},},{{969,52,20,1436,441},},
{{8918,89,23,13041,637,444},{7935,103,16,8142,670},},{0},{{8890,80,20,485,598},},{0},{0},{0},{0},{0},{0},{{7914,72,17,7915,619},{4745,82,24,13059,575,4745},},{0},{0},{0},{{13064,36,11,13012,0},
{10758,15,18,10370,786},},{{10974,114,22,10275,687},},{{8238,15,20,7893,89},},{0},{{11031,113,17,11031,646},{8193,100,22,409,633},},{{10895,19,22,7927,606},},
{{9543,78,20,485,679},},{{8419,50,17,8419,646},{1417,57,20,13057,336},},{0},{{700,45,23,13041,570,969},},{{415,98,20,406,441},},{{7919,24,19,10391,595},
{7893,13,16,10591,247},},{0},{{7900,30,20,275,598},},{{12308,121,20,13063,793},{447,82,24,13059,353,4745},},{0},{0},{{10770,11,23,13041,691,7895},},{{409,100,20,406,330},},
{0},{{7927,20,16,10895,358},},{{10370,9,17,10381,673},{4745,87,20,13062,558},},{0},{{331,36,23,13041,570,339},},{{7899,73,17,7915,673},{485,82,16,8890,247},},
{0},{0},{{303,60,23,13041,237,288},},{0},{0},{{10927,26,16,10895,780},},{0},{{7919,21,17,10915,585},{7893,10,16,10591,247},},{0},{0},{{10381,7,18,10370,649},{447,79,24,13059,353,4745},},
{0},{0},{{10915,21,23,13041,637,7924},},{{406,109,23,13041,237,415},},{{8509,49,23,13041,664,969},},{{13039,83,2,9795,0},},{{10370,4,23,13041,664,7895},},{{7914,91,17,7915,619},
{409,105,24,13059,353,405},},{{444,79,20,485,441},},{{7899,74,23,13041,664,288},{485,79,16,8890,247},},{{7902,33,22,403,633},},{{280,60,20,303,552},},
{{8238,5,24,13059,116,7896},},{{9451,89,20,485,652},{7918,68,16,7914,780},},{{7924,22,19,10391,484},},{0},{0},{0},{{10391,23,17,10915,700},},{{8890,89,23,13041,610,444},
{8890,78,20,485,598},},{{9795,88,20,485,762},},{{7951,105,16,8142,807},},{{9861,112,20,9967,552},},{0},{{8521,52,22,1417,687},},{{405,105,22,409,564},},
{0},{0},{{8142,109,16,8142,616},},{{7927,18,23,13041,348,7924},{444,82,20,485,441},},{{10370,7,24,13059,667,7896},},{{7902,36,22,403,633},},{{8314,101,16,8142,697},},
{{7917,60,23,13041,691,288},{331,41,24,13059,575,331},},{{10758,5,18,10370,786},},{{10974,120,22,10275,687},{7917,91,18,7899,703},},{{303,72,24,13059,242,280},},
{{7915,91,22,299,633},},{0},{{10895,25,22,7927,606},},{{11931,122,18,12952,622},},{0},{{12980,89,20,8238,148},{7935,110,20,13073,656},},{{12952,120,24,13059,667,9861},
{10591,5,22,7894,606},},{{415,104,16,8142,469},},{{7951,106,23,13041,801,415},},{{7910,32,23,13041,774,339},{405,102,18,7935,590},},{{8597,45,24,13059,777,700},},
{{8310,11,18,10370,65},{403,35,23,13041,348,339},},{0},{0},{0},{{7914,65,24,13059,613,280},},{{7902,39,23,13041,637,339},},{0},{0},{0},{{331,42,23,13041,570,339},},{0},{{8193,99,22,409,633},
{8044,4294967295U,4294967295U,8044,0,8044},},{0},{{10286,120,20,9967,441},{275,38,23,13041,237,339},},{{7908,29,20,275,679},{1417,48,16,8332,358},},{{13053,81,20,13039,143},
{7935,107,20,406,652},},{{8918,85,20,485,625},},{{8890,84,24,13059,613,4745},{415,101,16,8142,469},},{0},{0},{{10915,28,16,10895,643},},{{7900,42,20,275,598},
{447,85,20,485,330},},{{7907,36,22,403,660},{406,99,24,13059,242,405},},{0},{0},{{409,99,16,8142,358},},{0},{{444,84,24,13059,464,4745},},{{4745,78,24,13059,575,4745},},
{{8314,99,23,13041,691,415},{299,74,19,7917,373},},{{8238,11,16,10591,122},},{{7899,69,22,299,660},{485,89,20,485,219},},{{9451,80,24,13059,667,4745},},
{{7918,74,18,7899,786},},{{7924,24,17,10915,474},{303,70,20,303,219},},{{7908,42,22,403,687},{1417,53,16,8332,358},},{0},{{8918,88,20,485,625},},
{{7896,6,23,13041,570,7895},},{{7919,28,23,13041,570,7924},},{{12952,114,17,11031,673},},{0},{{10381,11,23,13041,637,7895},},{0},{{9967,114,18,12952,257},},{0},{{406,102,17,8193,252},},
{0},{0},{{4745,83,24,13059,575,4745},},{0},{{8173,13,20,7893,719},{299,46,5,13056,275},},{{485,86,20,485,219},},{{7899,70,23,13041,664,288},},{{13052,67,2,7918,0},},
{0},{{11031,118,18,12952,649},},{0},{{9543,82,16,8890,697},{9543,79,17,8918,700},},{{7896,5,17,10381,585},},{0},{0},{{8890,82,17,8918,619},},{{969,58,23,13041,459,969},},
{{12308,120,23,13041,801,10286},},{{9861,119,16,11931,580},},{0},{{406,105,19,8314,262},},{{7910,41,20,275,762},},{{8509,53,22,1417,660},},{{403,42,16,7900,358},},
{{7914,74,20,303,598},},{{8173,10,20,7893,719},},{{4745,80,23,13041,570,444},},{0},{0},{{13027,112,20,9967,148},},{{11031,115,18,12952,649},},{{280,67,22,299,564},},
{0},{0},{0},{{8419,52,18,8509,649},},{{10286,113,19,10974,484},},{{7919,26,18,10942,590},},{0},{0},{0},{0},{{7910,44,20,275,762},},{{10915,18,20,7929,625},},{{8310,4,18,10370,65},},
{0},{0},{{10370,11,20,7893,652},},{{409,106,23,13041,348,415},},{0},{0},{{331,38,16,7900,580},},{0},{0},{{7915,72,17,7915,646},},{{1436,45,20,1436,219},},{0},{0},{{1417,47,20,1436,330},},
{{12980,9,20,8238,148},},{{8918,78,16,8890,643},{700,54,18,8509,590},},{{7894,5,16,10591,358},},{0},{0},{{10915,23,20,7929,625},},{0},{{13067,95,14,13065,0},},
{{406,111,16,8142,247},},{0},{0},{0},{{299,70,20,303,330},},{{10370,6,24,13059,667,7896},{444,77,17,8918,474},},{0},{0},{{8238,7,24,13059,116,7896},},{{8193,111,18,7935,649},
{1436,48,20,1436,219},},{{7918,70,23,13041,774,288},},{0},{{13021,80,20,485,148},},{0},{{7935,111,23,13041,664,415},},{0},{0},{0},{0},{{7900,38,16,7900,616},},{{12308,113,16,11931,807},},
{{9967,117,18,12952,257},},{{8310,10,23,13041,41,7895},{403,32,24,13059,353,331},},{0},{0},{{8509,47,22,1417,660},},{{10275,112,20,9967,330},{444,80,19,9543,484},},
{0},{{8173,4,16,10591,747},{7927,28,18,10942,368},},{{10758,7,17,10381,783},{331,43,24,13059,575,331},},{{7899,60,20,303,652},},{0},{{10974,122,17,11031,700},},
{0},{0},{0},{{10927,18,20,7929,762},{7896,10,19,10770,595},},{0},{{700,56,23,13041,570,969},},{{12952,118,24,13059,667,9861},{7893,2,1,12980,154},},{0},{{10381,15,22,7894,633},},
{{339,36,16,7900,469},},{{7900,37,23,13041,610,339},},{0},{{406,98,24,13059,242,405},},{0},{{403,37,20,275,330},},{{7914,67,24,13059,613,280},},{0},{0},{{485,71,20,13052,202},},
{0},{{7917,70,23,13041,691,288},},{0},{{280,72,22,299,564},},{{9543,86,20,485,679},},{0},{{11931,113,17,11031,619},{10286,122,19,10974,484},},{0},{{7896,9,20,7893,552},},
{{8890,86,24,13059,613,4745},},{{969,54,20,1436,441},},{{339,41,16,7900,469},},{{12952,117,20,9967,652},},{0},{{406,101,24,13059,242,405},},{0},{{7929,22,22,7927,231},},
{0},{{13039,78,2,9795,0},},{{10275,118,19,10974,373},},{{8142,101,18,7935,622},{4745,76,24,13059,575,4745},},{0},{{299,91,19,7917,373},},{{10942,20,16,10895,670},},
{{9451,82,24,13059,667,4745},},{0},{{13062,86,11,13021,0},},{0},{{8419,48,22,1417,633},},{{12987,15,0,8310,0},{7896,4,20,7893,552},},{0},{{9795,80,17,8918,783},
{969,59,20,1436,441},},{{12980,5,20,8238,148},{7935,102,16,8142,670},},{{12952,112,20,9967,652},},{0},{0},{{8597,50,18,8509,786},},{0},{{10770,9,16,10591,697},},
{0},{0},{0},{{409,102,20,406,330},},{0},{{444,89,20,485,441},},{{8314,104,18,7935,703},},{0},{0},{0},{{9451,87,20,13062,656},},{{8044,11,16,10591,747},},{{10286,112,24,13059,464,9861},},
{0},{{13024,20,20,7929,148},{7935,99,16,8142,670},},{{10927,24,16,10895,780},{7896,3,24,13059,575,7896},},{{9795,85,24,13059,777,4745},},{{10591,13,23,13041,610,7895},},
{0},{{10915,19,23,13041,637,7924},},{0},{{8521,49,17,8419,700},{406,107,20,406,219},},{{403,44,23,13041,348,339},},{0},{{409,107,20,406,330},},{0},{{7927,23,16,10895,358},},
{0},{{13046,42,2,7910,0},},{0},{0},{0},{{7915,73,20,303,625},},{{8193,107,23,13041,637,415},},{{8419,54,17,8419,646},},{0},{{10927,21,16,10895,780},},{{10286,115,20,9967,441},},
{{8918,77,23,13041,637,444},{700,49,17,8419,585},},{{415,109,17,8193,474},},{{12978,18,2,10927,0},{8890,76,20,485,598},},{{10381,6,18,10370,649},},
{{7951,111,16,8142,807},},{{447,78,18,9451,368},},{0},{0},{{288,67,23,13041,459,288},},{{13039,82,2,9795,0},{13026,103,22,7951,152},},{{7895,9,16,10591,469},},
{0},{{10370,5,23,13041,664,7895},},{{485,78,16,8890,247},},{{10942,26,18,10942,676},},{0},{{8193,104,17,8193,646},},{{7918,69,16,7914,780},{280,61,22,299,564},},
{0},{{7915,74,24,13059,640,280},},{{11931,120,23,13041,610,10286},{10286,118,20,9967,441},},{{700,52,19,8521,595},},{{275,93,20,275,219},},{{7893,6,22,7894,231},},
{0},{{7951,104,16,8142,807},{339,32,20,275,441},},{0},{0},{{9967,122,17,11031,252},},{0},{{13026,98,22,13069,152},{403,33,24,13059,353,331},},{0},{{288,60,20,303,441},},
{{10275,113,17,11031,363},},{{4745,88,19,9543,595},},{0},{{8314,102,16,8142,697},},{0},{0},{0},{0},{0},{0},{{7896,13,16,10591,580},},{{12992,64,20,303,148},},{{7919,18,22,7927,564},
{969,50,16,8332,469},},{{12980,94,20,8238,148},{7935,105,20,406,652},},{{13012,33,20,275,148},},{{12308,119,23,13041,801,10286},{12308,96,20,9967,789},},
{{10591,4,20,7893,598},},{0},{{10915,26,16,10895,643},},{0},{{8509,58,20,1436,652},{8509,45,23,13041,664,969},},{{8310,12,20,7893,20},{403,34,23,13041,348,339},},
{{10370,3,24,13059,667,7896},},{0},{{299,72,20,303,330},},{{7899,67,22,299,660},},{0},{0},{{10758,9,24,13059,777,7896},{8238,9,16,10591,122},},{0},{{7918,60,23,13041,774,288},},
{0},{{13021,78,20,485,148},},{0},{0},{0},{{10391,28,16,10895,697},{9795,76,20,485,762},},{{7894,13,1,12980,265},{339,38,19,7908,484},},{{7894,13,18,10370,368},
{415,100,22,409,453},},{0},{0},{{8597,54,17,8419,783},{7910,36,24,13059,777,331},},{{403,39,17,7902,363},},{{7907,39,20,275,652},},{0},{{7895,7,18,10370,479},
{288,72,22,299,453},},{{444,85,24,13059,464,4745},},{0},{0},{{10758,12,24,13059,777,7896},},{0},{{9451,83,24,13059,667,4745},},{{7915,69,17,7915,646},},{{8193,103,20,406,625},
{1436,56,18,8509,257},},{{1417,52,16,8332,358},},{{10895,22,17,10915,619},},{{10927,28,20,7929,762},{275,31,7,13074,170},},{{969,52,23,13041,459,969},},
{0},{{415,97,22,13067,437},},{{8890,80,17,8918,619},},{{12308,122,24,13059,804,9861},},{0},{0},{0},{0},{0},{{13026,104,22,7951,152},},{0},{0},{{10275,120,22,10275,342},{444,88,17,8918,474},},
{0},{{10942,22,23,13041,664,7924},},{{8238,15,23,13041,110,7895},{331,35,22,403,564},},{0},{0},{0},{{9543,78,23,13041,691,444},},{0},{0},{0},{{415,98,23,13041,459,415},},{{9795,82,24,13059,777,4745},
{7919,24,22,7927,564},},{0},{{10915,16,24,13059,640,7919},},{0},{0},{0},{0},{{409,100,23,13041,348,415},},{{8509,52,16,8332,670},},{0},{{10370,9,20,7893,652},},{0},{0},{{7899,73,22,299,660},
{485,82,23,13041,237,444},},{{11031,114,18,12952,649},{7918,65,20,303,762},},{0},{0},{0},{{7924,19,16,10895,469},},{0},{{10286,114,17,11031,474},},{{7919,21,22,7927,564},
{7893,10,23,13041,237,7895},},{{12980,11,20,8238,148},},{0},{{10381,7,23,13041,637,7895},},{{9861,115,22,10275,564},{339,93,22,403,453},},{0},{{10915,21,20,7929,625},},
{{8310,5,18,10370,65},},{{8509,49,16,8332,670},},{0},{{10370,4,20,7893,652},},{{7914,91,20,303,598},},{0},{{7899,74,18,7899,676},},{0},{{7917,75,23,13041,691,288},},
{{7917,63,22,299,687},},{{8044,12,23,13041,737,7895},},{{7924,22,16,10895,469},},{0},{{10286,117,19,10974,484},},{{13021,82,20,485,148},{8419,56,24,13059,640,700},},
{{10391,23,18,10942,703},{7935,109,24,13059,667,405},},{{8918,79,16,8890,643},},{0},{0},{{9861,112,23,13041,570,10286},},{0},{0},{{405,105,19,8314,595},},{0},{0},{{8142,109,23,13041,610,415},
{7914,70,20,303,598},},{{7895,11,23,13041,459,7895},},{{4745,89,22,447,564},},{0},{0},{{7917,72,22,299,687},},{{10758,5,17,10381,783},},{0},{0},{{1436,49,22,1417,231},},
{0},{0},{{8918,82,16,8890,643},{700,58,18,8509,590},},{0},{0},{{7894,9,22,7894,342},},{{415,104,23,13041,459,415},},{{7900,39,16,7900,616},{447,88,16,8890,358},},
{{7910,32,20,275,762},{405,102,17,8193,585},},{0},{{403,35,24,13059,353,331},},{{7907,35,23,13041,664,339},},{0},{0},{0},{{299,73,17,7915,363},},{0},{0},{{8332,58,18,8509,622},},
{{331,42,18,7907,590},},{{7915,65,24,13059,640,280},{1436,52,22,1417,231},},{0},{0},{{9543,84,20,485,679},{303,69,17,7915,252},},{{7908,29,23,13041,691,339},
{1417,48,19,8521,373},},{{7935,107,17,8193,673},},{0},{0},{{13056,89,3,13053,2},},{{12308,117,16,11931,807},},{{10915,28,23,13041,637,7924},},{{10381,14,20,13061,629},},
{{9967,113,24,13059,242,9861},},{{7910,35,24,13059,777,331},},{{8509,56,17,8419,673},},{0},{0},{{7927,24,18,10942,368},},{0},{0},{{331,93,24,13059,575,331},},{{13077,8,20,12978,140},
{10758,11,24,13059,777,7896},},{{11031,117,18,12952,649},{9451,80,23,13041,664,444},},{{7918,74,23,13041,774,288},},{{7924,24,18,10942,479},{303,70,23,13041,237,288},},
{{8044,6,23,13041,737,7895},{7915,66,20,303,625},},{{10895,23,20,7929,598},},{0},{{7896,6,20,7893,552},},{{7919,28,18,10942,590},},{{9795,78,17,8918,783},},
{{12978,15,2,10758,0},},{{10381,11,20,7893,625},},{{339,29,23,13041,459,339},},{{7910,38,24,13059,777,331},},{{8597,52,22,1417,770},},{{406,102,18,7935,257},},
{0},{{7929,21,20,7929,219},{7895,18,1,12980,376},},{{10370,13,16,10591,670},},{{8142,102,22,409,606},},{{7902,42,17,7902,646},{299,61,23,13041,348,288},},
{{485,86,19,9543,262},},{{10942,21,16,10895,670},},{0},{{7917,66,22,299,687},},{0},{{10895,16,20,7929,598},},{{9543,79,18,9451,703},},{{11931,117,23,13041,610,10286},
{11931,96,22,10275,606},},{0},{0},{{8890,82,18,9451,622},},{{969,58,18,8509,479},},{{12308,120,24,13059,804,9861},},{{339,30,22,403,453},},{{8597,49,22,1417,770},},
{0},{{13023,7,20,7893,148},},{{7929,26,20,7929,219},},{{403,42,19,7908,373},},{{7914,74,17,7915,619},},{0},{{4745,80,18,9451,590},},{0},{{8314,105,18,7935,703},
{299,64,22,299,342},},{0},{0},{0},{{303,61,23,13041,237,288},},{0},{{11931,118,22,10275,606},},{{8419,52,17,8419,646},},{0},{0},{{9795,84,24,13059,777,4745},},{0},{0},{{447,76,23,13041,348,444},},
{0},{{10915,18,23,13041,637,7924},},{{10770,5,22,7894,687},},{0},{0},{{10370,11,23,13041,664,7895},},{0},{{299,69,22,299,342},},{{13046,43,2,7910,0},},{{331,38,19,7908,595},},
{{485,80,16,8890,247},},{{8238,4,18,10370,134},},{{8044,15,16,10591,747},},{{1436,45,23,13041,237,969},},{{303,62,8,13072,178},},{0},{{1417,47,17,8419,363},},
{{9795,89,24,13059,777,4745},},{{10927,20,22,7927,770},},{{7894,5,23,13041,348,7895},},{{12978,19,2,10927,0},},{{10591,9,24,13059,613,7896},},{{10915,23,17,10915,646},},
{0},{0},{{406,111,19,8314,262},},{0},{{409,111,18,7935,368},},{{288,64,23,13041,459,288},},{{299,70,23,13041,348,288},},{{444,77,20,485,441},},{{8332,54,22,1417,606},
{485,77,16,8890,247},},{{7917,61,23,13041,691,288},},{{13052,72,2,7918,0},},{0},{{9451,76,23,13041,664,444},{7918,70,16,7914,780},},{{7924,20,23,13041,459,7924},},
{{7908,38,16,7900,697},},{{8419,58,24,13059,640,700},},{{7935,111,24,13059,667,405},{700,53,17,8419,585},},{{7896,15,16,10591,580},},{0},{0},{0},{0},{0},{{9967,117,23,13041,237,10286},},
{{8597,59,22,1417,770},{405,103,18,7935,590},},{{8521,58,16,8332,697},{7907,32,24,13059,667,331},},{{288,90,20,13071,447},},{0},{{10275,112,19,10974,373},
{444,80,20,485,441},},{0},{{7927,28,17,10915,363},},{{10758,7,20,7893,762},},{{8332,53,17,8419,619},},{{11031,122,22,10275,633},},{{10974,122,18,12952,703},},
{0},{0},{{303,74,18,7899,257},},{{10927,18,23,13041,774,7924},{7896,10,16,10591,580},},{0},{{969,49,16,8332,469},},{{415,106,22,409,453},},{0},{{7951,100,22,409,797},},
{{339,36,23,13041,459,339},},{{405,100,22,409,564},},{{7907,37,24,13059,667,331},},{{9967,118,24,13059,242,9861},},{0},{{403,37,17,7902,363},},{0},{0},{{4745,79,18,9451,590},},
{{8332,47,16,8332,616},},{0},{{10974,96,23,13041,691,10286},{7917,70,18,7899,703},},{{10758,10,24,13059,777,7896},{8238,10,16,10591,122},},{{7918,73,24,13059,777,280},
{280,72,19,7917,595},},{{9543,86,23,13041,691,444},},{{7915,67,17,7915,646},},{{11931,113,22,10275,606},{10286,122,20,9967,441},},{{8419,47,23,13041,637,969},
{1417,54,16,8332,358},},{{7896,9,23,13041,570,7895},},{0},{0},{0},{{12952,117,23,13041,664,10286},},{0},{{9967,115,24,13059,242,9861},},{{7910,37,24,13059,777,331},},{0},{0},{0},{{10275,118,22,10275,342},},
{{8142,101,17,8193,619},},{{8314,109,22,409,687},},{{13046,36,2,7910,0},{299,91,20,303,330},},{{10758,13,24,13059,777,7896},{8238,13,16,10591,122},},
{0},{0},{{8044,4,20,7893,719},},{{13059,107,15,13026,0},},{0},{0},{0},{{10391,24,16,10895,697},},{0},{{12952,112,17,11031,673},},{{12978,20,2,10927,0},},{{9861,120,22,10275,564},},
{{8597,50,17,8419,783},},{{447,80,18,9451,368},},{{10770,9,23,13041,691,7895},},{{406,104,17,8193,252},},{{403,43,22,403,342},},{{13039,84,2,9795,0},
{7914,73,22,299,606},},{{7895,3,20,7893,441},},{0},{{444,89,23,13041,459,444},},{{485,84,20,485,219},},{0},{{13017,106,20,406,148},},{0},{{11031,112,22,10275,633},},
{{10895,18,17,10915,619},},{0},{{12987,89,0,8310,0},},{{700,50,19,8521,595},},{{10927,24,23,13041,774,7924},},{0},{{10591,13,20,7893,598},{9861,117,22,10275,564},},
{0},{{10915,19,24,13059,640,7919},{447,77,18,9451,368},},{0},{{8521,49,18,8509,703},{406,107,23,13041,237,415},},{{7910,43,20,275,762},},{{7907,44,23,13041,664,339},},
{{7895,12,20,7893,441},},{{288,68,22,299,453},},{{8173,8,20,12978,709},},{{4745,86,19,9543,595},},{0},{{13017,111,20,406,148},},{0},{{11031,96,23,13041,637,10286},},
{{10974,118,23,13041,691,10286},{280,62,9,13072,519},},{{8193,107,20,406,625},},{{8419,54,20,1436,625},},{{9543,89,22,447,687},},{0},{{10286,115,23,13041,459,10286},},
{{9795,86,24,13059,777,4745},{969,40,20,13046,424},},{{415,109,22,409,453},},{{7919,20,20,7929,552},{7893,9,23,13041,237,7895},},{{10381,6,17,10381,646},},
{0},{{405,107,22,409,564},},{0},{{7910,92,20,13064,766},},{{8509,48,16,8332,670},},{{8310,6,24,13059,47,7896},},{0},{0},{{10370,5,18,10370,676},},{0},{{10942,26,23,13041,664,7924},},
{0},{{8238,51,20,13036,82},},{{7918,69,23,13041,774,288},},{{7924,23,16,10895,469},{303,91,23,13041,237,288},},{0},{{10286,118,17,11031,474},},{{8419,59,24,13059,640,700},
{1417,45,20,1436,330},},{{275,93,17,7902,252},},{0},{{10391,22,20,7929,679},},{{10591,11,24,13059,613,7896},{7951,104,23,13041,801,415},},{0},{{12308,112,22,10275,797},
{10381,3,24,13059,640,7896},},{{9967,122,20,9967,219},},{{8597,47,18,8509,786},{405,104,17,8193,585},},{{8310,9,24,13059,47,7896},},{{7907,33,24,13059,667,331},},
{0},{{10275,113,22,10275,342},},{0},{0},{0},{0},{{9451,78,22,447,660},},{0},{{8044,81,20,13039,713},{7915,90,20,13071,629},},{{8193,109,24,13059,640,405},{1436,54,18,8509,257},},
{{7908,36,23,13041,691,339},{1417,50,20,1436,330},},{{7896,13,19,10770,595},},{0},{{10391,19,20,7929,679},},{{7935,105,17,8193,673},{700,59,24,13059,575,700},},
{0},{0},{0},{{405,101,19,8314,595},},{0},{{7907,34,24,13059,667,331},},{{9967,119,24,13059,242,9861},},{{7929,18,24,13059,242,7919},{403,92,20,13064,336},},{{7914,66,22,299,606},},
{0},{{299,72,19,7917,373},},{0},{0},{0},{{10758,9,23,13041,774,7895},},{{8193,98,24,13059,640,405},},{{7918,72,24,13059,777,280},{7918,60,20,303,762},},{0},{0},{0},{0},{0},{{8890,85,23,13041,610,444},},
{{339,38,22,403,453},},{{7894,13,17,10381,363},},{{7900,43,22,403,606},{447,84,22,447,342},},{0},{{9967,112,24,13059,242,9861},},{{7929,23,24,13059,242,7919},
{403,39,18,7907,368},},{{7907,39,17,7902,673},},{0},{{7895,7,23,13041,459,7895},{288,72,19,7917,484},},{{8173,15,16,10591,747},},{0},{0},{0},{0},{{7918,75,24,13059,777,280},},
{{280,70,18,7899,590},},{{8193,103,17,8193,646},{1436,56,23,13041,237,969},},{{8419,49,16,8332,643},{1417,52,19,8521,373},},{{7924,25,20,7929,441},
{303,65,23,13041,237,288},},{0},{{275,42,22,403,231},},{{7935,103,22,409,660},},{{13012,29,20,275,148},{12952,115,22,10275,660},},{0},{0},{{7951,99,22,409,797},},
{{7910,39,24,13059,777,331},},{0},{{406,103,18,7935,257},},{0},{0},{{4745,82,23,13041,570,444},},{{13071,67,11,12992,0},},{{444,88,18,9451,479},},{{10758,15,24,13059,777,7896},},
{{10942,22,16,10895,670},{7902,30,24,13059,640,331},},{{280,69,22,299,564},},{0},{{9451,84,22,447,660},},{{7924,28,20,7929,441},},{{9543,78,18,9451,703},
{303,66,22,299,231},},{0},{{7908,93,24,13059,694,331},},{0},{{8890,83,18,9451,622},},{{7893,13,22,7894,231},},{0},{0},{0},{0},{{7910,42,17,7902,783},{405,111,19,8314,595},},
{0},{0},{0},{0},{0},{0},{{8314,106,22,409,687},},{{331,29,23,13041,570,339},},{0},{{10974,117,16,11931,697},},{0},{{8044,9,16,10591,747},},{0},{{10927,26,22,7927,770},},{{10286,114,18,12952,479},},
{0},{0},{0},{{10381,7,20,7893,625},{339,17,4,13075,380},},{{9861,115,19,10974,595},{339,93,19,7908,484},},{0},{{10915,21,17,10915,646},},{{8310,5,17,10381,59},},
{{8521,55,23,13041,691,969},},{0},{{7914,61,20,303,598},{4745,84,18,9451,590},},{{8142,106,22,409,606},{7914,91,23,13041,610,288},},{{7902,93,22,403,633},},
{0},{{10942,25,24,13059,667,7919},},{{7917,75,20,303,679},},{{8238,5,18,10370,134},},{{7915,75,20,303,625},{7915,60,23,13041,637,288},},{0},{0},{{10286,117,22,10275,453},},
{{8419,56,23,13041,637,969},},{{10391,23,23,13041,691,7924},},{0},{{415,111,17,8193,474},},{{339,33,22,403,453},},{{7894,6,23,13041,348,7895},},{0},{{10381,4,24,13059,640,7896},},
{0},{0},{0},{0},{{7895,11,16,10591,469},},{{8173,6,20,7893,719},},{{10942,28,24,13059,667,7919},{7902,36,16,7900,643},},{0},{{331,41,18,7907,590},},{{13052,73,2,7918,0},
{10758,5,20,7893,762},},{0},{0},{{1436,49,17,8419,252},},{{7908,39,16,7900,697},},{0},{{700,58,23,13041,570,969},},{{275,37,22,403,231},},{0},{{12952,120,22,10275,660},
{10591,5,24,13059,613,7896},},{0},{{7900,39,23,13041,610,339},{447,88,23,13041,348,444},},{0},{0},{{8310,11,24,13059,47,7896},},{{7907,35,24,13059,667,331},},{0},{{7929,19,24,13059,242,7919},},
{{10275,115,17,11031,363},},{{299,73,22,299,342},},{0},{0},{{8332,58,23,13041,610,969},},{{280,74,22,299,564},},{{8044,3,24,13059,742,7896},{1436,52,19,8521,262},},
{{8193,99,24,13059,640,405},},{{10895,26,16,10895,616},},{{303,69,22,299,231},},{{7896,11,16,10591,580},},{{7935,107,18,7935,676},},{0},{{8890,84,18,9451,622},},
{0},{0},{{10591,6,20,7893,598},},{0},{{7907,36,24,13059,667,331},{406,99,22,409,231},},{{405,99,24,13059,575,405},},{{8509,56,20,1436,652},{7929,16,24,13059,242,7919},},
{{8310,14,20,13061,27},{403,36,19,7908,373},},{{7895,4,24,13059,464,7896},{288,75,20,303,441},},{{7927,24,17,10915,363},{444,84,22,447,453},},
{{4745,78,18,9451,590},},{0},{0},{{7899,69,16,7914,670},},{{11031,117,23,13041,637,10286},{9451,80,18,9451,676},},{{7918,74,24,13059,777,280},{280,73,17,7915,585},},
{{7924,24,23,13041,459,7924},{303,70,18,7899,257},},{{8044,6,20,7893,719},{7915,66,23,13041,637,288},},{{13021,76,20,485,148},},{0},{{11931,112,20,9967,598},
{275,43,19,7908,262},},{{7919,28,17,10915,585},},{{9795,78,20,485,762},},{{10591,3,20,7893,598},{9861,122,19,10974,595},},{{10381,11,17,10381,646},},
{{339,29,20,275,441},},{{9967,114,24,13059,242,9861},},{{8597,52,17,8419,783},},{{403,41,17,7902,363},},{0},{{7929,21,17,10915,252},},{{4745,83,18,9451,590},},
{0},{{7902,42,18,7907,649},{299,61,20,303,330},},{{13046,37,2,7910,0},},{{10942,21,23,13041,664,7924},},{{10974,113,20,9967,679},{280,68,19,7917,595},},
{0},{0},{{8193,101,20,406,625},},{{9543,82,22,447,687},{9543,79,23,13041,691,444},},{{11931,117,20,9967,598},},{{7908,41,20,275,679},{1417,58,22,1417,342},},
{{9795,83,20,485,762},},{0},{{7919,25,24,13059,575,7919},{969,58,17,8419,474},},{{12978,21,2,10927,0},},{0},{0},{{7900,44,22,403,606},{447,83,22,447,342},},
{{7907,42,20,275,652},},{{7929,26,19,10391,262},{403,31,8,13074,289},},{{10770,10,23,13041,691,7895},},{{7914,74,18,7899,622},},{0},{0},{0},{{8314,105,17,8193,700},},
{{8238,1,22,12987,73},{331,37,23,13041,570,339},},{{13052,70,2,7918,0},},{0},{{303,61,20,303,219},},{0},{{7908,44,20,275,679},},{{8419,52,20,1436,625},},
{0},{0},{0},{0},{0},{0},{0},{{10915,18,18,10942,649},},{0},{{8521,48,20,1436,679},},{0},{{8509,50,16,8332,670},},{0},{{299,69,19,7917,373},},{{444,78,22,447,453},},{{331,38,22,403,564},},
{{10942,24,24,13059,667,7919},{485,80,19,9543,262},},{{7918,67,20,303,762},{280,63,22,299,564},},{{8044,15,23,13041,737,7895},},{0},{{8419,57,20,13057,629},},
{0},{0},{{10391,20,24,13059,694,7919},},{0},{{8890,88,23,13041,610,444},{8890,77,22,447,606},},{0},{{12308,114,17,11031,810},},{{10915,23,18,10942,649},},{0},{{8521,53,20,1436,679},},
{{9967,120,20,9967,219},{406,111,22,409,231},},{0},{{8310,7,24,13059,47,7896},{7929,28,16,10895,247},},{{13013,53,20,1436,148},},{{8173,7,17,10381,752},
{7927,19,23,13041,348,7924},},{{444,77,23,13041,459,444},},{0},{0},{0},{{11031,121,20,13063,629},},{0},{{7924,20,16,10895,469},{303,73,18,7899,257},},{0},{0},{{700,53,20,1436,552},},
{0},{0},{0},{{10591,10,24,13059,613,7896},},{0},{{7951,107,23,13041,801,415},},{{9967,117,20,9967,219},},{{405,103,23,13041,570,415},},{{8310,10,24,13059,47,7896},{403,32,23,13041,348,339},},
{{13013,50,20,1436,148},},{{8509,47,24,13059,667,700},},{0},{0},{{7902,38,23,13041,637,339},},{{13017,99,20,406,148},{10758,7,23,13041,774,7895},},{{8332,53,20,1436,598},},
{0},{{10974,122,23,13041,691,10286},},{0},{0},{{9543,85,22,447,687},},{{275,39,23,13041,237,339},},{0},{0},{{8918,84,22,447,633},{700,56,24,13059,575,700},},{0},{{10381,15,24,13059,640,7896},},
{{10591,7,17,10381,619},},{{7910,34,20,275,762},{405,100,17,8193,585},},{0},{0},{0},{0},{0},{{7895,5,24,13059,464,7896},},{0},{{8332,56,20,1436,598},{8332,47,23,13041,610,969},},
{{8314,98,23,13041,691,415},},{{10974,96,20,9967,679},{7917,70,17,7915,700},},{{331,44,22,403,564},},{{1436,58,18,8509,257},},{{9543,86,18,9451,703},},
{{7915,67,18,7899,649},},{0},{{8419,47,16,8332,643},{1417,54,23,13041,348,969},},{{7935,101,17,8193,673},},{0},{0},{0},{{12952,117,18,12952,676},},{0},{{10381,12,20,7893,625},},
{{8597,53,20,1436,762},},{{7929,22,24,13059,242,7919},{403,38,18,7907,368},},{{8521,47,24,13059,694,700},},{{7895,6,24,13059,464,7896},},{{288,73,17,7915,474},},
{{8142,101,20,406,598},},{0},{{13046,93,2,7910,0},},{{8238,13,23,13041,110,7895},{331,33,22,403,564},},{0},{{7917,67,24,13059,694,280},},{{8044,4,17,10381,752},
{7915,68,22,299,633},},{0},{{8419,48,16,8332,643},},{0},{0},{{10391,24,23,13041,691,7924},},{{700,47,16,8332,580},},{{12952,112,18,12952,676},},{0},{{10381,9,20,7893,625},},
{{8597,50,20,1436,762},},{{447,80,17,8918,363},},{{7907,93,23,13041,664,339},{7907,43,17,7902,673},},{{406,104,22,409,231},},{{8509,54,20,1436,652},},
{0},{0},{{8173,11,22,7894,731},},{0},{{485,84,23,13041,237,444},},{{10942,23,16,10895,670},{7902,44,23,13041,637,339},},{0},{0},{{280,66,24,13059,575,280},},{{10895,18,20,7929,598},},
{0},{{12987,0,0,8310,0},},{{700,50,16,8332,580},},{0},{0},{{969,56,22,1417,453},},{0},{{447,77,23,13041,348,444},},{0},{{8521,49,23,13041,691,969},{406,107,18,7935,257},},
{{7910,43,23,13041,774,339},},{{7929,24,20,7929,219},},{0},{0},{{7927,23,22,7927,342},},{{4745,86,22,447,564},},{0},{0},{{8332,50,16,8332,616},},{0},{{10974,118,16,11931,697},},
{0},{{8419,54,23,13041,637,969},},{0},{0},{{10286,115,18,12952,479},},{{10391,21,24,13059,694,7919},},{0},{{7919,20,19,10391,595},{7893,9,16,10591,247},},{0},{{7951,111,22,409,797},},
{{405,107,19,8314,595},},{0},{0},{0},{0},{0},{{409,104,22,409,342},},{{10370,5,17,10381,673},},{{8332,49,16,8332,616},},{{10942,26,24,13059,667,7919},},{{331,17,5,13075,497},},
{{8238,6,22,7894,103},},{{8044,13,16,10591,747},},{{7924,23,23,13041,459,7924},{303,91,16,7914,247},},{{7915,74,22,299,633},{7915,63,23,13041,637,288},},
{{10286,118,18,12952,479},{275,35,22,403,231},},{0},{0},{{7893,6,16,10591,247},},{{10391,22,23,13041,691,7924},},{0},{{12952,122,18,12952,676},},{0},{{9967,122,23,13041,237,10286},},
{{8597,47,23,13041,774,969},{405,104,20,406,552},},{{8310,9,23,13041,41,7895},},{0},{{409,109,22,409,342},},{{7895,10,16,10591,469},},{0},{{7902,37,16,7900,643},},
{{8314,102,22,409,687},},{0},{{7899,61,22,299,660},},{{7917,90,20,13071,683},},{0},{0},{{7908,36,16,7900,697},{1417,50,19,8521,373},},{{10895,24,16,10895,616},},
{0},{{10391,19,17,10915,700},},{{700,59,23,13041,570,969},},{0},{0},{{7900,93,16,7900,616},},{{405,101,20,406,552},},{{7900,36,23,13041,610,339},},{{7907,29,24,13059,667,331},},
{{8521,56,16,8332,697},},{{8509,45,24,13059,667,700},},{0},{0},{0},{{444,86,18,9451,479},},{0},{0},{{10758,9,18,10370,786},},{{8193,98,23,13041,637,415},{1436,53,17,8419,252},},
{0},{{10895,21,16,10895,616},{7924,26,24,13059,464,7919},},{0},{0},{{8918,86,23,13041,637,444},},{0},{0},{{969,55,22,1417,453},},{{7894,13,20,7893,330},{415,100,16,8142,469},},
{0},{{10381,13,17,10381,646},},{{406,100,18,7935,257},},{{7910,30,23,13041,774,339},{405,98,24,13059,575,405},},{{7907,39,18,7907,676},},{0},{{7895,7,24,13059,464,7896},},
{0},{{4745,77,22,447,564},},{{10942,19,20,7929,652},},{0},{{7899,68,16,7914,670},{485,88,18,9451,257},},{0},{{7917,68,24,13059,694,280},{280,70,23,13041,570,288},},
{{9543,77,18,9451,703},},{{7908,43,24,13059,694,331},{1417,52,22,1417,342},},{{7924,25,23,13041,459,7924},{303,65,20,303,219},},{{7896,7,22,7894,564},},
{{275,42,17,7902,252},},{0},{0},{0},{{12308,122,18,12952,813},},{0},{0},{0},{{9967,96,23,13041,237,10286},{8521,45,24,13059,694,700},},{0},{{403,29,24,13059,353,331},},{{4745,82,18,9451,590},},
{{8142,103,17,8193,619},{409,103,22,409,342},},{{444,88,23,13041,459,444},},{0},{{7902,43,20,275,625},},{{7917,65,24,13059,694,280},{280,69,17,7915,585},},
{0},{{11031,113,24,13059,640,9861},},{{7924,28,17,10915,474},},{0},{0},{0},{{10391,26,16,10895,697},},{0},{{9795,82,22,447,770},{7919,24,24,13059,575,7919},},{0},{0},{{10915,16,23,13041,637,7924},
{8597,48,17,8419,783},},{{8521,50,24,13059,694,700},{406,106,23,13041,237,415},},{{7910,42,18,7907,786},{405,111,16,8142,580},},{0},{0},{{7895,13,1,12980,376},},
{0},{0},{0},{0},{{331,29,20,275,552},},{{13017,104,20,406,148},},{{10974,117,23,13041,691,10286},{280,64,24,13059,575,280},},{0},{0},{0},{0},{{10286,114,23,13041,459,10286},},{{7919,21,24,13059,575,7919},},
{{8918,76,23,13041,637,444},},{{10591,15,20,7893,598},},{0},{{9861,115,16,11931,580},{339,93,16,7900,469},},{0},{0},{{8310,5,20,7893,20},},{{8521,55,20,1436,679},},
{{7895,14,20,13061,447},{288,66,23,13041,459,288},},{0},{{409,105,19,8314,373},},{0},{0},{{13017,109,20,406,148},},{0},{{8238,5,17,10381,128},{7917,63,24,13059,694,280},},
{{1436,50,19,8521,262},},{{8193,105,20,406,625},},{{10895,28,20,7929,598},},{{11931,121,20,13063,602},},{{8419,56,18,8509,649},},{{10391,23,24,13059,694,7919},
{7935,109,18,7935,676},},{{8918,79,22,447,633},{700,55,20,1436,552},},{{415,111,18,7935,479},},{{7919,22,20,7929,552},{7893,7,19,10770,262},},
{{7894,6,16,10591,358},},{{10915,22,18,10942,649},},{{7900,32,22,403,606},},{0},{0},{0},{0},{{288,63,22,299,453},},{0},{{10370,7,22,7894,660},},{0},{{7917,60,24,13059,694,280},
{331,41,23,13041,570,339},},{0},{{8193,110,20,13073,629},},{{10974,120,24,13059,694,9861},{280,90,20,13071,558},},{{7924,21,16,10895,469},{303,72,18,7899,257},},
{{7908,39,23,13041,691,339},},{0},{{8918,82,22,447,633},{700,58,20,1436,552},},{{11931,122,24,13059,613,9861},{275,37,19,7908,262},},{{7919,19,20,7929,552},},
{{7894,9,16,10591,358},},{0},{{12308,118,23,13041,801,10286},},{0},{{13023,12,20,7893,148},},{0},{0},{{8509,59,22,1417,660},{288,91,19,7917,484},},{0},{{10275,115,18,12952,368},},
{0},{0},{{7899,64,20,303,652},{7899,63,23,13041,664,288},},{{8332,58,20,1436,598},},{{280,74,19,7917,595},},{0},{0},{0},{0},{{7896,11,23,13041,570,7895},},{0},{0},{{8890,84,23,13041,610,444},},
{{9795,77,22,447,770},},{{12308,117,22,10275,797},},{{10591,6,23,13041,610,7895},},{0},{{9967,113,18,12952,257},{406,99,17,8193,252},},{{7910,35,22,403,770},},
{{8509,56,23,13041,664,969},},{{403,36,22,403,342},},{0},{{7927,24,20,7929,330},{444,84,19,9543,484},},{{4745,78,17,8918,585},},{{10942,18,17,10915,673},},
{0},{0},{{11031,117,20,9967,625},{9451,80,17,8918,673},},{{280,73,20,303,552},},{{7924,24,24,13059,464,7919},},{{8044,6,17,10381,752},{1436,59,24,13059,242,700},},
{{7908,42,24,13059,694,331},},{0},{{275,43,20,275,219},},{{969,53,23,13041,459,969},},{{9795,78,23,13041,774,444},},{{9861,122,22,10275,564},},{{7894,15,17,10381,363},},
{0},{{7910,38,22,403,770},},{0},{{403,41,22,403,342},},{{7907,41,17,7902,673},},{{7929,21,18,10942,257},},{{4745,83,23,13041,570,444},},{{10275,95,12,13065,323},},
{{7902,42,23,13041,637,339},{7902,29,20,275,625},},{0},{0},{{280,68,20,303,552},},{{7917,66,24,13059,694,280},{331,32,20,275,552},},{0},{{11031,118,24,13059,640,9861},
{8193,101,17,8193,646},},{0},{{11931,117,17,11031,619},{275,44,20,275,219},},{{7908,41,23,13041,691,339},},{0},{0},{{12952,113,18,12952,676},{415,99,23,13041,459,415},},
{{12978,10,2,10758,0},},{0},{0},{{447,83,19,9543,373},},{{7907,42,23,13041,664,339},},{0},{{10770,10,16,10591,697},},{{409,101,23,13041,348,415},},{0},{0},{0},{{8314,105,20,406,679},},
{{331,37,20,275,552},},{{485,83,23,13041,237,444},},{{11031,115,24,13059,640,9861},},{{9451,86,18,9451,676},{280,67,24,13059,575,280},},{0},{0},{0},{{7935,98,22,409,660},},
{0},{{7919,26,24,13059,575,7919},{7893,11,23,13041,237,7895},},{0},{0},{0},{0},{0},{{10770,5,16,10591,697},},{{8521,48,23,13041,691,969},},{{7895,15,17,10381,474},{288,69,20,303,441},},
{{8509,50,23,13041,664,969},},{0},{{299,69,16,7914,358},},{{7927,22,16,10895,358},{444,78,19,9543,484},},{0},{{7899,75,23,13041,664,288},{485,80,22,447,231},},
{{7918,67,23,13041,774,288},},{{10974,119,16,11931,697},},{0},{0},{0},{0},{0},{{10927,20,16,10895,780},},{{8890,88,20,485,598},},{{7919,23,17,10915,585},{969,47,23,13041,459,969},},
{{12308,114,22,10275,797},{10381,5,20,7893,625},},{{9861,113,23,13041,570,10286},},{0},{{8521,53,17,8419,700},},{0},{0},{{7929,28,19,10391,262},},{{7914,69,22,299,606},
{7914,63,20,303,598},},{{8173,7,22,7894,731},{7927,19,16,10895,358},},{0},{{8332,54,16,8332,616},{485,77,22,447,231},},{0},{{7917,73,20,303,679},
{7917,61,24,13059,694,280},},{0},{0},{0},{0},{{10286,119,18,12952,479},},{{700,53,23,13041,570,969},},{0},{{7893,5,16,10591,247},},{0},{0},{{415,105,23,13041,459,415},},{{7951,107,16,8142,807},},
{0},{{405,103,20,406,552},},{0},{{7907,32,23,13041,664,339},},{0},{0},{{8142,111,16,8142,616},},{{7902,38,16,7900,643},},{0},{{8332,53,23,13041,610,969},},{0},{{10974,122,24,13059,694,9861},},
{0},{0},{{7908,37,16,7900,697},{1417,49,17,8419,363},},{{275,39,16,7900,247},},{0},{{969,49,22,1417,453},},{{13053,40,20,13046,143},{7935,104,22,409,660},},
{{12952,118,18,12952,676},},{{7951,100,16,8142,807},},{{13012,38,20,275,148},{10591,7,18,10370,622},},{{8597,56,16,8332,780},},{0},{0},{0},{{8310,13,22,7894,34},},
{{13039,77,2,9795,0},{7914,67,17,7915,619},},{0},{0},{{10275,117,23,13041,348,10286},{10275,96,22,10275,342},},{0},{0},{{8238,10,22,7894,103},},{{1436,58,23,13041,237,969},},
{{7918,73,23,13041,774,288},},{{7915,67,23,13041,637,288},},{{11931,113,24,13059,613,9861},},{{10895,20,22,7927,606},},{{7935,101,22,409,660},},{0},{0},{0},{{415,103,16,8142,469},},
{0},{{10381,12,23,13041,637,7895},},{{406,101,18,7935,257},},{0},{{7907,38,18,7907,676},},{{409,97,22,13067,326},},{{288,73,20,303,441},},{{7927,26,17,10915,363},},
{{8314,109,16,8142,697},{7902,41,24,13059,640,331},},{0},{{10758,13,18,10370,786},},{0},{{9451,82,22,447,660},},{{8044,4,18,10370,757},},{{8193,102,22,409,633},},
{0},{{9543,76,24,13059,694,4745},},{0},{{11931,114,20,9967,598},},{{700,47,23,13041,570,969},},{0},{0},{{10381,9,17,10381,646},},{0},{{447,80,20,485,330},},{{7907,93,20,275,652},
{7907,43,18,7907,676},},{0},{0},{0},{{13013,47,20,1436,148},},{0},{0},{{485,84,18,9451,257},},{{7902,44,20,275,625},},{{10974,115,20,9967,679},{7917,64,24,13059,694,280},},
{0},{{11031,112,24,13059,640,9861},},{{10895,18,23,13041,610,7924},},{0},{{11931,119,20,9967,598},{10286,112,18,12952,479},},{0},{0},{{7893,12,20,7893,219},},{{969,56,17,8419,474},},
{0},{{447,77,20,485,330},},{0},{{8521,49,24,13059,694,700},},{{7910,43,18,7907,786},},{{7929,24,23,13041,237,7924},},{0},{0},{{10370,10,23,13041,664,7895},},{0},{0},{{8314,107,17,8193,700},},
{{7899,72,24,13059,667,280},},{0},{{13027,114,20,9967,148},{280,65,24,13059,575,280},},{{303,63,20,303,219},},{0},{{7924,16,22,7927,453},},{0},{0},{0},{0},{{7894,4,23,13041,348,7895},},
{0},{{9861,114,16,11931,580},},{{405,107,16,8142,580},},{{10915,20,22,7927,633},{447,78,24,13059,353,4745},},{0},{{8509,48,22,1417,660},{403,17,5,13075,275},},
{{8310,6,22,7894,34},},{{8142,107,20,406,598},},{{409,104,17,8193,363},},{0},{0},{0},{{13027,119,20,9967,148},},{0},{{13036,48,2,8597,0},},{{9451,88,22,447,660},
{9451,77,23,13041,664,444},},{{7915,74,17,7915,646},},{0},{0},{0},{0},{{10391,22,18,10942,703},},{{10591,11,22,7894,606},},{{7894,7,16,10591,358},{415,110,20,13073,447},},
{{10915,25,22,7927,633},},{0},{{8597,47,20,1436,762},{405,104,23,13041,570,415},},{{8310,9,18,10370,65},{403,33,23,13041,348,339},},{0},{{409,109,19,8314,373},},
{{7895,10,19,10770,484},},{{8173,5,17,10381,752},{444,83,22,447,453},},{{7902,37,23,13041,637,339},},{0},{0},{0},{0},{0},{{8193,109,22,409,633},},{0},{{10895,24,23,13041,610,7924},
{303,75,24,13059,242,280},},{{10927,19,23,13041,774,7924},},{{10391,19,18,10942,703},},{{8918,83,16,8890,643},},{{7894,10,16,10591,358},{415,107,20,406,441},},
{0},{0},{{339,37,23,13041,459,339},},{{7900,36,16,7900,616},},{{7907,34,22,403,660},},{0},{{13013,48,20,1436,148},},{{7929,18,23,13041,237,7924},},{0},{0},{{10275,114,20,9967,330},},
{0},{0},{{10758,9,17,10381,783},},{{1436,53,20,1436,219},},{{7918,72,18,7899,786},},{{303,68,24,13059,242,280},},{0},{{275,41,19,7908,262},},{{8918,86,16,8890,643},},
{0},{0},{0},{0},{{7900,43,16,7900,616},{447,84,16,8890,358},},{{10381,13,18,10370,649},},{{9967,112,18,12952,257},{7907,30,24,13059,667,331},},{{7910,36,18,7907,786},},
{0},{0},{0},{{10275,119,20,9967,330},},{{4745,77,19,9543,595},},{{10942,19,23,13041,664,7924},},{0},{{7899,68,23,13041,664,288},},{{7918,75,22,299,770},},{{280,70,20,303,552},},
{{9543,80,22,447,687},{9543,77,23,13041,691,444},},{{1436,56,24,13059,242,700},},{0},{0},{{11931,115,17,11031,619},},{0},{0},{{8890,80,24,13059,613,4745},},{{12308,122,23,13041,801,10286},
{10381,10,22,7894,633},},{{9861,121,20,13063,558},{339,43,16,7900,469},},{0},{0},{0},{{8509,55,22,1417,660},},{{7929,20,18,10942,257},},{{7914,72,24,13059,613,280},
{4745,82,17,8918,585},},{{8142,103,20,406,598},{409,103,19,8314,373},},{0},{{485,85,23,13041,237,444},},{{7902,43,23,13041,637,339},{7902,30,22,403,633},},
{{10974,114,17,11031,700},},{0},{{8044,10,17,10381,752},{7915,70,18,7899,649},},{{7924,28,18,10942,479},},{{9543,78,24,13059,694,4745},},{0},{0},{0},{{10927,25,23,13041,774,7924},},
{{9795,82,17,8918,783},{969,57,20,13057,447},},{{12978,11,2,10758,0},{9861,118,20,9967,552},},{0},{{8597,48,20,1436,762},},{{447,82,17,8918,363},},
{{7910,42,23,13041,774,339},},{0},{{10770,11,16,10591,697},{403,30,24,13059,353,331},},{0},{{7895,13,17,10381,474},},{0},{0},{{299,67,16,7914,358},},{0},{{7899,73,24,13059,667,280},},
{{11031,114,24,13059,640,9861},},{0},{{1436,47,16,8332,247},},{0},{0},{{700,48,16,8332,580},},{0},{{8918,76,20,485,625},},{{9861,96,24,13059,575,9861},{7894,3,20,7893,330},},
{0},{{447,79,19,9543,373},},{0},{0},{{10770,6,16,10591,697},},{0},{{288,66,20,303,441},},{0},{{409,105,20,406,330},},{{7902,93,24,13059,640,331},{299,68,16,7914,358},},
{0},{{7899,74,24,13059,667,280},},{{10942,25,23,13041,664,7924},{8332,48,16,8332,616},},{{8238,5,20,7893,89},{331,30,22,403,564},},{{1436,50,16,8332,247},},
{{7918,68,23,13041,774,288},},{0},{0},{{8419,56,17,8419,646},{7908,32,22,403,687},},{{7935,109,23,13041,664,415},},{{10927,23,16,10895,780},},{{415,111,23,13041,459,415},},
{{7919,22,23,13041,570,7924},{7893,7,16,10591,247},},{{7951,105,23,13041,801,415},},{0},{{12308,115,20,9967,789},{10381,4,22,7894,633},},{{13041,118,13,12308,0},},
{0},{0},{{409,110,20,13073,336},},{0},{{7927,18,16,10895,358},{444,82,19,9543,484},},{{10370,7,17,10381,673},},{0},{{331,41,20,275,552},},{0},{{9451,79,20,485,652},},
{0},{{7924,21,19,10391,484},{303,72,17,7915,252},},{{7915,91,17,7915,646},},{0},{0},{{7896,12,22,7894,564},{275,37,16,7900,247},},{{7919,19,17,10915,585},
{7893,4,16,10591,247},},{0},{0},{{12308,118,20,9967,789},},{{339,34,20,275,441},},{0},{{8597,58,16,8332,780},},{0},{{288,91,22,299,453},},{{7929,19,18,10942,257},
{403,93,22,403,342},},{{10275,115,23,13041,348,10286},},{0},{{7902,39,16,7900,643},},{0},{0},{{280,74,16,7914,580},},{{331,42,24,13059,575,331},},{{8044,3,23,13041,737,7895},},
{{10895,26,22,7927,606},},{{303,69,24,13059,242,280},},{{275,38,16,7900,247},},{0},{0},{{8890,84,20,485,598},},{{969,48,16,8332,469},},{{7951,103,16,8142,807},
{339,39,20,275,441},},{{12952,119,24,13059,667,9861},{10591,6,18,10370,622},},{0},{0},{{7910,29,23,13041,774,339},{405,99,18,7935,590},},{{7929,16,22,7927,231},},
{0},{{8142,99,16,8142,616},},{{7895,4,23,13041,459,7895},},{{4745,78,20,485,552},},{{10942,18,18,10942,676},},{{8314,99,16,8142,697},{299,74,20,303,330},},
{{7917,69,20,303,679},{331,93,18,7907,590},},{{10758,11,22,7894,770},},{{280,73,23,13041,570,288},},{{303,70,24,13059,242,280},},{{1436,59,23,13041,237,969},},
{0},{0},{0},{{969,53,16,8332,469},},{{7935,100,20,406,652},},{{12952,114,24,13059,667,9861},},{{7894,15,20,7893,330},{415,102,16,8142,469},},{0},{0},{0},{{10770,15,20,7893,679},},
{{7907,41,22,403,660},{406,102,24,13059,242,405},},{0},{{4745,83,20,485,552},},{0},{{7902,42,24,13059,640,331},},{0},{0},{{7899,70,16,7914,670},},{0},{{8044,5,18,10370,757},},
{{9451,85,24,13059,667,4745},{8193,101,18,7935,649},},{0},{{9543,79,24,13059,694,4745},{303,67,20,303,219},},{{7908,41,18,7907,703},{1417,58,16,8332,358},},
{0},{0},{{8890,82,24,13059,613,4745},{415,99,16,8142,469},},{{7893,14,20,13061,225},},{{13012,42,20,275,148},},{0},{0},{{7907,42,18,7907,676},{406,105,24,13059,242,405},},
{0},{{8509,53,17,8419,673},},{{7914,74,24,13059,613,280},{409,101,16,8142,358},},{{288,70,17,7915,474},},{0},{{10275,122,16,11931,358},{4745,80,24,13059,575,4745},},
{{7899,91,16,7914,670},{299,62,9,13072,297},},{{331,37,17,7902,585},},{{485,83,20,485,219},},{0},{{7918,64,22,299,770},},{{7924,18,17,10915,474},},
{0},{0},{{10927,27,20,13060,766},},{{10286,113,24,13059,464,9861},},{{7893,11,20,7893,219},},{{9795,84,18,9451,786},},{0},{0},{0},{0},{{405,109,16,8142,580},},{{8521,48,18,8509,703},},
{{7895,15,18,10370,479},{288,69,23,13041,459,288},},{{13039,80,2,9795,0},{13026,101,22,7951,152},},{{4745,85,24,13059,575,4745},},{{8142,105,20,406,598},},
{{7927,22,19,10391,373},{444,78,16,8890,469},},{0},{{10942,24,18,10942,676},{7899,75,24,13059,667,280},},{{7918,67,18,7899,786},},{{13027,117,20,9967,148},},
{{7915,72,22,299,633},{7915,61,23,13041,637,288},},{0},{{9543,88,16,8890,697},},{0},{0},{{10391,20,23,13041,691,7924},},{{8890,88,17,8918,619},{8890,77,16,8890,616},},
{{7919,23,18,10942,590},{969,47,20,1436,441},},{{7951,110,20,13073,793},},{{10591,9,18,10370,622},{9861,113,16,11931,580},},{0},{{8521,53,18,8509,703},},
{{7910,93,22,403,770},},{0},{{7929,28,22,7927,231},},{{7914,63,23,13041,610,288},},{0},{{10370,6,20,7893,652},},{0},{0},{{7917,73,17,7915,700},},{{10758,4,22,7894,770},
{8238,7,17,10381,128},},{{13036,49,2,8597,0},},{0},{{303,46,4,13056,158},},{0},{{8419,58,22,1417,633},},{0},{{7919,16,22,7927,564},},{0},{{339,35,23,13041,459,339},},
{{415,105,20,406,441},},{{7900,38,23,13041,610,339},{447,89,23,13041,348,444},},{0},{{10915,24,20,7929,625},},{0},{{10770,3,20,7893,679},},{0},{{10275,112,24,13059,353,9861},},
{0},{{8314,103,20,406,679},},{0},{{331,43,19,7908,595},},{0},{0},{0},{{1436,55,20,1436,219},},{{1417,49,18,8509,368},},{{303,74,24,13059,242,280},},{0},{{10391,18,18,10942,703},},
{{8918,84,16,8890,643},},{{12952,118,23,13041,664,10286},{7894,11,16,10591,358},},{0},{{10591,7,23,13041,610,7895},},{0},{{7900,37,16,7900,616},},{{7907,37,18,7907,676},},
{{9967,118,22,10275,231},},{{403,37,24,13059,353,331},},{{7914,67,20,303,598},},{{7895,5,18,10370,479},{288,74,22,299,453},},{{299,75,23,13041,348,288},},
{{10275,117,20,9967,330},},{{7899,66,20,303,652},},{0},{{331,44,24,13059,575,331},},{{1436,58,20,1436,219},},{{7918,73,18,7899,786},{7918,61,22,299,770},},
{0},{{12992,91,20,303,148},},{0},{0},{0},{0},{0},{{12952,117,24,13059,667,9861},},{0},{0},{{9967,115,22,10275,231},{406,101,17,8193,252},},{{7910,37,18,7907,786},},{{8521,47,18,8509,703},},
{{7895,6,22,7894,453},},{{288,73,23,13041,459,288},},{{8173,40,20,13046,713},{7927,26,20,7929,330},},{0},{0},{{10758,13,17,10381,783},{331,33,24,13059,575,331},},
{{10942,20,23,13041,664,7924},},{{11031,119,20,9967,625},{9451,82,17,8918,673},},{{10974,112,17,11031,700},},{0},{0},{{9543,83,20,485,679},{9543,76,23,13041,691,444},},
{0},{{11931,114,23,13041,610,10286},},{{9795,80,22,447,770},},{{12952,112,24,13059,667,9861},},{{7893,15,17,10381,252},},{{10381,9,18,10370,649},},{{7951,98,20,406,789},
{339,42,16,7900,469},},{0},{{7907,93,17,7902,673},{7907,43,23,13041,664,339},},{{406,104,24,13059,242,405},},{0},{0},{{7914,73,24,13059,613,280},},{{8173,71,20,13052,713},
{8173,11,16,10591,747},},{{10370,15,16,10591,670},{444,89,24,13059,464,4745},},{0},{{10942,23,22,7927,660},},{{10974,115,23,13041,691,10286},},{{331,34,20,275,552},},
{0},{0},{0},{{11931,119,17,11031,619},{10286,112,23,13041,459,10286},},{{8419,53,22,1417,633},},{{7896,3,20,7893,552},},{{7893,12,23,13041,237,7895},},{0},{0},{{12952,96,23,13041,664,10286},},
{0},{{406,107,24,13059,242,405},},{0},{{7929,24,18,10942,257},},{{10770,4,16,10591,697},},{{409,107,19,8314,373},},{{10370,10,16,10591,670},},{{8142,104,17,8193,619},
{4745,86,24,13059,575,4745},},{0},{{8314,107,20,406,679},},{{331,39,20,275,552},},{{7918,66,23,13041,774,288},},{0},{0},{0},{0},{{12987,5,0,8310,0},},{{10286,115,24,13059,464,9861},},
{{10391,21,18,10942,703},{9795,86,17,8918,783},},{{13024,19,20,7929,148},},{{7894,4,20,7893,330},{415,109,24,13059,464,405},},{0},{{9861,114,23,13041,570,10286},},
{0},{0},{{10770,7,16,10591,697},},{{406,110,20,13073,225},},{0},{{8142,107,23,13041,610,415},{7914,68,16,7914,616},},{{7895,9,23,13041,459,7895},},{0},{{444,76,23,13041,459,444},},
{{7902,34,22,403,633},},{{7917,74,22,299,687},},{0},{{8044,13,22,7894,731},},{{9451,77,20,485,652},},{0},{{10286,118,24,13059,464,9861},},{0},{0},{{10927,22,16,10895,780},},
{0},{{339,32,24,13059,464,331},},{{7894,7,19,10770,373},},{{7900,33,20,275,598},},{0},{0},{{8310,9,17,10381,59},{403,33,20,275,330},},{{7907,33,23,13041,664,339},},
{0},{{7895,10,22,7894,453},},{{10275,113,24,13059,353,9861},{8173,5,18,10370,757},},{{4745,88,20,485,552},},{0},{{10758,6,23,13041,774,7895},},{0},{0},{{280,91,19,7917,595},},
{0},{0},{0},{{10927,19,16,10895,780},},{{275,36,16,7900,247},},{{7935,105,24,13059,667,405},},{{12952,121,20,13063,656},{415,107,17,8193,474},},{{7893,3,22,7894,231},},
{{7900,93,22,403,606},},{{7951,101,16,8142,807},{339,37,20,275,441},},{{7910,33,22,403,770},},{0},{{9967,119,19,10974,262},},{0},{{7929,18,18,10942,257},
{403,34,24,13059,353,331},},{0},{{299,72,24,13059,353,280},},{{10275,114,23,13041,348,10286},},{{8332,59,22,1417,606},{7899,67,17,7915,673},},{{10942,16,22,7927,660},},
{0},{{1436,53,23,13041,237,969},},{{7918,91,16,7914,780},{7918,72,23,13041,774,288},},{{7924,26,18,10942,479},{303,68,23,13041,237,288},},{{7915,64,24,13059,640,280},},
{{275,41,16,7900,247},},{{1417,55,23,13041,348,969},},{0},{0},{0},{{12978,13,2,10758,0},{7951,102,16,8142,807},},{{13012,36,20,275,148},},{{10381,13,23,13041,637,7895},},
{{13041,122,13,12308,0},{9967,112,17,11031,252},},{{8597,54,22,1417,770},},{{7929,23,18,10942,257},{403,39,24,13059,353,331},},{{10770,13,20,7893,679},
{8310,15,18,10370,65},},{0},{{10275,119,17,11031,363},{444,85,20,485,441},},{{8142,100,22,409,606},},{{10942,19,18,10942,676},{8332,45,22,1417,606},},
{0},{{8238,12,23,13041,110,7895},},{{9451,83,20,485,652},},{{7917,68,22,299,687},},{{9543,77,20,485,679},{7915,69,24,13059,640,280},},{{8044,7,22,7894,731},},
{{7908,43,23,13041,691,339},},{{10927,28,24,13059,777,7919},{7896,7,16,10591,580},},{{12992,74,20,303,148},{11931,115,18,12952,622},},{{10391,25,23,13041,691,7924},
{969,52,16,8332,469},},{0},{{12952,115,24,13059,667,9861},},{{12308,122,20,9967,789},},{0},{{7910,39,17,7902,783},},{0},{0},{{406,103,24,13059,242,405},},{0},{0},{{8142,103,23,13041,610,415},
{409,103,16,8142,358},},{{8314,111,16,8142,697},{299,60,22,299,342},},{{444,88,24,13059,464,4745},},{{7902,43,18,7907,649},},{{10974,114,18,12952,703},
{7917,65,22,299,687},},{{8238,15,16,10591,122},},{{13075,16,3,13077,2},{8044,10,22,7894,731},},{{9451,84,24,13059,667,4745},{8193,100,18,7935,649},},
{0},{0},{{7908,93,17,7902,700},},{{10391,26,22,7927,687},},{{10927,25,20,7929,762},},{{8890,83,24,13059,613,4745},{7893,13,1,12980,154},},{{9861,118,19,10974,595},
{339,44,23,13041,459,339},},{0},{{8597,48,23,13041,774,969},{7900,30,24,13059,613,331},},{{447,82,20,485,330},},{{8521,50,23,13041,691,969},{406,106,24,13059,242,405},},
{{13026,107,22,7951,152},{7929,25,23,13041,237,7924},},{0},{{7914,75,24,13059,613,280},{409,100,16,8142,358},},{{13013,45,20,1436,148},{7895,13,22,7894,453},},
{{8173,9,23,13041,737,7895},{7927,20,20,7929,330},},{0},{{13046,41,2,7910,0},},{{331,36,19,7908,595},},{0},{0},{0},{{1436,47,23,13041,237,969},},{{8419,55,23,13041,637,969},},
{0},{0},{{10286,114,24,13059,464,9861},},{0},{{7894,3,23,13041,348,7895},},{0},{{447,79,20,485,330},},{0},{{10915,21,24,13059,640,7919},},{0},{{406,109,19,8314,262},},{0},{0},{{4745,84,24,13059,575,4745},},
{{299,68,23,13041,348,288},},{{444,79,16,8890,469},},{0},{0},{{13052,74,2,7918,0},},{0},{{7918,68,20,303,762},},{{7924,22,23,13041,459,7924},},{0},{{10286,117,24,13059,464,9861},
{275,32,20,275,219},},{{7935,109,20,406,652},},{0},{{8890,78,16,8890,616},{415,111,24,13059,464,405},},{{9795,88,24,13059,777,4745},{7919,22,18,10942,590},},
{{7951,105,20,406,789},{339,33,24,13059,464,331},},{{9861,112,16,11931,580},},{{10381,4,17,10381,646},},{{8521,52,18,8509,703},},{0},{0},{0},{{288,65,22,299,453},},
{{7927,18,19,10391,373},{444,82,16,8890,469},},{0},{{10942,28,18,10942,676},{8332,55,23,13041,610,969},},{{8314,101,20,406,679},},{0},{{11031,120,22,10275,633},
{9451,79,17,8918,673},},{{7917,91,22,299,687},},{{7924,21,22,7927,453},{303,72,20,303,219},},{{7915,91,18,7899,649},},{{7908,30,23,13041,691,339},},
{{10927,16,23,13041,774,7924},},{{11931,122,22,10275,606},},{{7919,19,18,10942,590},{7893,4,19,10770,262},},{{10391,16,22,7927,687},},{{10591,5,18,10370,622},},
{{12308,118,17,11031,810},},{{339,34,23,13041,459,339},},{{405,102,22,409,564},},{{8597,58,23,13041,774,969},{8597,45,20,1436,762},},{{8310,11,22,7894,34},},
{0},{{7929,19,23,13041,237,7924},{403,93,19,7908,373},},{{10275,115,24,13059,353,9861},},{{7914,65,20,303,598},},{{299,73,24,13059,353,280},},{{8173,3,23,13041,737,7895},},
{0},{0},{0},{{7915,65,23,13041,637,288},},{{8193,99,18,7935,649},},{{9543,84,24,13059,694,4745},},{{275,38,19,7908,262},},{{8419,45,23,13041,637,969},{1417,48,20,1436,330},},
{{7935,107,24,13059,667,405},},{0},{{9795,77,16,8890,780},{969,48,19,8521,484},},{{339,39,17,7902,474},},{{12952,119,23,13041,664,10286},{7894,12,22,7894,342},},
{0},{{7900,42,16,7900,616},},{{7907,36,18,7907,676},},{0},{{403,36,24,13059,353,331},},{0},{{7895,4,18,10370,479},},{0},{{10942,18,23,13041,664,7924},},{{299,74,23,13041,348,288},},
{{8238,11,20,7893,89},},{{10758,11,17,10381,783},{485,89,24,13059,242,4745},},{0},{0},{{7915,66,24,13059,640,280},},{{7908,42,18,7907,703},{1417,53,20,1436,330},},
{0},{{8918,88,16,8890,643},},{{7896,6,19,10770,595},},{0},{{9861,122,24,13059,575,9861},},{{7894,15,23,13041,348,7895},{415,102,19,8314,484},},{{7900,41,16,7900,616},
{447,86,16,8890,358},},{0},{0},{{10770,15,23,13041,691,7895},{403,41,24,13059,353,331},},{0},{0},{0},{0},{0},{{8173,13,16,10591,747},},{{485,86,24,13059,242,4745},},{0},{0},{0},{{11031,118,22,10275,633},},
{0},{{303,67,17,7915,252},},{0},{0},{0},{{12952,113,24,13059,667,9861},},{0},{0},{0},{0},{{406,105,23,13041,237,415},},{{7910,41,24,13059,777,331},},{{8509,53,18,8509,676},},{{8310,1,22,12987,4},
{403,42,20,275,330},},{{288,70,22,299,453},},{{8173,10,16,10591,747},{7927,21,17,10915,363},},{{10275,122,19,10974,373},},{0},{0},{{485,83,17,8918,252},},
{{11031,115,22,10275,633},},{{9451,86,24,13059,667,4745},{280,67,18,7899,590},},{{7924,18,22,7927,453},},{{8044,51,20,13036,713},},{0},{0},{{10286,113,23,13041,459,10286},},
{{7893,11,17,10381,252},},{{9795,84,17,8918,783},},{{10591,12,22,7894,606},{7894,2,1,12980,265},},{0},{{7951,109,17,8193,810},},{{7910,44,24,13059,777,331},},
{{10915,18,24,13059,640,7919},},{{8310,4,22,7894,34},},{{7895,15,23,13041,459,7895},{288,69,18,7899,479},},{0},{{10370,11,16,10591,670},},{{7914,60,22,299,606},},
{0},{0},{{10942,24,23,13041,664,7924},},{0},{{10974,119,22,10275,687},},{{7915,61,20,303,625},},{{8193,106,22,409,633},},{{9543,88,23,13041,691,444},},{{12987,4,0,8310,0},},
{{1417,47,24,13059,353,700},},{{10391,20,18,10942,703},{9795,89,23,13041,774,444},},{{8918,78,20,485,625},{700,54,22,1417,564},},{{7919,23,23,13041,570,7924},
{969,47,17,8419,474},},{{12308,114,24,13059,804,9861},},{0},{{10915,23,24,13059,640,7919},{405,106,23,13041,570,415},},{{7900,35,20,275,598},},{0},{0},{{8310,7,17,10381,59},
{288,62,10,13072,416},},{{7914,69,16,7914,616},},{0},{{299,70,16,7914,358},},{0},{{8314,100,17,8193,700},},{{7917,73,18,7899,703},},{{8238,7,20,7893,89},},
{{8193,111,22,409,633},{1436,48,16,8332,247},},{0},{0},{{10286,119,24,13059,464,9861},{7908,38,23,13041,691,339},},{{8419,58,17,8419,646},},{0},{{7893,5,22,7894,231},},
{0},{{10591,10,17,10381,619},{339,35,24,13059,464,331},},{{415,105,17,8193,474},},{{7900,38,20,275,598},{447,89,20,485,330},},{{12308,113,20,9967,789},},
{{9967,95,12,13065,212},},{0},{{10770,3,23,13041,691,7895},},{0},{{8509,47,18,8509,676},},{{8142,111,22,409,606},},{{8314,103,23,13041,691,415},},{{8173,4,20,7893,719},
{7927,28,22,7927,342},},{{331,43,20,275,552},},{0},{0},{0},{0},{{7908,37,22,403,687},{1417,49,23,13041,348,969},},{{9543,85,24,13059,694,4745},},{{10927,18,16,10895,780},
{7896,10,23,13041,570,7895},},{0},{{7935,104,24,13059,667,405},{700,56,19,8521,595},},{{12952,118,20,9967,652},{7894,11,19,10770,373},},{0},{{10381,15,18,10370,649},},
{{8597,56,22,1417,770},},{0},{0},{{9967,118,17,11031,252},{406,98,20,406,219},},{0},{{8142,98,22,409,606},{7914,67,23,13041,610,288},},{{7895,5,23,13041,459,7895},
{288,74,19,7917,484},},{{7927,25,22,7927,342},{299,75,24,13059,353,280},},{{10275,117,17,11031,363},{444,87,20,13062,447},},{{7899,66,23,13041,664,288},},
{0},{{10758,10,20,7893,762},},{0},{{7918,73,17,7915,783},},{{9543,86,24,13059,694,4745},},{{7915,67,24,13059,640,280},},{{10895,20,16,10895,616},},{{7935,101,24,13059,667,405},},
{{7896,9,16,10591,580},{275,29,23,13041,237,339},},{{8890,86,20,485,598},},{{9795,79,23,13041,774,444},{969,54,16,8332,469},},{{415,103,22,409,453},},
{0},{0},{{9967,115,19,10974,262},{406,101,20,406,219},},{{7910,37,17,7902,783},{405,97,22,13067,548},},{{7929,22,18,10942,257},{403,38,24,13059,353,331},},
{{7895,6,17,10381,474},},{0},{{7927,26,23,13041,348,7924},},{{4745,76,20,485,552},},{{7902,41,23,13041,637,339},},{{10758,13,20,7893,762},},{{10942,20,20,7929,652},},
{0},{{10974,112,22,10275,687},{7917,67,18,7899,703},},{{7915,68,24,13059,640,280},},{0},{{9543,83,17,8918,700},{303,64,22,299,231},},{{7896,4,16,10591,580},},
{{11931,114,18,12952,622},{275,30,22,403,231},},{0},{{7935,102,20,406,652},},{{7893,15,22,7894,231},},{0},{{7951,98,23,13041,801,415},{339,42,19,7908,484},},
{0},{0},{0},{0},{{403,43,17,7902,363},},{{4745,81,20,13039,535},},{{409,102,16,8142,358},},{0},{{485,84,24,13059,242,4745},},{{8314,104,22,409,687},{299,63,20,303,330},},
{{10974,115,18,12952,703},},{{331,34,23,13041,570,339},},{0},{0},{{8044,11,20,7893,719},},{{11931,119,18,12952,622},{10286,112,20,9967,441},},{{1417,56,16,8332,358},},
{{7935,99,20,406,652},},{0},{0},{{9861,117,17,11031,585},},{0},{0},{0},{{7910,43,24,13059,777,331},},{0},{0},{{409,107,16,8142,358},},{{288,68,17,7915,474},},{{8142,104,22,409,606},},
{0},{{8314,107,23,13041,691,415},},{{331,39,17,7902,585},},{{7899,72,23,13041,664,288},{485,81,20,13039,202},},{0},{{8044,14,20,13061,725},{7915,73,16,7914,643},},
{0},{{7908,34,22,403,687},},{0},{{12992,70,20,303,148},},{{10391,21,23,13041,691,7924},{9795,86,20,485,762},},{0},{{7894,4,17,10381,363},},{0},{{10381,6,22,7894,633},},
{0},{{10915,20,24,13059,640,7919},{447,78,22,447,342},},{0},{{8521,54,22,1417,687},},{{288,67,19,7917,484},},{{8142,107,18,7935,622},},{{7895,9,20,7893,441},},
{0},{{7927,16,23,13041,348,7924},},{{485,78,20,485,219},},{0},{0},{0},{{9451,88,16,8890,670},{9451,77,17,8918,673},},{0},{0},{{8419,59,20,1436,625},{1417,45,24,13059,353,700},},
{{8918,80,17,8918,646},{700,52,23,13041,570,969},},{{275,93,24,13059,242,331},},{{8890,79,16,8890,616},},{{969,45,20,1436,441},},{{7894,7,22,7894,342},},
{{10915,25,24,13059,640,7919},{7900,33,23,13041,610,339},},{{12308,112,17,11031,810},},{{8521,59,22,1417,687},},{0},{{7907,33,20,275,652},},{0},{0},{{8173,5,23,13041,737,7895},
{444,83,16,8890,469},},{{4745,88,23,13041,570,444},},{0},{{10758,6,16,10591,780},},{{8332,52,23,13041,610,969},},{0},{{280,91,22,299,564},},{0},{{1417,50,24,13059,353,700},},
{{303,75,22,299,231},},{{7896,13,20,7893,552},},{{275,36,23,13041,237,339},},{{7919,18,18,10942,590},{969,50,20,1436,441},},{{7894,10,22,7894,342},
{415,107,18,7935,479},},{0},{0},{{10591,4,24,13059,613,7896},{339,37,17,7902,474},},{0},{{10915,26,20,7929,625},},{{9967,119,20,9967,219},},{{8509,58,16,8332,670},},
{{8310,12,24,13059,47,7896},{7929,18,17,10915,252},},{{10370,3,20,7893,652},},{0},{{10275,114,18,12952,368},},{{7899,67,18,7899,676},},{0},{{280,75,23,13041,570,288},},
{{8238,9,20,7893,89},},{{7918,72,20,303,762},{7918,60,24,13059,777,280},},{{7924,26,23,13041,459,7924},{303,68,18,7899,257},},{{7915,64,23,13041,637,288},},
{0},{{1417,55,20,1436,330},},{{7935,106,24,13059,667,405},},{0},{{10391,28,20,7929,679},},{0},{0},{0},{{9967,112,20,9967,219},},{0},{0},{{7907,39,24,13059,667,331},},{{409,98,20,406,330},},
{{10275,119,18,12952,368},{444,85,23,13041,459,444},},{0},{0},{0},{{8238,12,20,7893,89},},{{485,88,24,13059,242,4745},},{{7917,68,17,7915,700},},{{9543,80,24,13059,694,4745},},
{{8193,103,24,13059,640,405},},{{13021,88,20,485,148},{7908,43,18,7907,703},},{{12987,59,0,8310,0},},{{11931,115,23,13041,610,10286},{7896,18,1,12980,487},},
{{10391,25,20,7929,679},{969,52,19,8521,484},},{{8918,89,22,447,633},{7935,103,17,8193,673},},{{13065,94,4294967295U,13065,0,8044},},{0},{{339,43,22,403,453},},
{{7910,39,20,275,762},},{0},{0},{{8521,45,22,1417,687},},{0},{{7914,72,18,7899,622},},{0},{0},{0},{{10758,15,17,10381,783},{485,85,24,13059,242,4745},},{{10974,114,23,13041,691,10286},},
{0},{{7915,70,24,13059,640,280},},{{11031,113,18,12952,649},},{{10895,19,23,13041,610,7924},},{0},{{8419,50,16,8332,643},{7908,93,20,275,679},},{0},{{700,45,22,1417,564},},
{0},{{7919,24,18,10942,590},{7893,13,17,10381,252},},{0},{0},{{447,82,23,13041,348,444},},{{8521,50,18,8509,703},},{{7910,42,24,13059,777,331},},{{10770,11,22,7894,687},},
{{409,100,19,8314,373},},{{8509,52,20,1436,652},},{{8173,9,16,10591,747},{7927,20,19,10391,373},},{{10370,9,16,10591,670},},{{299,67,22,299,342},},
{{331,36,22,403,564},},{{7899,73,18,7899,676},{485,82,19,9543,262},},{{7918,65,24,13059,777,280},},{{280,64,22,299,564},},{{303,60,22,299,231},},
{0},{{7924,19,20,7929,441},},{{700,48,22,1417,564},},{0},{{7919,21,18,10942,590},{7893,10,19,10770,262},},{0},{{12978,6,2,10758,0},},{{7900,29,24,13059,613,331},},
{0},{0},{{10770,6,22,7894,687},},{{406,109,22,409,231},},{{8509,49,20,1436,652},},{0},{{10370,4,16,10591,670},{4745,71,20,13052,535},},{{7914,91,16,7914,616},},
{{444,79,23,13041,459,444},},{{7899,74,22,299,660},{485,79,17,8918,252},},{{8332,48,22,1417,606},},{0},{0},{{7918,68,17,7915,783},},{{7924,22,20,7929,441},},
{0},{{12987,7,0,8310,0},},{0},{{10927,23,22,7927,770},},{{8890,89,22,447,606},},{{9795,88,23,13041,774,444},},{{7951,105,17,8193,810},},{{9861,112,19,10974,595},},
{{10915,22,24,13059,640,7919},},{0},{{405,105,23,13041,570,415},},{0},{0},{{7914,70,16,7914,616},},{{8173,6,24,13059,742,7896},{7927,18,22,7927,342},},{0},{{7902,36,23,13041,637,339},},
{0},{{7917,72,18,7899,703},{7917,60,22,299,687},},{{9451,79,18,9451,676},},{{10974,120,23,13041,691,10286},},{0},{{8044,71,20,13052,713},{7915,91,23,13041,637,288},},
{{7908,30,20,275,679},},{{10895,25,23,13041,610,7924},},{{11931,122,17,11031,619},},{0},{0},{{10591,5,23,13041,610,7895},},{{415,104,19,8314,484},},{{7951,106,22,409,797},},
{0},{0},{{8310,11,17,10381,59},{403,35,20,275,330},},{0},{{7929,19,20,7929,219},{403,93,16,7900,358},},{0},{0},{{7902,39,22,403,633},},{{8173,3,20,7893,719},},
{0},{0},{{331,42,22,403,564},},{{7915,65,20,303,625},},{{8193,99,23,13041,637,415},},{0},{{275,38,22,403,231},},{{8419,45,20,1436,625},{1417,48,23,13041,348,969},},
{0},{{8918,85,23,13041,637,444},},{{415,101,17,8193,474},},{{7951,103,22,409,797},{339,39,18,7907,479},},{{12952,119,18,12952,676},{10591,6,24,13059,613,7896},},
{0},{0},{{7907,36,17,7902,673},},{0},{{10770,12,22,7894,687},},{{409,99,17,8193,363},},{{7895,4,17,10381,474},},{0},{0},{{8314,99,22,409,687},{299,74,18,7899,368},},
{{8238,11,23,13041,110,7895},},{{7899,69,23,13041,664,288},},{0},{0},{{8044,6,24,13059,742,7896},},{{7908,42,23,13041,691,339},{1417,53,17,8419,363},},{{10895,23,16,10895,616},},
{0},{{7896,6,16,10591,580},},{{7919,28,22,7927,564},},{{12952,114,18,12952,676},{10591,3,24,13059,613,7896},},{0},{{10381,11,24,13059,640,7896},{447,86,19,9543,373},},
{0},{{9967,114,17,11031,252},},{{10770,15,18,10370,703},},{{7907,41,24,13059,667,331},{406,102,22,409,231},},{0},{{7929,21,24,13059,242,7919},},{{10370,13,20,7893,652},},
{{299,61,24,13059,353,280},},{{299,46,4,13056,269},},{{485,86,23,13041,237,444},},{{7899,70,22,299,660},},{0},{0},{{11031,118,17,11031,646},{8193,101,24,13059,640,405},},
{0},{{303,67,18,7899,257},},{{7896,5,16,10591,580},},{{12992,72,20,303,148},},{0},{{8890,82,22,447,606},},{{969,58,22,1417,453},},{{12308,120,20,9967,789},},
{{9861,119,17,11031,585},},{0},{{7907,42,24,13059,667,331},{406,105,18,7935,257},},{{7910,41,23,13041,774,339},},{{8509,53,23,13041,664,969},{7929,26,24,13059,242,7919},},
{{403,42,23,13041,348,339},},{0},{{8173,10,23,13041,737,7895},{7927,21,22,7927,342},},{{4745,80,22,447,564},},{{7899,91,22,299,660},},{0},{0},{0},{{7918,64,24,13059,777,280},
{280,67,17,7915,585},},{0},{0},{{13021,86,20,485,148},{11931,118,18,12952,622},},{{275,17,4,13075,158},},{{10286,113,18,12952,479},},{{7919,26,17,10915,585},},
{{9795,84,20,485,762},},{0},{0},{{7951,109,22,409,797},},{0},{{405,109,22,409,564},},{0},{0},{0},{{4745,85,22,447,564},},{{409,106,22,409,342},},{{7902,32,22,403,633},},
{0},{{10942,24,20,7929,652},},{{7918,67,24,13059,777,280},},{{8238,4,22,7894,103},},{{7915,72,16,7914,643},},{0},{0},{{275,33,22,403,231},},{{7908,35,20,275,679},},
{{10391,20,17,10915,700},{9795,89,20,485,762},},{{8918,78,17,8918,646},{700,54,19,8521,595},},{{7894,5,19,10770,373},},{0},{0},{0},{0},{{13041,119,13,12308,0},},
{0},{{8310,7,20,7893,20},},{{409,111,22,409,342},},{0},{{8173,7,24,13059,742,7896},{299,70,19,7917,373},},{{444,77,16,8890,469},},{{8314,100,22,409,687},},
{0},{{10758,4,16,10591,780},{8238,7,23,13041,110,7895},},{0},{{7918,70,20,303,762},},{0},{{7908,38,20,275,679},},{{12987,94,0,8310,0},},{{7935,111,20,406,652},},
{{7896,15,20,7893,552},},{0},{{10591,10,20,7893,598},},{0},{{7900,38,17,7902,619},},{{12308,113,23,13041,801,10286},},{{9967,117,19,10974,262},},{{8310,10,20,7893,20},},
{{8521,58,20,1436,679},},{{288,46,4,13056,380},},{{8509,47,23,13041,664,969},},{{10275,112,23,13041,348,10286},{444,80,16,8890,469},},{{8314,103,18,7935,703},},
{{8173,4,23,13041,737,7895},},{{10758,7,16,10591,780},},{{7899,65,22,299,660},{7899,60,23,13041,664,288},},{{11031,122,18,12952,649},},{{13036,52,2,8597,0},},
{0},{{10895,27,20,13060,602},{1417,49,24,13059,353,700},},{0},{{7896,10,20,7893,552},},{0},{{700,56,20,1436,552},},{{7893,47,1,12980,154},},{0},{{10381,15,23,13041,637,7895},},
{{10591,7,24,13059,613,7896},{339,36,19,7908,484},},{{7900,37,22,403,606},},{0},{0},{0},{{8310,13,24,13059,47,7896},},{{7895,5,20,7893,441},{288,74,16,7914,469},},
{0},{{4745,79,22,447,564},},{0},{0},{{7917,70,22,299,687},},{0},{{7918,61,24,13059,777,280},{280,72,23,13041,570,288},},{0},{0},{{11931,113,18,12952,622},{10286,122,16,11931,469},},
{0},{{7896,9,19,10770,595},{275,29,20,275,219},},{0},{{9795,79,16,8890,780},{969,54,23,13041,459,969},},{{339,41,17,7902,474},},{0},{{10381,12,24,13059,640,7896},},
{{13023,11,20,7893,148},},{{7910,37,20,275,762},},{{7929,22,17,10915,252},},{{7907,38,24,13059,667,331},},{0},{{10275,118,18,12952,368},},{{4745,76,23,13041,570,444},},
{{7902,41,18,7907,649},},{{299,91,16,7914,358},},{{10942,20,17,10915,673},},{0},{0},{{8044,4,24,13059,742,7896},},{{8193,102,24,13059,640,405},},{{9543,83,18,9451,703},},
{0},{0},{{9795,80,16,8890,780},},{{7935,102,23,13041,664,415},},{0},{{10381,9,24,13059,640,7896},{339,31,8,13074,400},},{0},{0},{0},{{7907,43,24,13059,667,331},},{{8509,54,24,13059,667,700},},
{{403,43,18,7907,368},},{{7914,73,18,7899,622},},{{7895,3,24,13059,464,7896},{409,102,23,13041,348,415},},{0},{0},{0},{0},{0},{0},{{11031,112,18,12952,649},},{0},{0},{{8419,53,16,8332,643},
{1417,56,19,8521,373},},{{7935,99,17,8193,673},},{0},{0},{{10591,13,16,10591,616},{9861,117,18,12952,590},},{0},{{10915,19,20,7929,625},},{0},{0},{{7929,24,24,13059,242,7919},
{403,44,22,403,342},},{0},{{7895,12,24,13059,464,7896},},{{288,68,18,7899,479},},{{7927,23,17,10915,363},},{0},{0},{{331,39,18,7907,590},},{{7899,72,18,7899,676},},
{{7918,66,24,13059,777,280},},{0},{{8193,107,16,8142,643},},{{8419,54,16,8332,643},},{0},{{10927,21,17,10915,783},},{{10391,21,20,7929,679},{9795,86,23,13041,774,444},},
{{8918,77,22,447,633},{700,49,16,8332,580},},{{415,109,18,7935,479},},{{12978,7,2,10758,0},{7919,20,24,13059,575,7919},},{0},{{7951,111,17,8193,810},},
{{7900,34,22,403,606},{447,78,17,8918,363},},{0},{0},{{288,67,22,299,453},},{0},{{7895,9,17,10381,474},},{0},{{10370,5,22,7894,660},},{{485,78,19,9543,262},},
{0},{0},{{8193,104,16,8142,643},},{0},{0},{0},{{12987,6,0,8310,0},{11931,120,22,10275,606},},{{8918,80,22,447,633},{700,52,16,8332,580},},{0},{0},{{10391,22,24,13059,694,7919},},
{{339,32,23,13041,459,339},},{0},{{12308,112,18,12952,813},},{{13041,117,13,12308,0},{9967,122,16,11931,247},},{0},{0},{0},{0},{{10275,113,18,12952,368},{8173,5,24,13059,742,7896},},
{{4745,88,18,9451,590},},{0},{{8314,102,17,8193,700},},{{8332,52,16,8332,616},},{{9451,78,18,9451,676},},{0},{0},{{1436,54,22,1417,231},},{0},{{7896,13,23,13041,570,7895},},
{0},{{10391,19,24,13059,694,7919},{969,50,19,8521,484},},{0},{0},{{12308,119,22,10275,797},},{{10591,4,23,13041,610,7895},},{0},{{10915,26,23,13041,637,7924},},{0},{{8509,58,23,13041,664,969},
{8509,45,20,1436,652},},{{403,34,22,403,342},},{{10370,3,23,13041,664,7895},},{0},{{299,72,23,13041,348,288},},{{7899,67,23,13041,664,288},},{{10942,16,24,13059,667,7919},},
{0},{0},{0},{{7924,26,20,7929,441},{303,68,17,7915,252},},{0},{0},{0},{0},{0},{{9795,76,23,13041,774,444},},{{339,38,18,7907,479},},{0},{0},{{10381,13,24,13059,640,7896},},{{8597,54,16,8332,780},
{405,98,20,406,552},},{{403,39,22,403,342},},{{8310,15,24,13059,47,7896},},{0},{{7895,7,19,10770,484},{288,72,23,13041,459,288},},{{8142,100,16,8142,616},},
{{10942,19,24,13059,667,7919},},{0},{{331,92,20,13064,558},},{0},{{7918,63,24,13059,777,280},},{{7915,69,18,7899,649},},{{8044,7,24,13059,742,7896},{1436,56,19,8521,262},},
{{7908,43,17,7902,700},},{{10895,22,16,10895,616},{7924,25,24,13059,464,7919},},{{10927,28,23,13041,774,7924},},{{969,52,22,1417,453},},{{7935,103,18,7935,676},},
{{12952,115,18,12952,676},},{{8890,80,18,9451,622},},{{10381,10,24,13059,640,7896},},{{7910,39,23,13041,774,339},},{0},{0},{0},{{8509,55,24,13059,667,700},},{{7929,20,24,13059,242,7919},},
{0},{{299,60,24,13059,353,280},},{0},{{10758,15,20,7893,762},},{{10942,22,20,7929,652},},{{8238,15,22,7894,103},{331,35,23,13041,570,339},},{{8044,10,24,13059,742,7896},},
{{9451,84,18,9451,676},{8193,100,24,13059,640,405},},{{10895,19,16,10895,616},{7924,28,24,13059,464,7919},},{{9543,78,22,447,687},},{{7908,93,23,13041,691,339},},
{0},{0},{{415,98,22,409,453},},{{7919,24,17,10915,585},{7893,13,18,10370,257},},{0},{0},{0},{{8521,50,17,8419,700},},{0},{{7929,25,24,13059,242,7919},},{{409,100,22,409,342},},
{{8509,52,23,13041,664,969},{7895,13,24,13059,464,7896},},{0},{{10370,9,23,13041,664,7895},},{0},{{331,29,24,13059,575,331},},{{7899,73,23,13041,664,288},{485,82,22,447,231},},
{{11031,114,17,11031,646},{7918,65,23,13041,774,288},},{0},{0},{{8044,9,20,7893,719},},{{7924,19,19,10391,484},},{{10927,26,18,10942,786},},{0},{{7919,21,23,13041,570,7924},
{7893,10,22,7894,231},},{0},{0},{{13069,97,22,13067,150},{10381,7,16,10591,643},},{{9861,115,23,13041,570,10286},{339,93,23,13041,459,339},},{0},{0},{{8521,55,24,13059,694,700},},
{{8509,49,17,8419,673},},{0},{{7914,61,24,13059,613,280},},{0},{{7902,93,18,7907,649},},{{7899,74,17,7915,673},{485,79,22,447,231},},{{7902,33,20,275,625},},
{{7917,75,24,13059,694,280},{280,60,22,299,564},},{{7917,63,23,13041,691,288},},{{8044,12,20,7893,719},},{{10895,28,24,13059,613,7919},{7924,22,17,10915,474},},
{0},{{10286,117,18,12952,479},},{{12992,68,20,303,148},},{0},{{8890,78,22,447,606},},{{9795,88,18,9451,786},{7919,22,24,13059,575,7919},},{0},{{9861,112,22,10275,564},},
{0},{0},{{405,105,16,8142,580},},{0},{{8310,8,20,12978,8},},{{8142,109,22,409,606},},{{7895,11,20,7893,441},},{{4745,89,23,13041,570,444},},{{7902,36,20,275,625},},
{0},{0},{{10758,5,16,10591,780},},{{10974,120,20,9967,679},{7917,91,16,7914,697},},{0},{{7915,91,24,13059,640,280},},{{12992,67,20,303,148},},{{10895,25,20,7929,598},},
{{8918,82,17,8918,646},{700,58,19,8521,595},},{{7919,19,24,13059,575,7919},},{{10391,16,24,13059,694,7919},},{{10591,5,20,7893,598},},{{415,104,22,409,453},},
{{7900,92,20,13064,602},{447,88,19,9543,373},},{{405,102,16,8142,580},},{0},{0},{{7907,35,20,275,652},},{{288,91,24,13059,464,280},},{0},{0},{{299,73,18,7899,368},},
{0},{0},{0},{{331,42,17,7902,585},},{{13036,53,2,8597,0},{1436,52,23,13041,237,969},},{{8193,99,20,406,625},},{0},{{9543,84,23,13041,691,444},{303,69,18,7899,257},},
{{7908,29,22,403,687},{1417,48,18,8509,368},},{{7935,107,22,409,660},},{0},{{415,101,22,409,453},},{0},{{12952,119,17,11031,673},},{{10915,28,22,7927,633},},
{0},{{7907,36,20,275,652},},{{13023,9,20,7893,148},},{{8509,56,16,8332,670},},{{409,99,22,409,342},},{0},{0},{0},{{10942,18,24,13059,667,7919},},{{8238,11,18,10370,134},},
{{7899,69,20,303,652},{485,89,22,447,231},},{{9451,80,22,447,660},},{{7918,74,20,303,762},},{{7924,24,19,10391,484},{303,70,22,299,231},},
{{7908,42,20,275,679},{1417,53,18,8509,368},},{0},{0},{{11931,112,24,13059,613,9861},},{0},{{9795,78,16,8890,780},},{0},{0},{{339,29,24,13059,464,331},},{{9967,114,20,9967,219},},
{0},{{406,102,19,8314,262},},{0},{{7895,47,1,12980,376},},{0},{{8142,102,23,13041,610,415},},{{8173,13,22,7894,731},},{{13017,100,20,406,148},{485,86,18,9451,257},},
{0},{{10974,113,24,13059,694,9861},},{0},{{8044,5,24,13059,742,7896},},{{10895,16,23,13041,610,7924},},{{9543,82,18,9451,703},},{{11931,117,24,13059,613,9861},{7896,5,19,10770,595},},
{{7908,41,24,13059,694,331},},{{10391,27,20,13060,683},{9795,83,16,8890,780},},{0},{0},{0},{{9861,119,22,10275,564},},{{8597,49,23,13041,774,969},},{{406,105,17,8193,252},},
{{7910,41,18,7907,786},},{{8509,53,24,13059,667,700},{7929,26,23,13041,237,7924},},{{403,42,18,7907,368},},{{7914,74,22,299,606},},{0},{{4745,80,17,8918,585},},
{0},{0},{0},{0},{{280,67,20,303,552},},{{7924,18,24,13059,464,7919},},{0},{{7908,44,24,13059,694,331},},{{8419,52,16,8332,643},},{{10286,113,17,11031,474},},{{7919,26,20,7929,552},},
{{13063,112,11,13027,0},},{0},{0},{{447,76,22,447,342},},{0},{{10915,18,22,7927,633},},{{8310,4,16,10591,53},},{{8521,48,24,13059,694,700},},{{7895,15,24,13059,464,7896},},
{{10370,11,22,7894,660},},{{7914,60,24,13059,613,280},},{{299,69,23,13041,348,288},},{0},{{331,38,18,7907,590},},{{13061,4,11,13023,0},},{0},{{13036,50,2,8597,0},},
{{1436,45,22,1417,231},},{0},{0},{{12992,60,20,303,148},{1417,47,18,8509,368},},{0},{{8918,78,18,9451,649},{700,54,16,8332,580},},{{7894,5,22,7894,342},},
{{7919,23,24,13059,575,7919},},{0},{{10915,23,22,7927,633},},{0},{{8521,53,24,13059,694,700},},{{7910,93,24,13059,777,331},{406,111,18,7935,257},},{{8310,7,23,13041,41,7895},},
{{7914,63,24,13059,613,280},{409,111,19,8314,373},},{{288,64,20,303,441},},{{299,70,22,299,342},},{{444,77,19,9543,484},},{{8332,54,23,13041,610,969},
{485,77,17,8918,252},},{{7917,73,24,13059,694,280},{7917,61,20,303,679},},{0},{{8193,111,16,8142,643},{1436,48,22,1417,231},},{{9451,76,22,447,660},
{7918,70,17,7915,783},},{{7924,20,20,7929,441},{303,73,22,299,231},},{{7908,38,17,7902,700},},{0},{{700,53,16,8332,580},},{{7896,15,19,10770,595},},
{{7919,16,24,13059,575,7919},},{{10591,10,23,13041,610,7895},},{0},{0},{{12308,113,18,12952,813},},{{9967,117,16,11931,247},},{{8597,59,23,13041,774,969},{405,103,19,8314,595},},
{0},{0},{{8509,47,20,1436,652},},{{10275,112,18,12952,368},},{{7914,64,22,299,606},},{{8173,4,18,10370,757},{7927,28,16,10895,358},},{0},{{8332,53,16,8332,616},},
{0},{0},{0},{0},{{303,74,17,7915,252},},{{10927,18,22,7927,770},{7896,10,17,10381,585},},{0},{{10391,18,24,13059,694,7919},{969,49,17,8419,474},},{0},{0},{{10381,15,20,7893,625},},
{{339,36,22,403,453},},{0},{0},{0},{0},{{403,37,18,7907,368},},{0},{0},{{8173,4294967295U,4294967295U,8044,1,8044},{4745,79,19,9543,595},},{{8332,56,16,8332,616},},{0},{0},{{8238,10,17,10381,128},},
{{280,72,16,7914,580},},{{9543,86,22,447,687},},{0},{{11931,113,23,13041,610,10286},},{{8419,47,20,1436,625},{1417,54,19,8521,373},},{{7896,9,22,7894,564},},
{0},{0},{{339,41,22,403,453},},{{12952,117,22,10275,660},},{0},{0},{{8597,53,16,8332,780},},{{7929,22,20,7929,219},},{0},{0},{{10370,12,22,7894,660},},{{8142,101,16,8142,616},},
{{7902,41,17,7902,646},},{0},{0},{0},{{10974,112,24,13059,694,9861},},{{7915,68,18,7899,649},},{0},{{8419,48,20,1436,625},},{{7896,4,22,7894,564},},{{11931,114,24,13059,613,9861},},
{0},{{7935,102,18,7935,676},},{{12952,112,22,10275,660},},{{12978,9,2,10758,0},},{0},{{8597,50,16,8332,780},},{0},{{10770,9,22,7894,687},},{{406,104,18,7935,257},},
{{403,43,23,13041,348,339},},{{7914,73,17,7915,619},},{0},{{299,65,22,299,342},},{{444,89,22,447,453},},{{8314,104,16,8142,697},{7902,44,24,13059,640,331},},
{{10974,115,24,13059,694,9861},{7917,64,20,303,679},},{0},{0},{{11031,112,17,11031,646},},{{10895,18,16,10895,616},},{{11931,119,24,13059,613,9861},},{0},{{7935,99,18,7935,676},},
{{10927,24,22,7927,770},},{0},{{9861,117,23,13041,570,10286},},{0},{{447,77,19,9543,373},},{0},{{406,107,22,409,231},},{0},{{7907,44,22,403,660},},{{7895,12,23,13041,459,7895},},
{{288,68,23,13041,459,288},},{{7927,23,18,10942,368},},{{4745,86,18,9451,590},},{0},{0},{{7899,72,17,7915,673},},{{11031,96,22,10275,633},},{{10974,118,20,9967,679},
{280,62,10,13072,527},},{0},{{7908,34,24,13059,694,331},},{{9543,89,23,13041,691,444},},{{10927,21,22,7927,770},},{{10286,115,22,10275,453},},{{700,49,19,8521,595},},
{{13012,93,20,275,148},{415,109,23,13041,459,415},},{{7919,20,23,13041,570,7924},{7893,9,20,7893,219},},{{10381,6,16,10591,643},},{{7951,111,18,7935,813},},
{{405,107,23,13041,570,415},},{0},{{8521,54,24,13059,694,700},},{0},{0},{0},{0},{0},{{8332,49,20,1436,598},},{{10942,26,20,7929,652},},{{7917,74,24,13059,694,280},},{{280,46,4,13056,491},},
{{7918,69,22,299,770},},{{7924,23,19,10391,484},{303,91,20,303,219},},{0},{{10286,118,22,10275,453},},{{7908,33,20,275,679},},{{275,93,18,7907,257},},
{{7893,6,20,7893,219},},{0},{{7951,104,22,409,797},},{{12952,122,22,10275,660},},{{12308,112,23,13041,801,10286},},{{9967,122,19,10974,262},{8521,59,24,13059,694,700},},
{{405,104,16,8142,580},},{0},{0},{{288,60,22,299,453},},{{10275,113,23,13041,348,10286},},{{8142,110,20,13073,602},},{0},{{8314,102,18,7935,703},},{0},{0},{{13027,120,20,9967,148},
{280,91,24,13059,575,280},},{0},{{1436,54,19,8521,262},},{{7908,36,20,275,679},{1417,50,23,13041,348,969},},{{7896,13,18,10370,590},},{0},{{7919,18,24,13059,575,7919},},
{{7935,105,18,7935,676},},{0},{{12308,96,22,10275,797},},{{10591,4,18,10370,622},},{{8597,57,20,13057,766},{405,101,16,8142,580},},{{10915,26,18,10942,649},},
{0},{{8521,56,20,1436,679},{406,97,22,13067,215},},{0},{{7914,66,23,13041,610,288},},{0},{{299,72,18,7899,368},},{{444,86,22,447,453},},{0},{0},{{10758,9,22,7894,770},},
{0},{0},{0},{0},{0},{0},{0},{{8890,85,22,447,606},},{0},{{7894,13,16,10591,358},{415,100,20,406,441},},{0},{0},{{406,100,22,409,231},},{{403,39,19,7908,373},},{{7907,39,22,403,660},},
{0},{{7895,7,20,7893,441},{288,72,16,7914,469},},{{8173,15,17,10381,752},},{0},{0},{{10758,12,22,7894,770},},{{13017,102,20,406,148},},{0},{{280,70,19,7917,595},},
{{8193,103,18,7935,649},{1436,56,20,1436,219},},{{8419,49,17,8419,646},{1417,52,18,8509,368},},{{303,65,24,13059,242,280},},{{10927,28,18,10942,786},},
{{11931,115,24,13059,613,9861},},{{7935,103,23,13041,664,415},},{{12952,115,17,11031,673},},{0},{0},{{7951,99,23,13041,801,415},},{0},{0},{{406,103,17,8193,252},},{0},{0},{{4745,82,22,447,564},},
{0},{{10275,120,20,9967,330},{444,88,19,9543,484},},{{13017,107,20,406,148},{10758,15,23,13041,774,7895},},{{10942,22,17,10915,673},{7902,43,24,13059,640,331},},
{{10974,114,24,13059,694,9861},},{0},{{9451,84,17,8918,673},},{0},{{9543,78,17,8918,700},},{0},{0},{0},{{8890,83,17,8918,619},},{{7919,24,20,7929,552},{7893,13,23,13041,237,7895},},
{0},{0},{0},{0},{0},{0},{0},{{8509,52,18,8509,676},},{0},{0},{0},{{8314,106,23,13041,691,415},},{{7899,73,20,303,652},},{{11031,114,20,9967,625},},{0},{0},{{8044,9,23,13041,737,7895},},{0},{0},{{10286,114,19,10974,484},},
{{7919,21,20,7929,552},},{0},{{10591,15,16,10591,616},},{{339,17,5,13075,386},},{{9861,115,20,9967,552},{339,93,20,275,441},},{0},{{10915,21,18,10942,649},},
{{8310,81,20,13039,13},{8310,5,16,10591,53},},{{8509,49,18,8509,676},{288,66,24,13059,464,280},},{0},{{7914,61,23,13041,610,288},{4745,84,17,8918,585},},
{{8142,106,23,13041,610,415},{7914,91,22,299,606},},{{7902,93,17,7902,646},},{0},{0},{0},{{7917,63,20,303,679},},{{7915,60,22,299,633},},{{8193,105,16,8142,643},},
{0},{{10286,117,17,11031,474},},{{8419,56,22,1417,633},},{{10391,23,20,7929,679},},{{8918,79,18,9451,649},},{{9795,88,17,8918,783},},{{339,33,23,13041,459,339},},
{{7894,6,20,7893,330},},{0},{0},{{8521,52,24,13059,694,700},},{0},{0},{{7914,70,22,299,606},},{{7895,11,17,10381,474},},{{8173,6,23,13041,737,7895},},{{7902,36,17,7902,646},},
{0},{{7917,72,24,13059,694,280},{331,41,19,7908,595},},{{10758,5,23,13041,774,7895},},{{11031,120,24,13059,640,9861},},{0},{{1436,49,16,8332,247},},{0},{0},{{8918,82,18,9451,649},
{700,58,16,8332,580},},{{275,37,23,13041,237,339},},{{13024,28,20,7929,148},{12980,16,20,8238,148},},{{12952,120,23,13041,664,10286},{7894,9,20,7893,330},},
{0},{{7900,39,22,403,606},{447,88,22,447,342},},{0},{0},{0},{0},{0},{0},{0},{{299,73,23,13041,348,288},},{0},{{7899,64,24,13059,667,280},},{{8332,58,16,8332,616},},{{280,74,23,13041,570,288},},
{{1436,52,16,8332,247},},{0},{0},{{9543,84,18,9451,703},{303,69,23,13041,237,288},},{{7896,11,19,10770,595},},{0},{0},{0},{0},{{12308,117,18,12952,813},},{0},{0},{{9967,113,22,10275,231},},
{0},{0},{{403,36,18,7907,368},},{{288,75,23,13041,459,288},},{{7927,24,16,10895,358},{444,84,23,13041,459,444},},{0},{0},{0},{{7899,69,17,7915,673},},{{11031,117,16,11931,643},},
{{13036,47,2,8597,0},{280,73,16,7914,580},},{{7924,24,20,7929,441},{303,70,17,7915,252},},{{7915,66,22,299,633},},{{10895,23,22,7927,606},},
{0},{{11931,112,23,13041,610,10286},{275,43,16,7900,247},},{{7919,28,16,10895,580},},{0},{{9861,122,18,12952,590},},{{10381,11,18,10370,649},},{0},{{9967,114,23,13041,237,10286},},
{{8597,52,16,8332,780},},{{403,41,18,7907,368},},{0},{{7929,21,22,7927,231},},{{4745,83,19,9543,595},},{{8142,102,16,8142,616},},{0},{{485,86,17,8918,252},},
{{10942,21,22,7927,660},},{{10974,113,23,13041,691,10286},{280,68,16,7914,580},},{{7917,66,20,303,679},{331,32,24,13059,575,331},},{0},{0},{{9543,79,20,485,679},
{303,67,24,13059,242,280},},{{11931,96,20,9967,598},},{0},{0},{0},{{969,58,16,8332,469},},{0},{{339,30,24,13059,464,331},},{{8597,49,16,8332,780},},{{7900,44,23,13041,610,339},
{447,83,23,13041,348,444},},{{7910,41,17,7902,783},},{{7929,26,18,10942,257},{403,31,9,13074,297},},{{10770,10,20,7893,679},},{0},{{13013,59,20,1436,148},
{288,70,24,13059,464,280},},{0},{0},{{8314,105,16,8142,697},{299,64,20,303,330},},{{331,37,24,13059,575,331},},{0},{0},{0},{0},{{11931,118,24,13059,613,9861},},{{8419,52,23,13041,637,969},},
{{700,51,20,13036,535},},{{7919,26,23,13041,570,7924},{7893,11,24,13059,242,7896},},{0},{0},{0},{0},{0},{{10915,18,17,10915,646},},{{10770,5,20,7893,679},},{0},{{288,69,24,13059,464,280},},
{0},{{8142,105,24,13059,613,405},},{{7902,32,24,13059,640,331},{299,69,20,303,330},},{{7927,22,20,7929,330},{444,78,23,13041,459,444},},{0},{{485,80,18,9451,257},},
{{8238,4,16,10591,122},},{{8044,15,22,7894,731},},{0},{{303,62,10,13072,194},},{0},{0},{0},{{10927,20,20,7929,762},},{{8890,88,24,13059,613,4745},},{0},{{12308,114,18,12952,813},
{10381,5,16,10591,643},},{0},{0},{0},{{9967,120,23,13041,237,10286},},{0},{{409,111,16,8142,358},},{0},{{8173,7,18,10370,757},{7927,19,20,7929,330},},{{444,77,22,447,453},},
{{8332,54,20,1436,598},{485,77,18,9451,257},},{{7902,35,20,275,625},},{0},{0},{{7918,70,18,7899,786},},{{7924,20,17,10915,474},{303,73,19,7917,262},},
{0},{0},{{700,53,19,8521,595},},{{275,34,20,275,219},},{0},{0},{{415,105,24,13059,464,405},},{0},{{7951,107,20,406,789},},{0},{{8597,59,20,1436,762},{405,103,16,8142,580},},
{{403,32,22,403,342},},{0},{0},{{10275,112,17,11031,363},{444,80,22,447,453},},{0},{{7902,38,20,275,625},},{{10758,7,22,7894,770},},{{7899,65,24,13059,667,280},},
{{11031,122,24,13059,640,9861},},{{10974,122,20,9967,679},},{0},{0},{{9543,85,23,13041,691,444},{303,74,20,303,219},},{{275,39,20,275,219},},{0},{{969,49,18,8509,479},},
{{8918,84,23,13041,637,444},{7935,104,18,7935,676},},{0},{{7951,100,20,406,789},},{0},{{405,100,16,8142,580},},{0},{0},{0},{{8310,51,20,13036,13},{8310,13,18,10370,65},},
{0},{0},{{10275,117,24,13059,353,9861},{4745,79,16,8890,580},},{{8332,47,22,1417,606},{7899,66,24,13059,667,280},},{{8314,98,20,406,679},},{{7917,70,16,7914,697},},
{{8238,10,18,10370,134},},{{1436,58,19,8521,262},},{{9543,86,17,8918,700},},{{8044,1,22,12987,706},},{{11931,113,20,9967,598},{10286,122,22,10275,453},},
{{8419,47,17,8419,646},{1417,54,22,1417,342},},{{7935,101,18,7935,676},},{0},{{12980,6,20,8238,148},},{0},{{12952,117,17,11031,673},},{0},{0},{0},{{403,38,17,7902,363},},
{0},{0},{{288,73,16,7914,469},},{{8142,101,23,13041,610,415},},{{8314,109,20,406,679},},{{299,91,22,299,342},},{{8238,13,22,7894,103},{331,33,23,13041,570,339},},
{0},{0},{{8044,4,22,7894,731},{7915,68,17,7915,646},},{{8193,102,18,7935,649},},{{1417,59,22,1417,342},},{{303,64,24,13059,242,280},},{0},{{10391,24,22,7927,687},},
{{700,47,19,8521,595},},{0},{{7893,15,24,13059,242,7896},},{0},{{8597,50,23,13041,774,969},},{{447,80,16,8890,358},},{{7907,93,24,13059,667,331},},{{406,104,23,13041,237,415},},
{{8509,54,23,13041,664,969},},{{7914,73,20,303,598},},{{7895,3,22,7894,453},},{{8173,11,23,13041,737,7895},},{0},{{485,84,22,447,231},},{{13027,113,20,9967,148},
{7917,64,23,13041,691,288},},{{331,34,24,13059,575,331},},{0},{{11031,112,20,9967,625},},{0},{0},{0},{{700,50,17,8419,585},},{0},{{7893,12,24,13059,242,7896},},{{9795,85,22,447,770},},
{0},{{447,77,16,8890,358},},{0},{{8521,49,20,1436,679},{406,107,17,8193,252},},{{7910,43,22,403,770},{405,110,20,13073,558},},{0},{0},{{288,68,24,13059,464,280},},
{{7927,23,23,13041,348,7924},},{{8142,104,24,13059,613,405},{4745,86,17,8918,585},},{0},{{331,39,24,13059,575,331},},{{8332,50,17,8419,619},},{0},{{10974,118,17,11031,700},
{280,65,20,303,552},},{0},{{8419,54,22,1417,633},},{{9543,89,20,485,679},},{0},{{10286,115,17,11031,474},{10286,96,22,10275,453},},{0},{{7894,4,24,13059,353,7896},
{415,109,20,406,441},},{{7919,20,18,10942,590},{7893,9,17,10381,252},},{0},{{7951,111,23,13041,801,415},},{{405,107,20,406,552},},{{10915,20,18,10942,649},},
{0},{{8509,48,18,8509,676},{288,67,24,13059,464,280},},{0},{{8142,107,24,13059,613,405},},{0},{{10370,5,16,10591,670},},{{8332,49,23,13041,610,969},},{0},{0},{{8238,6,23,13041,110,7895},},
{{9451,77,24,13059,667,4745},},{{7924,23,22,7927,453},{303,91,17,7915,252},},{{7915,63,20,303,625},},{{10286,118,19,10974,484},{275,35,23,13041,237,339},},
{{7908,33,23,13041,691,339},{1417,45,22,1417,342},},{0},{{7893,6,19,10770,262},},{{10391,22,22,7927,687},},{0},{0},{0},{{9967,122,22,10275,231},},{{8597,47,16,8332,780},
{405,104,19,8314,595},},{{8310,9,22,7894,34},},{0},{{409,109,23,13041,348,415},},{{10275,113,20,9967,330},},{{4745,88,24,13059,575,4745},},{0},{{8314,102,23,13041,691,415},},
{0},{{7899,61,23,13041,664,288},},{0},{0},{{1436,54,16,8332,247},},{{7908,36,17,7902,700},{1417,50,18,8509,368},},{0},{0},{{10391,19,22,7927,687},},{{8918,83,20,485,625},
{700,59,22,1417,564},},{{415,107,24,13059,464,405},},{0},{{10591,4,17,10381,619},{339,37,24,13059,464,331},},{0},{{7900,36,20,275,598},},{0},{{8521,56,23,13041,691,969},},
{0},{0},{0},{{299,72,17,7915,363},},{{10275,114,24,13059,353,9861},{444,86,19,9543,484},},{{7899,67,24,13059,667,280},},{0},{0},{{8193,98,22,409,633},{1436,53,16,8332,247},},
{0},{{10895,21,17,10915,619},},{0},{0},{{8918,86,20,485,625},},{0},{0},{{969,55,23,13041,459,969},},{{7894,13,23,13041,348,7895},{415,100,19,8314,484},},{{7900,43,20,275,598},
{447,84,20,485,330},},{0},{{7907,30,20,275,652},{406,100,19,8314,262},},{{7910,36,22,403,770},{7910,30,20,275,762},},{{10770,13,24,13059,694,7896},},
{0},{0},{{10275,119,24,13059,353,9861},{8173,15,22,7894,731},},{{4745,77,23,13041,570,444},},{0},{0},{{485,88,17,8918,252},},{0},{{280,70,16,7914,580},},{{9543,80,18,9451,703},},
{{8419,49,22,1417,633},},{{7924,25,22,7927,453},},{{10927,28,17,10915,783},},{{275,42,16,7900,247},},{0},{{12952,115,20,9967,652},},{0},{{10381,10,18,10370,649},},
{{7951,99,16,8142,807},},{0},{0},{{9967,96,22,10275,231},{406,103,20,406,219},},{0},{0},{0},{{8142,103,16,8142,616},{409,103,23,13041,348,415},},{{444,88,20,485,441},},
{0},{{10942,22,18,10942,676},},{{280,69,16,7914,580},},{{331,35,24,13059,575,331},},{{9451,84,20,485,652},},{{7924,28,22,7927,453},},{{303,66,24,13059,242,280},},
{0},{0},{{10927,25,24,13059,777,7919},},{{8890,83,20,485,598},},{{7893,13,24,13059,242,7896},},{{9861,118,24,13059,575,9861},},{0},{{10915,16,22,7927,633},{8597,48,16,8332,780},},
{{406,106,20,406,219},},{{405,111,17,8193,585},},{0},{{403,30,20,275,330},},{0},{{7927,20,24,13059,353,7919},},{0},{0},{0},{{331,36,24,13059,575,331},},{{11031,114,23,13041,637,10286},},
{{10974,117,22,10275,687},},{0},{{8044,9,18,10370,757},},{0},{0},{{10286,114,20,9967,441},{7896,77,1,12980,487},},{{7893,10,24,13059,242,7896},},{{8918,76,24,13059,640,4745},},
{{9861,96,20,9967,552},{7894,3,24,13059,353,7896},},{0},{{9861,115,17,11031,585},{339,93,17,7902,474},},{0},{0},{{8310,5,23,13041,41,7895},},{{406,109,24,13059,242,405},},
{{13026,102,22,7951,152},},{{4745,84,20,485,552},},{{8142,106,24,13059,613,405},{409,105,16,8142,358},},{{7902,93,20,275,625},},{0},{0},{0},{{8238,5,16,10591,122},},
{{7915,75,22,299,633},},{0},{{10895,28,23,13041,610,7924},},{{10286,117,20,9967,441},{275,32,24,13059,242,331},},{0},{0},{{700,55,23,13041,570,969},},{{8890,89,24,13059,613,4745},
{415,111,19,8314,484},},{{7951,105,24,13059,804,405},{339,33,20,275,441},},{{7894,6,17,10381,363},},{{10915,22,17,10915,646},},{{12308,115,24,13059,804,9861},
{7900,32,23,13041,610,339},},{0},{0},{0},{{8142,109,24,13059,613,405},},{{7895,11,18,10370,479},},{{8173,6,18,10370,757},},{{4745,89,24,13059,575,4745},},{{8314,101,24,13059,694,405},},
{{331,41,16,7900,580},},{{485,76,20,485,219},},{{9451,79,24,13059,667,4745},},{0},{{1436,49,19,8521,262},},{{7908,39,22,403,687},},{0},{{8918,82,23,13041,637,444},},
{{275,37,20,275,219},},{{7893,4,20,7893,219},},{{13012,32,20,275,148},{7894,9,19,10770,373},},{{415,104,24,13059,464,405},},{{12308,118,24,13059,804,9861},},
{{339,34,24,13059,464,331},},{0},{0},{0},{{8509,59,23,13041,664,969},{288,91,18,7899,479},},{0},{{10275,115,19,10974,373},},{{299,73,20,303,330},},{0},{{7899,64,23,13041,664,288},
{7899,63,20,303,652},},{0},{{280,74,20,303,552},},{{13027,122,20,9967,148},},{{13059,100,15,13026,0},},{{10895,26,18,10942,622},},{{9543,84,17,8918,700},
{303,69,20,303,219},},{{7896,11,22,7894,564},},{0},{0},{{8890,84,16,8890,616},{415,101,24,13059,464,405},},{{9795,77,23,13041,774,444},{969,48,20,1436,441},},
{{339,39,24,13059,464,331},},{{10591,6,22,7894,606},},{0},{{9967,113,19,10974,262},{406,99,16,8142,247},},{{405,99,22,409,564},},{{8509,56,22,1417,660},},
{{10770,12,24,13059,694,7896},{403,36,17,7902,363},},{{8142,99,20,406,598},},{{7927,24,23,13041,348,7924},{444,84,16,8890,469},},{{4745,78,16,8890,580},},
{0},{{299,74,24,13059,353,280},},{{7917,69,16,7914,697},{331,93,22,403,564},},{{9451,80,16,8890,670},},{{13036,56,2,8597,0},{280,73,19,7917,595},},
{0},{{8044,6,18,10370,757},},{0},{0},{{11931,112,18,12952,622},},{{969,53,20,1436,441},},{{9795,78,22,447,770},{7935,100,24,13059,667,405},},{{10591,3,22,7894,606},
{9861,122,17,11031,585},},{{7894,15,16,10591,358},{415,102,20,406,441},},{0},{{7910,38,23,13041,774,339},},{0},{{10770,15,24,13059,694,7896},{403,41,23,13041,348,339},},
{{7907,41,18,7907,676},},{{7929,21,19,10391,262},},{{4745,83,16,8890,580},},{0},{{7902,42,20,275,625},{7902,29,23,13041,637,339},},{0},{0},{{10974,113,18,12952,703},},
{{8238,14,20,13061,96},{331,32,23,13041,570,339},},{0},{{8193,101,22,409,633},},{0},{{11931,117,18,12952,622},{275,44,23,13041,237,339},},{{7908,41,22,403,687},
{1417,58,20,1436,330},},{{9795,83,22,447,770},},{0},{{12952,113,17,11031,673},{415,99,20,406,441},},{0},{{9861,119,24,13059,575,9861},},{0},{{447,83,16,8890,358},},
{{7907,42,22,403,660},},{{7929,26,17,10915,252},{403,31,10,13074,305},},{{10770,10,17,10381,700},{403,42,24,13059,353,331},},{{7895,2,1,12980,376},
{409,101,20,406,330},},{0},{{7927,21,24,13059,353,7919},},{{10275,122,20,9967,330},},{{8314,105,23,13041,691,415},},{0},{{485,83,24,13059,242,4745},},{0},{{13062,77,11,13021,0},
{9451,86,17,8918,673},},{0},{{7908,44,22,403,687},},{0},{0},{0},{{12980,10,20,8238,148},},{0},{0},{0},{{7951,109,24,13059,804,405},},{0},{0},{{8521,48,22,1417,687},},{0},{{8509,50,22,1417,660},},
{0},{{299,69,17,7915,363},},{{7927,22,23,13041,348,7924},{444,78,20,485,441},},{{331,38,24,13059,575,331},},{{7899,75,20,303,652},},{{7918,67,22,299,770},
{280,63,20,303,552},},{{7915,61,24,13059,640,280},},{0},{0},{0},{{275,33,24,13059,242,331},},{0},{{8918,78,24,13059,640,4745},},{{8890,77,20,485,598},{7894,5,24,13059,353,7896},},
{{969,47,24,13059,464,700},},{{12308,114,23,13041,801,10286},},{{10591,9,22,7894,606},{9861,113,20,9967,552},},{{7900,35,24,13059,613,331},},{{8521,53,22,1417,687},},
{{7910,93,18,7907,786},{406,111,24,13059,242,405},},{0},{{7929,28,18,10942,257},},{0},{{8173,7,23,13041,737,7895},{7927,19,17,10915,363},},{{10370,6,16,10591,670},},
{{8332,54,17,8419,619},{485,77,23,13041,237,444},},{{8314,100,24,13059,694,405},{7902,35,23,13041,637,339},},{0},{0},{{9451,76,24,13059,667,4745},},{{7924,20,18,10942,479},
{303,73,16,7914,247},},{0},{{10286,119,17,11031,474},},{{700,53,22,1417,564},},{{275,34,23,13041,237,339},},{{7893,5,17,10381,252},},{0},{0},{{7900,38,24,13059,613,331},
{447,89,24,13059,353,4745},},{{12308,113,24,13059,804,9861},{7951,107,17,8193,810},},{0},{{10915,24,24,13059,640,7919},},{0},{{7907,32,22,403,660},},{0},{0},{0},{{8314,103,24,13059,694,405},
{7902,38,17,7902,646},},{0},{{8332,53,22,1417,606},},{0},{0},{0},{0},{{9543,85,20,485,679},{303,74,23,13041,237,288},},{{275,39,17,7902,252},},{0},{{969,49,23,13041,459,969},},
{{8918,84,20,485,625},{7935,104,17,8193,673},},{{7894,11,20,7893,330},{415,106,24,13059,464,405},},{0},{{339,36,24,13059,464,331},},{{7910,34,22,403,770},
{405,100,19,8314,595},},{0},{{7907,37,22,403,660},},{0},{{8310,13,17,10381,59},},{{7914,67,16,7914,616},},{0},{0},{{8332,56,22,1417,606},},{0},{0},{{8238,10,23,13041,110,7895},
{331,44,20,275,552},},{{1436,58,16,8332,247},},{{7918,73,22,299,770},},{{7915,67,20,303,625},},{0},{{8419,47,18,8509,649},},{{13024,25,20,7929,148},
{7935,101,23,13041,664,415},},{0},{0},{{339,41,24,13059,464,331},},{{415,103,17,8193,474},},{0},{{10381,12,22,7894,633},},{{8597,53,22,1417,770},},{{403,38,20,275,330},},
{{8521,47,22,1417,687},{7907,38,17,7902,673},},{0},{{288,73,19,7917,484},},{{10275,118,24,13059,353,9861},{7927,26,16,10895,358},},{0},{{8173,14,20,13061,725},},
{{331,33,20,275,552},},{0},{{11031,119,16,11931,643},},{{7915,68,20,303,625},},{{8193,102,17,8193,646},},{0},{{9543,83,24,13059,694,4745},},{0},{0},{{7935,102,24,13059,667,405},
{700,47,22,1417,564},},{0},{0},{{10381,9,22,7894,633},},{{9861,120,24,13059,575,9861},{339,42,20,275,441},},{{447,80,23,13041,348,444},},{{10770,9,24,13059,694,7896},},
{{406,104,20,406,219},},{{8509,54,18,8509,676},},{{403,43,24,13059,353,331},},{0},{{8173,11,20,7893,719},{299,65,24,13059,353,280},},{{10370,15,20,7893,652},},
{{485,84,17,8918,252},},{{10942,23,18,10942,676},},{0},{0},{{280,66,22,299,564},},{{10895,18,22,7927,606},},{0},{{10286,112,19,10974,484},},{{7935,99,24,13059,667,405},
{700,50,22,1417,564},},{{10927,24,24,13059,777,7919},},{0},{{969,56,16,8332,469},},{{12978,4,2,10758,0},{9861,117,24,13059,575,9861},},{0},{0},{0},{{7910,43,17,7902,783},},
{{7929,24,22,7927,231},{403,44,24,13059,353,331},},{0},{0},{{10370,10,20,7893,652},{7927,23,24,13059,353,7919},},{{4745,86,20,485,552},},{0},{{8314,107,16,8142,697},
{299,66,20,303,330},},{{8332,50,22,1417,606},},{{11031,96,24,13059,640,9861},},{{10974,118,18,12952,703},{280,65,23,13041,570,288},},{0},{0},{{7924,16,23,13041,459,7924},},
{{10927,21,24,13059,777,7919},},{{13021,84,20,485,148},},{0},{{8918,77,24,13059,640,4745},},{{7919,20,17,10915,585},{7893,9,18,10370,257},},{0},{{9861,114,19,10974,595},
{7951,111,24,13059,804,405},},{{405,107,17,8193,585},},{{10915,20,17,10915,646},{7900,34,24,13059,613,331},},{{10770,7,20,7893,679},},{0},{{8310,6,23,13041,41,7895},},
{0},{{409,104,16,8142,358},},{0},{{8332,49,18,8509,622},{485,78,24,13059,242,4745},},{0},{{7917,74,18,7899,703},},{{8238,6,16,10591,122},},{{8044,13,18,10370,757},
{1436,51,20,13036,202},},{{303,91,18,7899,257},},{{7915,74,16,7914,643},},{{275,35,24,13059,242,331},},{0},{{8918,80,24,13059,640,4745},},{{10927,22,20,7929,762},},
{{10391,22,17,10915,700},{969,45,24,13059,464,700},},{{10591,11,23,13041,610,7895},{7951,104,24,13059,804,405},},{{13012,34,20,275,148},{12952,122,16,11931,670},},
{{10915,25,23,13041,637,7924},{7900,33,24,13059,613,331},},{{12308,112,24,13059,804,9861},{10381,3,22,7894,633},},{{405,104,22,409,564},},{0},{0},{{409,109,16,8142,358},},
{{7895,10,18,10370,479},},{0},{{7902,37,22,403,633},},{{8314,102,24,13059,694,405},{8173,81,20,13039,713},},{0},{{7899,61,20,303,652},},{{9451,78,24,13059,667,4745},},
{0},{{8193,109,23,13041,637,415},},{{7908,36,18,7907,703},{1417,50,17,8419,363},},{{10895,24,22,7927,606},},{{10927,19,20,7929,762},},{{969,50,24,13059,464,700},},
{{8918,83,23,13041,637,444},},{{7894,10,17,10381,363},},{0},{{12308,119,24,13059,804,9861},{7900,93,18,7907,622},},{{405,101,22,409,564},},{{10915,26,24,13059,640,7919},
{7900,36,17,7902,619},},{{7907,29,22,403,660},},{{8521,56,18,8509,703},},{0},{{7929,18,22,7927,231},},{0},{0},{{444,86,16,8890,469},},{0},{0},{{10758,9,16,10591,780},
{8238,9,24,13059,116,7896},},{{1436,53,19,8521,262},},{{7918,91,20,303,762},},{{10895,21,22,7927,606},},{0},{{1417,55,24,13059,353,700},},{{8918,86,17,8918,646},
{7935,106,20,406,652},},{0},{0},{{969,55,20,1436,441},},{{7951,102,20,406,789},{339,38,24,13059,464,331},},{{447,84,19,9543,373},},{0},{{7907,30,23,13041,664,339},
{406,100,16,8142,247},},{0},{{7929,23,22,7927,231},},{{409,98,24,13059,353,405},},{0},{0},{{4745,77,16,8890,580},},{{10942,19,22,7927,660},},{{8238,12,24,13059,116,7896},},
{{7899,68,22,299,660},{485,88,20,485,219},},{{9451,83,16,8890,670},},{0},{{9543,80,17,8918,700},{9543,77,16,8890,697},},{{8044,7,18,10370,757},},
{0},{{7896,7,20,7893,552},},{{275,42,19,7908,262},},{0},{{12980,4,20,8238,148},{7935,103,24,13059,667,405},},{0},{{12308,122,16,11931,807},{10381,10,17,10381,646},},
{{339,43,17,7902,474},},{0},{0},{{406,103,23,13041,237,415},},{{8509,55,23,13041,664,969},},{{7929,20,17,10915,252},{403,29,22,403,342},},{{4745,82,16,8890,580},},
{{409,103,20,406,330},},{{8314,111,20,406,679},},{{485,85,20,485,219},},{{7902,43,22,403,633},{7902,30,23,13041,637,339},},{{8238,4294967295U,4294967295U,8044,71,8044},
{280,69,19,7917,595},},{0},{{8044,10,18,10370,757},{7915,70,17,7915,646},},{{7924,28,19,10391,484},},{0},{0},{0},{{13024,23,20,7929,148},{10391,26,18,10942,703},},
{{8890,83,23,13041,610,444},},{{9795,82,16,8890,780},},{{9861,118,23,13041,570,10286},},{0},{0},{{447,82,16,8890,358},},{{7910,42,20,275,762},{405,111,22,409,564},},
{0},{{8310,40,20,13046,13},{403,30,23,13041,348,339},},{{7914,75,20,303,598},},{{7895,13,18,10370,479},},{0},{0},{{299,67,17,7915,363},},{{13027,115,20,9967,148},},
{{485,82,24,13059,242,4745},},{0},{0},{{1436,47,19,8521,262},},{0},{0},{{10927,26,24,13059,777,7919},{700,48,17,8419,585},},{0},{0},{{10591,15,22,7894,606},{9861,96,23,13041,570,10286},},
{0},{{447,79,16,8890,358},},{0},{0},{{10770,6,17,10381,700},},{0},{0},{{4745,84,23,13041,570,444},},{0},{{299,68,19,7917,373},},{0},{{485,79,24,13059,242,4745},},{{10942,25,22,7927,660},
{8332,48,17,8419,619},},{{8238,5,23,13041,110,7895},},{{7915,60,24,13059,640,280},{1436,50,17,8419,252},},{{8193,105,22,409,633},{7918,68,24,13059,777,280},},
{{10895,28,18,10942,622},},{0},{{8419,56,16,8332,643},{7908,32,23,13041,691,339},},{{7935,109,16,8142,670},},{{10927,23,17,10915,783},{8918,79,24,13059,640,4745},},
{{415,111,20,406,441},},{{7919,22,22,7927,564},{7893,7,17,10381,252},},{{7894,6,18,10370,368},},{{10915,22,20,7929,625},},{{12308,115,23,13041,801,10286},
{7900,32,24,13059,613,331},},{0},{0},{0},{0},{{288,63,20,303,441},},{{8173,6,17,10381,752},},{{10370,7,16,10591,670},},{{10942,28,22,7927,660},},{0},{{485,76,23,13041,237,444},},
{0},{{13036,54,2,8597,0},},{{7924,21,18,10942,479},{303,72,16,7914,247},},{{7908,30,24,13059,694,331},{1417,51,20,13036,313},},{0},{{8918,82,24,13059,640,4745},},
{{7896,12,23,13041,570,7895},{275,37,17,7902,252},},{{7919,19,22,7927,564},{7893,4,23,13041,237,7895},},{0},{0},{{7900,39,24,13059,613,331},{447,88,24,13059,353,4745},},
{0},{0},{0},{0},{{8509,59,20,1436,652},{288,91,17,7915,474},},{{7929,19,19,10391,262},{403,93,23,13041,348,339},},{{10275,115,20,9967,330},},{0},{{8173,3,24,13059,742,7896},},
{0},{0},{{280,74,17,7915,585},},{0},{{8044,3,22,7894,731},},{0},{0},{0},{{1417,48,24,13059,353,700},},{0},{0},{{9795,77,20,485,762},{969,48,23,13041,459,969},},{{12308,117,24,13059,804,9861},
{7951,103,17,8193,810},},{{10591,6,17,10381,619},},{{10915,28,24,13059,640,7919},},{{9967,113,16,11931,247},{406,99,19,8314,262},},{{7910,29,22,403,770},
{405,99,19,8314,595},},{0},{{403,36,20,275,330},},{{8142,99,23,13041,610,415},{409,99,24,13059,353,405},},{{7895,4,22,7894,453},},{{4745,78,23,13041,570,444},},
{0},{0},{{8238,11,24,13059,116,7896},{331,93,19,7908,595},},{0},{{280,73,22,299,564},},{0},{{1436,59,22,1417,231},},{{1417,53,24,13059,353,700},},{0},{{11931,112,17,11031,619},
{275,43,22,403,231},},{{969,53,17,8419,474},},{{12980,76,20,8238,148},{7935,100,23,13041,664,415},},{{9861,122,20,9967,552},},{{7894,15,19,10770,373},
{415,102,23,13041,459,415},},{{7900,41,20,275,598},{447,86,20,485,330},},{{7910,38,16,7900,780},},{0},{{403,41,20,275,330},},{{7907,41,23,13041,664,339},},
{0},{{10370,13,24,13059,667,7896},},{0},{{299,90,20,13071,336},},{0},{0},{{10974,113,17,11031,700},{280,68,22,299,564},},{0},{{8044,5,17,10381,752},},{0},{0},{{9543,82,24,13059,694,4745},},
{{7908,41,17,7902,700},{1417,58,19,8521,373},},{0},{0},{{12952,113,20,9967,652},{415,99,17,8193,474},},{{7919,25,22,7927,564},},{0},{0},{0},{{7907,42,17,7902,673},},
{0},{{10770,10,18,10370,703},},{{409,101,17,8193,363},},{{288,70,18,7899,479},},{0},{{10275,122,23,13041,348,10286},},{{7899,91,17,7915,673},{299,62,8,13072,289},},
{{331,37,18,7907,590},},{0},{0},{{9451,86,20,485,652},{7918,64,23,13041,774,288},},{{7924,18,18,10942,479},},{0},{0},{{7935,98,24,13059,667,405},},{0},{0},{0},{{12978,5,2,10758,0},},
{0},{0},{0},{{405,109,17,8193,585},},{{8521,48,17,8419,700},},{{7895,15,19,10770,484},{288,69,22,299,453},},{0},{0},{{8142,105,23,13041,610,415},{7914,90,20,13071,602},},
{{7927,22,18,10942,368},{444,78,17,8918,474},},{0},{{485,80,24,13059,242,4745},},{{7918,67,17,7915,783},{331,31,8,13074,511},},{{13027,96,20,9967,148},
{10974,119,18,12952,703},},{0},{0},{0},{0},{{13021,83,20,485,148},},{{10391,20,22,7927,687},},{{8890,88,18,9451,622},},{{7919,23,19,10391,595},},{{12308,114,20,9967,789},
{10381,5,22,7894,633},},{{9861,113,17,11031,585},},{0},{0},{{7910,93,17,7902,783},},{0},{0},{{7914,69,20,303,598},{7914,63,22,299,606},},{{8173,7,20,7893,719},
{7927,19,18,10942,368},},{0},{{485,77,24,13059,242,4745},},{0},{{7917,73,22,299,687},},{{10758,4,23,13041,774,7895},{8238,7,16,10591,122},},{{7918,70,24,13059,777,280},},
{0},{0},{{10286,119,20,9967,441},},{0},{{7896,15,24,13059,575,7896},{275,92,20,13064,225},},{{7893,5,18,10370,257},},{0},{{339,35,20,275,441},},{0},{{7951,107,18,7935,813},},
{0},{{10915,24,23,13041,637,7924},},{{13026,99,22,7951,152},},{0},{0},{0},{{8142,111,18,7935,622},},{{7902,38,18,7907,649},},{{8173,4,24,13059,742,7896},},{{331,43,16,7900,580},},
{0},{0},{0},{{1436,55,23,13041,237,969},},{{7908,37,18,7907,703},{1417,49,19,8521,373},},{{7896,10,24,13059,575,7896},{275,39,18,7907,257},},{{12992,65,20,303,148},},
{{10391,18,17,10915,700},{969,49,24,13059,464,700},},{{8918,84,17,8918,646},{7935,104,20,406,652},},{{12952,118,16,11931,670},{7894,11,23,13041,348,7895},},
{0},{{10591,7,20,7893,598},},{{8597,56,18,8509,786},},{0},{0},{0},{{8310,13,20,7893,20},},{0},{{7895,5,19,10770,484},{288,74,23,13041,459,288},},{{299,75,20,303,330},},
{{10275,96,20,9967,330},},{0},{0},{{10758,10,16,10591,780},{8238,10,24,13059,116,7896},},{0},{0},{0},{{13021,77,20,485,148},},{{10895,20,20,7929,598},{1417,54,24,13059,353,700},},
{{7935,101,20,406,652},{7896,47,1,12980,487},},{0},{{8890,86,16,8890,616},},{0},{{415,103,18,7935,479},},{0},{0},{{9967,115,23,13041,237,10286},{406,101,16,8142,247},},
{{403,38,23,13041,348,339},},{{7907,38,20,275,652},},{0},{{288,73,22,299,453},},{{10370,12,24,13059,667,7896},{7927,26,19,10391,373},},{0},{0},{{10758,13,16,10591,780},
{8238,13,24,13059,116,7896},},{{10942,20,24,13059,667,7919},{485,87,20,13062,225},},{{9451,82,16,8890,670},},{{10974,112,18,12952,703},{7917,67,22,299,687},},
{{8193,102,20,406,625},},{{1417,59,24,13059,353,700},},{{9543,76,22,447,687},},{0},{{11931,114,22,10275,606},},{0},{0},{{7893,15,18,10370,257},},{0},{{339,42,23,13041,459,339},},
{0},{{7907,93,18,7907,676},{7907,43,20,275,652},},{{13023,4,20,7893,148},},{{8509,54,17,8419,673},},{{13026,105,22,7951,152},},{0},{{8173,11,17,10381,752},},
{{10370,15,23,13041,664,7895},},{0},{{299,63,24,13059,353,280},},{{10974,115,22,10275,687},},{0},{0},{0},{{8044,11,24,13059,742,7896},},{{11931,119,22,10275,606},{10286,112,16,11931,469},},
{{8419,53,23,13041,637,969},{1417,56,20,1436,330},},{{7896,3,23,13041,570,7895},},{{7893,12,22,7894,231},},{{969,56,19,8521,484},},{0},{{12952,96,20,9967,652},},
{0},{0},{0},{{13026,100,22,7951,152},{7929,24,17,10915,252},},{{10770,4,17,10381,700},{7907,44,24,13059,667,331},},{0},{{10370,10,17,10381,673},},{{8142,104,18,7935,622},},
{0},{{299,66,23,13041,348,288},},{{8238,3,20,7893,89},},{{7918,66,20,303,762},},{0},{{303,63,22,299,231},},{0},{0},{0},{{10286,96,24,13059,464,9861},},{{9795,86,16,8890,780},},
{0},{0},{0},{{9861,114,22,10275,564},},{0},{{10915,20,20,7929,625},},{{10770,7,23,13041,691,7895},},{{8521,54,18,8509,703},},{{8310,6,16,10591,53},},{{8142,107,22,409,606},
{7914,68,17,7915,619},},{{7895,9,24,13059,464,7896},{409,104,19,8314,373},},{0},{{444,76,20,485,441},},{{7902,34,23,13041,637,339},},{{7917,74,17,7915,700},},
{{10758,3,20,7893,762},},{0},{{9451,88,20,485,652},{7918,69,24,13059,777,280},},{0},{0},{0},{{12980,15,20,8238,148},},{{10927,22,23,13041,774,7924},},{{8890,79,20,485,598},
{7893,77,1,12980,154},},{{10591,11,16,10591,616},},{{7894,7,18,10370,368},},{{10915,25,20,7929,625},},{0},{0},{{8310,9,16,10591,53},},{0},{0},{0},{{444,83,20,485,441},},
{0},{0},{{10758,6,20,7893,762},},{0},{0},{{280,91,18,7899,590},},{{8193,109,16,8142,643},},{0},{0},{{10927,19,17,10915,783},{7896,13,24,13059,575,7896},},{{275,36,19,7908,262},},
{{8918,83,18,9451,649},},{{7894,10,18,10370,368},{415,107,22,409,453},},{{7893,3,23,13041,237,7895},},{0},{{7951,101,17,8193,810},},{{7900,36,18,7907,622},},
{0},{{9967,119,16,11931,247},},{0},{0},{0},{0},{{10275,114,22,10275,342},},{0},{{10942,16,23,13041,664,7924},},{0},{{1436,53,22,1417,231},},{{7918,91,23,13041,774,288},{7918,72,16,7914,780},},
{{7924,26,19,10391,484},{303,68,22,299,231},},{{9543,87,20,13062,683},},{{10286,121,20,13063,447},{275,41,17,7902,252},},{{8918,86,18,9451,649},
{7935,106,23,13041,664,415},},{0},{0},{{10391,28,24,13059,694,7919},},{{7951,102,23,13041,801,415},},{0},{{10381,13,20,7893,625},},{{9967,112,16,11931,247},},{{7910,36,16,7900,780},},
{{7929,23,19,10391,262},},{{10770,13,23,13041,691,7895},{8310,15,17,10381,59},},{0},{{10275,119,22,10275,342},{8173,15,24,13059,742,7896},},{{8142,100,23,13041,610,415},},
{{10942,19,17,10915,673},},{0},{{485,88,23,13041,237,444},},{{7918,63,20,303,762},},{0},{{9543,80,20,485,679},},{{8044,7,17,10381,752},},{{7908,43,22,403,687},
{1417,52,24,13059,353,700},},{{7896,7,19,10770,595},{275,31,8,13074,178},},{0},{{10391,25,24,13059,694,7919},},{0},{0},{{10381,10,20,7893,625},},{{339,43,18,7907,479},},
{{7910,39,16,7900,780},},{0},{0},{{8509,55,20,1436,652},{8310,4294967295U,4294967295U,8044,2,8044},},{{7929,20,20,7929,219},},{{7914,72,22,299,606},},{{8142,103,22,409,606},
{409,103,17,8193,363},},{{8314,111,23,13041,691,415},},{{8173,12,20,7893,719},},{{10942,22,24,13059,667,7919},{7902,43,17,7902,646},},{{7917,65,23,13041,691,288},},
{0},{{8044,10,23,13041,737,7895},{7915,70,20,303,625},},{{11031,113,22,10275,633},{8193,100,17,8193,646},},{0},{0},{{8419,50,20,1436,625},{7908,93,16,7900,697},},
{0},{0},{0},{{9861,118,18,12952,590},{339,44,22,403,453},},{0},{{8597,48,22,1417,770},},{{447,82,19,9543,373},},{{8521,50,22,1417,687},},{{7929,25,20,7929,219},},
{{10770,11,18,10370,703},},{{7914,75,23,13041,610,288},},{{8509,52,24,13059,667,700},{7895,13,23,13041,459,7895},},{{8173,9,20,7893,719},{7927,20,23,13041,348,7924},},
{0},{{299,67,18,7899,368},},{{331,36,18,7907,590},},{0},{0},{0},{{8044,9,24,13059,742,7896},{1436,47,22,1417,231},},{{8419,55,20,1436,625},},{{7924,19,24,13059,464,7919},},
{{700,48,18,8509,590},},{0},{0},{{7894,3,22,7894,342},},{0},{{7900,29,20,275,598},},{0},{0},{{10770,6,18,10370,703},},{{406,109,18,7935,257},},{{8509,49,24,13059,667,700},},
{0},{{409,105,22,409,342},},{{299,68,22,299,342},},{{444,79,19,9543,484},},{0},{{8332,48,18,8509,622},},{0},{{8044,12,24,13059,742,7896},{1436,50,22,1417,231},},
{0},{{10895,28,17,10915,619},{7924,22,24,13059,464,7919},},{0},{{275,32,23,13041,237,339},},{0},{{10927,23,18,10942,786},},{{8890,78,17,8918,619},},{{7919,22,17,10915,585},
{7893,7,22,7894,231},},{0},{{10915,22,23,13041,637,7924},},{{12308,115,18,12952,813},{10381,4,16,10591,643},},{{8521,52,17,8419,700},},{0},{0},{0},{{7895,11,24,13059,464,7896},},
{{7927,18,18,10942,368},{444,82,17,8918,474},},{0},{{8332,55,22,1417,606},},{{8314,101,23,13041,691,415},},{0},{{9451,79,22,447,660},},{{7917,91,23,13041,691,288},},
{{303,72,23,13041,237,288},},{0},{{10895,25,24,13059,613,7919},},{{10927,16,22,7927,770},},{{7896,12,24,13059,575,7896},},{{7919,19,19,10391,595},{7893,4,18,10370,257},},
{0},{0},{{12308,118,18,12952,813},},{{339,34,22,403,453},},{0},{{8597,58,22,1417,770},},{0},{{288,91,20,303,441},},{{7929,19,16,10895,247},{403,93,20,275,330},},
{0},{{7914,65,23,13041,610,288},},{{7902,39,18,7907,649},},{0},{0},{0},{0},{0},{0},{0},{{7896,11,24,13059,575,7896},{275,38,18,7907,257},},{{13021,79,20,485,148},{8419,45,24,13059,640,700},},
{0},{0},{{9795,77,17,8918,783},{969,48,18,8509,479},},{{7951,103,18,7935,813},{339,39,22,403,453},},{{12952,119,22,10275,660},{7894,12,23,13041,348,7895},},
{{8597,55,22,1417,770},},{{7900,42,17,7902,619},},{{405,99,16,8142,580},},{0},{0},{{8142,99,18,7935,622},},{0},{0},{{10942,18,20,7929,652},},{{8314,99,18,7935,703},
{299,74,22,299,342},},{{7917,69,22,299,687},{331,93,16,7900,580},},{{10758,11,16,10591,780},},{0},{0},{0},{0},{0},{{8918,88,17,8918,646},},{{969,53,18,8509,479},},
{{7935,100,18,7935,676},},{{12952,114,22,10275,660},},{{7894,15,22,7894,342},{415,102,18,7935,479},},{{7900,41,23,13041,610,339},{447,86,23,13041,348,444},},
{0},{0},{{10770,15,22,7894,687},},{{7907,41,20,275,652},},{0},{0},{0},{0},{{8173,13,17,10381,752},},{0},{{10942,21,24,13059,667,7919},{7899,70,18,7899,676},},{{8238,40,20,13046,82},},
{{8044,5,20,7893,719},},{{9451,85,22,447,660},},{0},{{303,67,22,299,231},},{{7896,5,20,7893,552},},{0},{0},{{12952,113,23,13041,664,10286},{415,99,18,7935,479},},
{0},{0},{0},{0},{{406,105,22,409,231},},{0},{{403,31,7,13074,281},},{{409,101,18,7935,368},},{{288,70,23,13041,459,288},},{{7927,21,18,10942,368},},{{10275,122,18,12952,368},},
{{7899,91,18,7899,676},},{0},{{13017,105,20,406,148},{485,83,18,9451,257},},{{11031,115,23,13041,637,10286},},{{9451,86,23,13041,664,444},{7918,64,20,303,762},},
{{7924,18,23,13041,459,7924},},{0},{0},{0},{{10286,113,22,10275,453},},{{7893,11,18,10370,257},},{{9795,84,16,8890,780},},{0},{0},{{7951,109,18,7935,813},},{0},{{13041,114,13,12308,0},
{405,109,18,7935,590},},{{8310,4,23,13041,41,7895},},{{7895,15,20,7893,441},{288,69,17,7915,474},},{{8509,50,24,13059,667,700},},{0},{{8142,105,18,7935,622},
{7914,60,23,13041,610,288},},{0},{0},{{10942,24,16,10895,670},},{0},{0},{{8044,15,24,13059,742,7896},{7915,72,20,303,625},},{0},{{9543,88,22,447,687},},{0},{{7908,35,24,13059,694,331},},
{0},{{700,54,23,13041,570,969},},{{7919,23,20,7929,552},{969,47,18,8509,479},},{0},{{10591,9,16,10591,616},{9861,113,18,12952,590},},{{405,106,22,409,564},},
{{7900,35,23,13041,610,339},},{{7910,93,20,275,762},},{0},{{8310,7,16,10591,53},{7929,28,24,13059,242,7919},},{0},{0},{{10370,6,22,7894,660},},{0},{{8314,100,18,7935,703},},
{0},{{10758,4,20,7893,762},},{{8193,111,23,13041,637,415},{1436,48,17,8419,252},},{{7924,20,24,13059,464,7919},},{0},{{10286,119,23,13041,459,10286},{7908,38,24,13059,694,331},},
{{8419,58,16,8332,643},},{{7935,111,16,8142,670},},{{7919,16,20,7929,552},{7893,5,23,13041,237,7895},},{{7893,18,1,12980,154},},{{10591,10,16,10591,616},},
{{415,105,18,7935,479},},{0},{{13023,13,20,7893,148},},{{10915,24,18,10942,649},},{{8310,10,16,10591,53},},{{10770,3,22,7894,687},{8521,58,24,13059,694,700},},
{0},{{288,61,20,303,441},},{0},{{8314,103,22,409,687},},{0},{0},{0},{0},{0},{0},{{1417,49,20,1436,330},},{0},{0},{{10391,18,20,7929,679},},{{700,56,16,8332,580},},{{7894,11,18,10370,368},},
{0},{0},{0},{{7900,37,18,7907,622},},{{7907,37,16,7900,670},},{{9967,118,16,11931,247},},{{8509,57,20,13057,656},},{{8142,98,23,13041,610,415},{7914,67,22,299,606},},
{{7895,5,16,10591,469},{288,74,20,303,441},},{{7927,25,23,13041,348,7924},},{{10275,117,18,12952,368},},{{8332,47,24,13059,613,700},{7899,66,22,299,660},},
{0},{0},{0},{{7918,73,16,7914,780},{7918,61,20,303,762},},{0},{0},{{8419,47,24,13059,640,700},},{0},{{275,29,24,13059,242,331},},{0},{{9795,79,20,485,762},{969,54,19,8521,484},},
{{415,103,23,13041,459,415},},{0},{0},{{9967,115,16,11931,247},{406,101,23,13041,237,415},},{{7910,37,16,7900,780},},{{8521,47,16,8332,697},{7907,38,23,13041,664,339},},
{{7895,6,16,10591,469},},{0},{{7927,26,22,7927,342},{444,71,20,13052,424},},{0},{{7902,41,22,403,633},},{{10758,13,23,13041,774,7895},},{0},{{11031,119,22,10275,633},},
{{10974,112,23,13041,691,10286},},{0},{{8419,48,24,13059,640,700},},{{9543,83,22,447,687},},{{7896,4,17,10381,585},},{{11931,114,17,11031,619},},{{10391,24,24,13059,694,7919},
{9795,80,20,485,762},},{0},{{7893,15,23,13041,237,7895},},{0},{{7951,98,22,409,797},{339,42,18,7907,479},},{0},{0},{0},{0},{{7929,27,20,13060,225},},{0},{{409,102,19,8314,373},},
{{10370,15,18,10370,676},},{0},{{10942,23,24,13059,667,7919},{8314,104,23,13041,691,415},},{{10974,115,17,11031,700},},{{331,34,22,403,564},},{0},{0},{{8044,11,23,13041,737,7895},},
{0},{{8419,53,20,1436,625},{1417,56,23,13041,348,969},},{0},{0},{0},{0},{0},{{10915,19,16,10895,643},},{{13041,115,13,12308,0},},{0},{{8310,3,20,7893,20},},{{10770,4,22,7894,687},},
{{409,107,17,8193,363},},{{10370,10,18,10370,676},},{{8142,104,23,13041,610,415},},{0},{{8314,107,22,409,687},},{{8238,3,23,13041,110,7895},{331,39,22,403,564},},
{{7899,72,22,299,660},},{{10974,118,24,13059,694,9861},},{{7915,73,17,7915,646},},{0},{{7908,34,23,13041,691,339},},{{7924,16,24,13059,464,7919},},{0},{{10391,21,16,10895,697},},
{{8918,77,18,9451,649},{700,49,20,1436,552},},{{7894,4,18,10370,368},},{0},{0},{0},{{13041,112,13,12308,0},},{{10770,7,18,10370,703},},{{9967,121,20,13063,225},
{8521,54,17,8419,700},},{{8509,48,24,13059,667,700},{288,67,18,7899,479},},{{8142,107,17,8193,619},{7914,68,22,299,606},},{{13013,54,20,1436,148},},
{0},{{7927,16,22,7927,342},},{{485,78,23,13041,237,444},},{{7917,74,20,303,679},},{{10758,3,23,13041,774,7895},},{{8193,104,20,406,625},{8044,13,24,13059,742,7896},},
{{9451,77,18,9451,676},},{{7924,23,24,13059,464,7919},},{0},{{7908,33,24,13059,694,331},},{{8918,80,18,9451,649},{700,52,20,1436,552},},{{10927,22,18,10942,786},},
{{8890,79,23,13041,610,444},},{0},{0},{{7900,33,22,403,606},},{0},{{8521,59,23,13041,691,969},},{0},{0},{0},{{7895,10,24,13059,464,7896},},{{8173,5,20,7893,719},{444,83,19,9543,484},},
{{4745,88,22,447,564},},{0},{{10758,6,17,10381,783},},{{8332,52,20,1436,598},},{0},{{280,91,17,7915,585},},{0},{{7908,36,24,13059,694,331},},{{10895,24,24,13059,613,7919},
{303,75,23,13041,237,288},},{{10927,19,18,10942,786},},{{275,36,22,403,231},},{{7919,18,17,10915,585},{969,50,23,13041,459,969},},{{7894,10,23,13041,348,7895},
{415,107,19,8314,484},},{{7893,3,20,7893,219},},{{12308,119,18,12952,813},{7900,93,24,13059,613,331},},{{7951,101,22,409,797},{339,37,18,7907,479},},
{{7910,33,20,275,762},},{0},{{8521,56,24,13059,694,700},},{0},{{7929,18,16,10895,247},},{0},{0},{{10275,114,17,11031,363},},{{8332,59,20,1436,598},},{{10942,16,20,7929,652},},
{{280,75,22,299,564},},{{8238,9,23,13041,110,7895},},{{7918,91,18,7899,786},},{{10895,21,24,13059,613,7919},{7924,26,16,10895,469},},{{7915,64,22,299,633},},
{{275,41,22,403,231},},{0},{0},{0},{{10391,28,23,13041,691,7924},},{{7951,102,18,7935,813},},{{13012,30,20,275,148},},{0},{{9967,112,23,13041,237,10286},},{{8597,54,20,1436,762},},
{{7929,23,16,10895,247},},{{10770,13,18,10370,703},{8310,15,20,7893,20},},{{409,98,23,13041,348,415},},{{10275,119,19,10974,373},{444,85,22,447,453},},
{{8142,100,20,406,598},},{{8332,45,24,13059,613,700},},{0},{0},{{9451,83,22,447,660},{7918,63,23,13041,774,288},},{{7917,68,16,7914,697},},{{7915,69,22,299,633},},
{{8044,7,20,7893,719},},{{8419,49,24,13059,640,700},},{{10895,22,20,7929,598},},{{11931,115,20,9967,598},},{{969,52,18,8509,479},},{0},{0},{{8890,80,22,447,606},},
{{339,43,23,13041,459,339},},{0},{0},{0},{{9967,96,24,13059,242,9861},{8521,45,23,13041,691,969},},{{7929,20,23,13041,237,7924},},{0},{0},{{8314,111,18,7935,703},{299,60,20,303,330},},
{{8173,12,23,13041,737,7895},},{{10758,15,16,10591,780},},{{10974,114,20,9967,679},},{{8238,15,18,10370,134},},{{8044,10,20,7893,719},{7915,70,23,13041,637,288},},
{{8193,100,20,406,625},},{{10895,19,20,7929,598},},{0},{{8419,50,23,13041,637,969},},{{10391,26,24,13059,694,7919},},{0},{0},{{9861,118,17,11031,585},},{0},{{7900,30,22,403,606},},
{{447,82,22,447,342},},{0},{{13023,6,20,7893,148},},{0},{{409,100,18,7935,368},},{{7895,13,20,7893,441},},{{8173,9,17,10381,752},{7927,20,18,10942,368},},
{0},{{299,67,23,13041,348,288},},{{331,36,17,7902,585},},{{7899,90,20,13071,656},{485,82,18,9451,257},},{0},{{10974,117,24,13059,694,9861},{280,64,23,13041,570,288},},
{0},{0},{{7924,19,23,13041,459,7924},},{{700,48,23,13041,570,969},},{0},{{7919,21,19,10391,595},{7893,10,18,10370,257},},{0},{0},{{7900,29,23,13041,610,339},{447,79,22,447,342},},
{0},{{13023,3,20,7893,148},},{{10770,6,23,13041,691,7895},},{{406,109,17,8193,252},},{0},{0},{{10370,4,17,10381,673},},{0},{{444,79,22,447,453},},{{485,79,18,9451,257},},
{{8332,48,23,13041,610,969},{7902,33,24,13059,640,331},},{0},{{331,30,24,13059,575,331},},{{9451,89,22,447,660},{7918,68,18,7899,786},},{0},{0},{0},{{7908,32,24,13059,694,331},},
{{10927,23,23,13041,774,7924},},{{8890,78,18,9451,622},},{{9795,88,22,447,770},},{{7951,105,18,7935,813},},{{9861,112,18,12952,590},},{{12308,115,17,11031,810},},
{{8521,52,20,1436,679},},{{405,105,20,406,552},},{0},{0},{{8142,109,18,7935,622},{7914,70,17,7915,619},},{{444,82,22,447,453},},{0},{{10942,28,16,10895,670},
{7902,36,24,13059,640,331},},{{8314,101,18,7935,703},},{{7917,72,17,7915,700},},{{11031,120,20,9967,625},},{{7917,91,20,303,679},},{{7924,21,24,13059,464,7919},},
{{7915,91,20,303,625},},{{7908,39,24,13059,694,331},},{0},{{11931,122,16,11931,616},},{0},{{10391,16,20,7929,679},},{{10591,5,16,10591,616},},{{415,104,18,7935,479},},
{0},{{405,102,20,406,552},},{{8597,45,22,1417,770},},{{8310,11,16,10591,53},},{0},{{403,93,17,7902,363},},{0},{0},{0},{0},{0},{0},{0},{0},{{8193,99,16,8142,643},},{{10895,26,24,13059,613,7919},},
{{10286,120,22,10275,453},},{{1417,48,22,1417,342},},{0},{{8918,85,22,447,633},},{{415,101,18,7935,479},},{{7951,103,23,13041,801,415},{339,39,19,7908,484},},
{{7894,12,20,7893,330},},{{10915,28,18,10942,649},},{{7900,42,22,403,606},{447,85,22,447,342},},{{7907,36,16,7900,670},},{0},{{10770,12,23,13041,691,7895},
{8310,71,20,13052,13},},{{409,99,18,7935,368},},{{7895,4,16,10591,469},},{0},{0},{{299,74,17,7915,363},},{{8238,11,22,7894,103},},{{7899,69,24,13059,667,280},},
{0},{{7918,74,16,7914,780},},{0},{{7908,42,16,7900,697},{1417,53,22,1417,342},},{{10895,23,17,10915,619},},{{8918,88,22,447,633},},{{7896,6,17,10381,585},},
{{7935,100,17,8193,673},},{0},{0},{{7900,41,18,7907,622},{447,86,18,9451,368},},{0},{{9967,114,16,11931,247},},{{10770,15,17,10381,700},},{{406,102,23,13041,237,415},},
{0},{0},{{10370,13,23,13041,664,7895},},{0},{{8173,13,18,10370,757},},{{485,86,22,447,231},},{0},{0},{{8044,5,23,13041,737,7895},},{{11031,118,16,11931,643},},{0},{{303,67,19,7917,262},},
{{7896,5,23,13041,570,7895},},{0},{0},{{8890,82,23,13041,610,444},},{0},{0},{{9861,119,18,12952,590},},{0},{0},{{7910,41,22,403,770},},{{8509,53,20,1436,652},},{{403,42,22,403,342},},
{{288,70,20,303,441},},{{8173,10,22,7894,731},{7927,21,23,13041,348,7924},},{0},{{7899,91,23,13041,664,288},},{0},{0},{{11031,115,16,11931,643},},{{280,67,16,7914,580},},
{{7924,18,20,7929,441},},{0},{{11931,118,17,11031,619},},{{275,17,5,13075,164},},{0},{{7919,26,16,10895,580},},{{9795,84,23,13041,774,444},},{{10591,12,20,7893,598},},
{0},{{7951,109,23,13041,801,415},},{{7910,44,22,403,770},},{{405,109,23,13041,570,415},},{{8310,4,20,7893,20},},{0},{0},{{10370,11,18,10370,676},{4745,85,23,13041,570,444},},
{{8142,105,17,8193,619},{7914,60,20,303,598},},{{7902,32,23,13041,637,339},},{0},{0},{0},{{10974,119,24,13059,694,9861},{8238,4,23,13041,110,7895},},{0},{{8193,106,20,406,625},},
{0},{{275,33,23,13041,237,339},},{{7908,35,23,13041,691,339},{1417,47,22,1417,342},},{{10391,20,16,10895,697},},{{8918,78,22,447,633},{700,54,20,1436,552},},
{{7894,5,18,10370,368},},{0},{0},{0},{0},{0},{0},{{288,62,8,13072,400},},{{409,111,23,13041,348,415},},{{288,64,24,13059,464,280},},{{299,70,18,7899,368},},{{8332,54,24,13059,613,700},},
{{8314,100,23,13041,691,415},{7902,35,24,13059,640,331},},{0},{{10758,4,17,10381,783},{8238,7,22,7894,103},},{{8193,111,20,406,625},{1436,48,18,8509,257},},
{0},{{8044,40,20,13046,713},},{0},{0},{0},{{7896,15,23,13041,570,7895},},{0},{0},{0},{{7900,38,18,7907,622},},{{12308,113,22,10275,797},},{{10915,24,17,10915,646},{8597,59,24,13059,777,700},},
{0},{{8521,58,23,13041,691,969},},{{288,46,5,13056,386},},{{8509,47,16,8332,670},{288,61,23,13041,459,288},},{{10275,112,22,10275,342},{444,80,17,8918,474},},
{{8314,103,17,8193,700},{7902,38,24,13059,640,331},},{{8173,4,22,7894,731},{7927,28,20,7929,330},},{{331,43,22,403,564},},{{7899,65,23,13041,664,288},
{7899,60,22,299,660},},{{11031,122,17,11031,646},},{0},{0},{{7908,37,24,13059,694,331},},{0},{{10927,18,18,10942,786},},{{10391,18,23,13041,691,7924},},{0},{0},{0},{{10381,15,16,10591,643},},
{{339,36,18,7907,479},},{{447,71,20,13052,313},},{0},{{9967,118,19,10974,262},{406,98,22,409,231},},{0},{{403,37,22,403,342},},{{288,74,17,7915,474},},
{{8173,1,22,12987,706},{7927,25,20,7929,330},},{{4745,79,23,13041,570,444},},{0},{0},{{10758,10,22,7894,770},},{0},{{280,72,20,303,552},},{0},{0},{{10286,122,17,11031,474},},
{{700,40,20,13046,535},},{{7896,9,18,10370,590},},{{8890,86,22,447,606},},{{9795,79,17,8918,783},{969,54,22,1417,453},},{{339,41,18,7907,479},},
{0},{0},{0},{{7910,37,23,13041,774,339},},{{7929,22,16,10895,247},},{{7895,6,19,10770,484},},{{13074,17,6,13075,2},},{{10275,118,17,11031,363},},{{4745,76,22,447,564},},
{0},{{299,91,17,7915,363},},{{10942,20,18,10942,676},},{0},{{10974,112,20,9967,679},{7917,67,16,7914,697},},{0},{0},{{303,64,20,303,219},},{{7896,4,18,10370,590},},
{{275,30,24,13059,242,331},},{{969,59,22,1417,453},},{{7935,102,22,409,660},{700,47,24,13059,575,700},},{{7893,15,20,7893,219},},{{339,31,9,13074,408},},
{0},{0},{0},{{10770,9,18,10370,703},},{0},{{403,43,19,7908,373},},{{13057,56,11,13013,0},},{{409,102,22,409,342},},{0},{0},{{8314,104,20,406,679},{299,63,22,299,342},},
{0},{0},{0},{0},{{8044,11,18,10370,757},},{0},{{8419,53,17,8419,646},{1417,56,18,8509,368},},{{7935,99,22,409,660},{700,50,24,13059,575,700},},{{10927,24,18,10942,786},},
{0},{{10591,13,17,10381,619},{9861,117,19,10974,595},},{0},{0},{0},{0},{{8310,3,23,13041,41,7895},},{{13073,99,11,13017,0},},{{409,107,22,409,342},},{{288,68,19,7917,484},},
{{8142,104,20,406,598},},{0},{0},{{331,39,19,7908,595},},{{8332,50,24,13059,613,700},},{0},{{7915,73,22,299,633},},{{8193,107,17,8193,646},},{{7908,34,20,275,679},},
{0},{{10927,21,18,10942,786},},{{9795,86,22,447,770},},{{8918,77,17,8918,646},{700,49,23,13041,570,969},},{{415,109,19,8314,484},},{{8890,76,22,447,606},
{7893,9,24,13059,242,7896},},{{10381,6,20,7893,625},},{{405,107,24,13059,575,405},},{{7900,34,23,13041,610,339},{447,78,16,8890,358},},{0},{{8521,54,20,1436,679},},
{{288,67,17,7915,474},},{0},{{7895,9,18,10370,479},},{0},{0},{{8332,49,24,13059,613,700},{485,78,18,9451,257},},{{10942,26,16,10895,670},{7902,34,24,13059,640,331},},
{0},{{8193,104,23,13041,637,415},},{{7918,69,18,7899,786},{280,61,20,303,552},},{{303,91,24,13059,242,280},},{0},{{8419,59,22,1417,633},},{{8918,80,23,13041,637,444},
{700,52,17,8419,585},},{{275,93,22,403,231},},{{8890,79,18,9451,622},{7893,6,24,13059,242,7896},},{{969,45,22,1417,453},},{{7951,104,18,7935,813},
{339,32,22,403,453},},{0},{0},{{8521,59,20,1436,679},},{0},{0},{0},{0},{{10275,113,19,10974,373},},{{4745,88,17,8918,585},},{{7902,37,24,13059,640,331},},{{10758,6,18,10370,786},},
{{8332,52,17,8419,619},},{{9451,78,17,8918,673},},{{280,91,20,303,552},},{0},{{1436,54,23,13041,237,969},},{0},{{7896,13,22,7894,564},},{0},{{7919,18,20,7929,552},
{969,50,18,8509,479},},{{7935,105,22,409,660},},{0},{{12308,119,17,11031,810},},{{10591,4,22,7894,606},},{{13023,15,20,7893,148},},{{10915,26,22,7927,633},},
{{9967,119,22,10275,231},},{{8509,58,22,1417,660},},{{8310,12,22,7894,34},},{{10370,3,22,7894,660},},{0},{{299,72,22,299,342},},{{7899,67,20,303,652},},
{0},{0},{{8238,9,18,10370,134},},{{13036,58,2,8597,0},},{{303,68,16,7914,247},},{0},{0},{0},{{12980,59,20,8238,148},},{0},{{10391,28,18,10942,703},{9795,76,22,447,770},},
{{339,38,17,7902,474},},{{415,100,24,13059,464,405},},{0},{0},{{7910,30,24,13059,777,331},{405,98,23,13041,570,415},},{{403,39,23,13041,348,339},},{{10770,13,17,10381,700},
{8310,15,23,13041,41,7895},},{0},{{7895,7,16,10591,469},{288,72,20,303,441},},{{8142,100,17,8193,619},},{0},{0},{0},{{7899,68,24,13059,667,280},},{0},{0},{{8193,103,22,409,633},
{1436,56,16,8332,247},},{{7908,43,16,7900,697},},{{10895,22,23,13041,610,7924},},{{10927,28,22,7927,770},},{0},{{8918,89,20,485,625},},{0},{0},{0},{{7910,39,22,403,770},},
{{447,81,20,13039,313},},{0},{0},{0},{{7914,72,16,7914,616},},{0},{0},{{10275,120,24,13059,353,9861},},{0},{0},{{331,35,20,275,552},},{0},{{11031,113,16,11931,643},{8193,100,23,13041,637,415},},
{{10895,19,17,10915,619},},{0},{{8419,50,18,8509,649},{7908,93,22,403,687},},{0},{{700,45,24,13059,575,700},},{0},{{7919,24,16,10895,580},{7893,13,19,10770,262},},
{0},{0},{0},{{8521,50,16,8332,697},},{{405,111,24,13059,575,405},},{0},{0},{{8509,52,22,1417,660},},{{8173,9,18,10370,757},{7927,20,17,10915,363},},{{10370,9,22,7894,660},},
{0},{{331,36,20,275,552},},{{7899,73,16,7914,670},{485,82,17,8918,252},},{{11031,114,16,11931,643},{7918,65,22,299,770},},{0},{{303,60,20,303,219},},
{0},{{7924,19,18,10942,479},},{{10927,26,17,10915,783},{700,48,24,13059,575,700},},{0},{{7919,21,16,10895,580},{7893,10,17,10381,252},},{0},{0},{{10381,7,17,10381,646},},
{{9861,115,24,13059,575,9861},{339,93,24,13059,464,331},},{0},{{10915,21,22,7927,633},},{{406,109,20,406,219},},{{8509,49,22,1417,660},},{0},{{10370,4,22,7894,660},},
{{7914,91,18,7899,622},},{0},{{7899,74,16,7914,670},{485,79,23,13041,237,444},},{{8332,48,24,13059,613,700},{7902,33,23,13041,637,339},},{{280,60,23,13041,570,288},},
{0},{0},{{7924,22,18,10942,479},},{0},{0},{0},{{10391,23,16,10895,697},},{{8890,89,20,485,598},{8890,78,23,13041,610,444},},{{7893,7,24,13059,242,7896},},{0},{{7894,6,24,13059,353,7896},},
{0},{{8521,52,23,13041,691,969},},{{405,105,17,8193,585},},{0},{0},{{8142,109,17,8193,619},{7914,70,18,7899,622},},{{13013,52,20,1436,148},{288,65,24,13059,464,280},},
{{4745,89,20,485,552},},{{8332,55,24,13059,613,700},},{{8314,101,17,8193,700},},{{7917,72,20,303,679},},{0},{{7917,91,17,7915,700},},{0},{{1436,49,20,1436,219},},
{0},{{12987,76,0,8310,0},},{{275,37,24,13059,242,331},},{{7893,4,24,13059,242,7896},},{0},{{7894,9,24,13059,353,7896},},{{415,104,17,8193,474},},{{7900,39,18,7907,622},
{447,88,18,9451,368},},{{7910,32,22,403,770},{405,102,19,8314,595},},{{8597,58,24,13059,777,700},},{{403,35,22,403,342},},{0},{{13013,49,20,1436,148},},
{0},{0},{{7902,39,24,13059,640,331},{299,73,19,7917,373},},{0},{{13017,98,20,406,148},},{{280,74,24,13059,575,280},},{{331,42,16,7900,580},},{{1436,52,20,1436,219},},
{0},{0},{{9543,84,22,447,687},{303,69,19,7917,262},},{{1417,48,17,8419,363},},{{7935,107,23,13041,664,415},},{0},{{415,101,23,13041,459,415},},{0},{{13012,39,20,275,148},
{12952,119,16,11931,670},},{{10915,28,17,10915,646},{8597,55,24,13059,777,700},},{0},{{7907,36,23,13041,664,339},},{{7910,29,24,13059,777,331},},{{10770,12,20,7893,679},},
{{8142,99,24,13059,613,405},{409,99,23,13041,348,415},},{0},{0},{0},{{8332,57,20,13057,602},},{{8238,11,17,10381,128},},{{13061,13,11,13023,0},{485,89,23,13041,237,444},},
{0},{0},{{7924,24,16,10895,469},},{{1417,53,19,8521,373},},{{10895,23,18,10942,622},},{0},{{7896,6,22,7894,564},},{{7919,28,20,7929,552},},{{12952,114,16,11931,670},},
{{415,102,24,13059,464,405},},{{10381,11,22,7894,633},},{0},{{9967,114,19,10974,262},},{{8597,52,20,1436,762},},{{406,102,16,8142,247},},{0},{0},{{10370,13,18,10370,676},},
{{8142,102,20,406,598},},{{8173,13,23,13041,737,7895},{7927,8,20,12978,319},},{0},{{10942,21,18,10942,676},{7899,70,24,13059,667,280},},{0},{0},{0},{{10895,16,22,7927,606},},
{{9543,82,17,8918,700},{9543,79,16,8890,697},},{{11931,96,24,13059,613,9861},{7896,5,18,10370,590},},{0},{{9795,83,17,8918,783},},{{8890,82,16,8890,616},
{415,99,24,13059,464,405},},{{969,58,20,1436,441},},{{12308,120,22,10275,797},},{{9861,119,23,13041,570,10286},{339,30,20,275,441},},{{8597,49,20,1436,762},},
{{7907,92,20,13064,656},{406,105,16,8142,247},},{0},{{7929,26,22,7927,231},},{{10770,10,24,13059,694,7896},{403,42,17,7902,363},},{{7914,74,23,13041,610,288},},
{{7927,21,20,7929,330},},{{10275,122,24,13059,353,9861},{4745,80,16,8890,580},},{{7899,91,24,13059,667,280},},{{299,64,24,13059,353,280},},{0},{0},{{280,67,23,13041,570,288},},
{0},{0},{{11931,118,20,9967,598},},{0},{{10286,113,16,11931,469},},{{7919,26,19,10391,595},},{{13024,21,20,7929,148},},{0},{0},{{7951,109,20,406,789},},{0},{{405,109,24,13059,575,405},},
{{10770,5,24,13059,694,7896},{8310,4,17,10381,59},},{0},{{13060,26,11,13024,0},},{0},{{409,106,20,406,330},},{{7902,32,20,275,625},{299,69,24,13059,353,280},},
{{7927,22,24,13059,353,7919},},{{331,38,17,7902,585},},{{280,63,24,13059,575,280},},{{8238,4,20,7893,89},},{{8044,15,18,10370,757},},{0},{0},{{275,33,20,275,219},},
{{1417,47,19,8521,373},},{{13024,16,20,7929,148},},{{10927,20,24,13059,777,7919},{700,54,17,8419,585},},{{7894,5,17,10381,363},},{0},{{9861,113,24,13059,575,9861},},
{{10915,23,23,13041,637,7924},{405,106,24,13059,575,405},},{0},{0},{{406,111,17,8193,252},},{{8310,7,22,7894,34},},{{409,111,20,406,330},},{0},{{7927,19,24,13059,353,7919},},
{{444,77,18,9451,479},},{{8314,100,20,406,679},},{{13027,118,20,9967,148},},{0},{{8193,111,17,8193,646},{1436,48,23,13041,237,969},},{{7918,70,22,299,770},},
{{303,73,23,13041,237,288},},{{7908,38,18,7907,703},},{0},{{7935,111,22,409,660},},{{7896,15,18,10370,590},{275,34,24,13059,242,331},},{{7893,5,24,13059,242,7896},},
{{10591,10,22,7894,606},},{0},{0},{{12308,113,17,11031,810},{7951,107,24,13059,804,405},},{{9967,117,17,11031,252},},{{8310,10,22,7894,34},},{{8521,58,18,8509,703},},
{0},{0},{{444,80,18,9451,479},},{{8142,111,24,13059,613,405},{7914,64,23,13041,610,288},},{{8173,4,17,10381,752},{7927,28,19,10391,373},},{{10758,7,18,10370,786},},
{{7899,65,20,303,652},},{{11031,122,20,9967,625},},{{10974,122,16,11931,697},},{0},{0},{{303,74,16,7914,247},},{{7896,10,18,10370,590},{275,39,24,13059,242,331},},
{0},{{8918,84,24,13059,640,4745},{700,56,22,1417,564},},{{7894,11,24,13059,353,7896},{415,106,20,406,441},},{0},{{7951,100,24,13059,804,405},},{{339,36,17,7902,474},},
{{8597,56,24,13059,777,700},{405,100,20,406,552},},{0},{0},{0},{{403,37,19,7908,373},},{{8142,98,24,13059,613,405},},{0},{{4745,79,20,485,552},},{{8332,56,17,8419,619},
{8332,47,18,8509,622},},{{8314,98,24,13059,694,405},},{{7917,70,20,303,679},},{0},{{280,72,17,7915,585},},{0},{0},{{11931,113,16,11931,616},{10286,122,18,12952,479},},
{{1417,54,18,8509,368},},{0},{0},{{9795,79,18,9451,786},},{{339,41,23,13041,459,339},},{{7894,14,20,13061,336},{415,103,24,13059,464,405},},{0},{0},{{8597,53,17,8419,783},},
{{7929,22,23,13041,237,7924},},{0},{0},{{10370,12,23,13041,664,7895},{10275,118,20,9967,330},},{0},{{8314,109,24,13059,694,405},{7902,41,16,7900,643},},{{299,91,18,7899,368},},
{{8238,13,18,10370,134},},{0},{0},{0},{0},{{8419,48,23,13041,637,969},},{{12987,16,0,8310,0},{7896,4,23,13041,570,7895},},{0},{{10391,24,18,10942,703},},{{7935,102,17,8193,673},},
{{12952,112,23,13041,664,10286},},{{339,31,10,13074,416},},{{9861,120,20,9967,552},{339,42,24,13059,464,331},},{0},{0},{{10770,9,17,10381,700},},{{406,104,19,8314,262},},
{{403,43,20,275,330},},{{7914,73,16,7914,616},},{0},{{299,65,23,13041,348,288},},{0},{{8314,104,17,8193,700},},{0},{0},{0},{{11031,112,16,11931,643},},{{8044,11,17,10381,752},},
{0},{0},{0},{{10927,24,17,10915,783},},{0},{{10591,13,22,7894,606},{9861,117,20,9967,552},},{0},{{10915,19,22,7927,633},},{0},{{8521,49,16,8332,697},},{{403,44,20,275,330},},
{{10770,4,24,13059,694,7896},},{{7895,12,22,7894,453},},{{288,68,20,303,441},},{{7927,23,19,10391,373},},{0},{{299,66,24,13059,353,280},},{0},{{7899,72,16,7914,670},},
{0},{0},{{8193,107,22,409,633},},{{8419,54,18,8509,649},},{{9543,89,24,13059,694,4745},},{{10927,21,23,13041,774,7924},},{0},{{8918,77,20,485,625},{700,49,18,8509,590},},
{{415,109,16,8142,469},},{{7919,20,22,7927,564},},{0},{{9861,114,24,13059,575,9861},},{{7900,34,20,275,598},{447,78,19,9543,373},},{{10770,7,24,13059,694,7896},},
{0},{{288,67,20,303,441},},{0},{0},{0},{{10370,5,20,7893,652},{7927,16,24,13059,353,7919},},{{485,78,17,8918,252},},{0},{0},{{8193,104,18,7935,649},{280,46,5,13056,497},},
{{7918,69,17,7915,783},{280,61,23,13041,570,288},},{{7924,23,18,10942,479},},{{7915,63,24,13059,640,280},},{{11931,120,20,9967,598},{10286,118,23,13041,459,10286},},
{{8918,80,20,485,625},{700,52,18,8509,590},},{{10927,22,24,13059,777,7919},{275,93,19,7908,262},},{{7893,6,23,13041,237,7895},},{0},{{7951,104,17,8193,810},},
{{12952,122,23,13041,664,10286},{7894,7,24,13059,353,7896},},{{12308,112,20,9967,789},},{{9967,122,18,12952,257},},{0},{0},{0},{{288,60,23,13041,459,288},},{{10275,113,16,11931,358},},
{0},{0},{0},{{8332,52,18,8509,622},{7899,61,24,13059,667,280},},{{9451,78,20,485,652},},{0},{0},{{1436,54,20,1436,219},},{{1417,50,22,1417,342},},{{10927,19,24,13059,777,7919},
{7896,13,17,10381,585},},{{275,36,24,13059,242,331},},{{7919,18,23,13041,570,7924},{969,50,17,8419,474},},{{8918,83,24,13059,640,4745},},{{7894,10,24,13059,353,7896},},
{{12308,119,20,9967,789},{12308,96,23,13041,801,10286},},{{7951,101,24,13059,804,405},},{{405,101,17,8193,585},},{{10915,26,17,10915,646},{7900,36,24,13059,613,331},},
{0},{{8509,45,22,1417,660},},{0},{{7914,66,20,303,598},},{0},{0},{{444,86,23,13041,459,444},},{0},{{280,75,24,13059,575,280},},{{8238,9,17,10381,128},},{0},{{7918,60,22,299,770},},
{0},{{275,41,24,13059,242,331},},{0},{{8918,86,24,13059,640,4745},},{0},{{10391,28,17,10915,700},{969,55,24,13059,464,700},},{{7951,102,24,13059,804,405},{339,38,20,275,441},},
{{7894,13,19,10770,373},{415,100,23,13041,459,415},},{{7900,43,24,13059,613,331},{447,84,24,13059,353,4745},},{0},{{406,100,23,13041,237,415},},{{403,39,16,7900,358},},
{{7907,39,23,13041,664,339},},{0},{{288,72,17,7915,474},},{{8173,15,18,10370,757},{7927,27,20,13060,336},},{0},{0},{{10758,12,23,13041,774,7895},},{0},{0},{{7915,69,16,7914,643},},
{0},{{8419,49,18,8509,649},{1417,52,17,8419,363},},{{10895,22,18,10942,622},},{0},{{275,42,20,275,219},},{{7935,103,20,406,652},},{{12952,115,16,11931,670},},
{{8890,80,16,8890,616},},{0},{{7951,99,20,406,789},{339,43,24,13059,464,331},},{0},{0},{{406,103,16,8142,247},},{0},{0},{{409,103,24,13059,353,405},},{{8314,111,24,13059,694,405},},
{{10275,120,23,13041,348,10286},{444,88,16,8890,469},},{{10758,15,22,7894,770},},{{10942,22,22,7927,660},},{{280,69,20,303,552},},{{1436,40,20,13046,202},},
{{9451,84,16,8890,670},},{{10895,19,18,10942,622},},{{9543,78,16,8890,697},{303,66,20,303,219},},{0},{{7896,2,1,12980,487},},{0},{{8890,83,16,8890,616},
{415,98,24,13059,464,405},},{{7919,24,23,13041,570,7924},{7893,13,20,7893,219},},{{339,44,24,13059,464,331},},{0},{0},{0},{0},{0},{{10770,11,24,13059,694,7896},},{{8509,52,17,8419,673},},
{0},{0},{0},{{8314,106,20,406,679},{299,67,24,13059,353,280},},{{485,82,20,485,219},},{0},{{10974,117,18,12952,703},},{0},{{8044,9,22,7894,731},{1436,47,24,13059,242,700},},
{{7924,19,17,10915,474},},{{10927,26,20,7929,762},},{{10286,114,16,11931,469},},{{7919,8,20,12978,541},{7893,10,20,7893,219},},{{13024,18,20,7929,148},},
{{10591,15,17,10381,619},},{{10381,7,22,7894,633},},{0},{0},{{13041,113,13,12308,0},},{{10770,6,24,13059,694,7896},},{0},{0},{{7914,61,22,299,606},{4745,84,16,8890,580},},
{{8142,106,20,406,598},},{{7902,93,16,7900,643},{299,68,24,13059,353,280},},{{485,79,20,485,219},},{0},{{7917,75,22,299,687},{280,60,24,13059,575,280},},
{0},{{8044,12,22,7894,731},{1436,50,24,13059,242,700},},{{8193,105,17,8193,646},},{0},{{10286,117,16,11931,469},},{0},{0},{{10927,23,24,13059,777,7919},{8918,79,17,8918,646},},
{{9795,88,16,8890,780},},{{7894,77,1,12980,265},},{{9861,112,24,13059,575,9861},},{0},{0},{{405,105,18,7935,590},},{0},{0},{{8142,109,20,406,598},{7914,70,23,13041,610,288},},
{{7895,11,22,7894,453},},{{8173,6,22,7894,731},{7927,18,24,13059,353,7919},},{{7902,36,18,7907,649},},{0},{{7917,72,23,13041,691,288},},{{10758,5,22,7894,770},
{485,76,24,13059,242,4745},},{0},{0},{{1436,49,23,13041,237,969},},{{7908,39,18,7907,703},},{0},{{10927,16,24,13059,777,7919},{700,58,17,8419,585},},{{969,51,20,13036,424},},
{{12980,13,20,8238,148},},{{12952,120,20,9967,652},{7894,9,23,13041,348,7895},},{{415,104,20,406,441},},{{7900,39,17,7902,619},{447,88,17,8918,363},},
{{7951,106,24,13059,804,405},},{{10915,27,20,13060,629},},{0},{{7907,35,22,403,660},},{0},{0},{0},{{299,73,16,7914,358},},{{444,81,20,13039,424},},{{7899,63,24,13059,667,280},},
{{8332,58,17,8419,619},},{{8238,8,20,12978,77},{331,42,19,7908,595},},{{1436,52,17,8419,252},},{0},{0},{{303,69,16,7914,247},},{{7896,11,18,10370,590},
{275,38,24,13059,242,331},},{{12980,0,20,8238,148},{7935,107,16,8142,670},},{{8918,85,24,13059,640,4745},},{{415,101,20,406,441},},{{969,48,24,13059,464,700},},
{{12308,117,17,11031,810},{7951,103,24,13059,804,405},},{{10915,28,20,7929,625},},{{7900,42,24,13059,613,331},{447,85,24,13059,353,4745},},{{9967,113,23,13041,237,10286},
{406,99,20,406,219},},{0},{{8509,56,18,8509,676},},{{409,99,20,406,330},},{{288,75,22,299,453},},{{7927,24,19,10391,373},{444,84,20,485,441},},
{0},{0},{{8314,99,24,13059,694,405},},{{7899,69,18,7899,676},},{{11031,117,17,11031,646},{9451,80,20,485,652},},{{7918,74,22,299,770},},{{303,70,16,7914,247},},
{{8044,6,22,7894,731},},{{10895,23,23,13041,610,7924},},{{8918,88,24,13059,640,4745},},{{11931,112,22,10275,606},{275,43,17,7902,252},},{{7919,28,19,10391,595},
{969,53,24,13059,464,700},},{{9795,78,18,9451,786},},{{12978,26,2,10927,0},},{{7900,41,24,13059,613,331},{447,86,24,13059,353,4745},},{{339,29,22,403,453},},
{{9967,114,22,10275,231},},{{8597,52,23,13041,774,969},},{{403,41,19,7908,373},},{0},{{13026,111,22,7951,152},{7929,21,23,13041,237,7924},},{{10370,13,17,10381,673},
{10275,121,20,13063,336},},{{8142,102,17,8193,619},},{{7902,42,16,7900,643},{299,61,22,299,342},},{{485,86,16,8890,247},},{{10942,21,17,10915,673},},
{{10974,113,22,10275,687},{280,68,17,7915,585},},{{7917,66,23,13041,691,288},},{0},{0},{{9543,82,20,485,679},},{{11931,117,22,10275,606},{11931,96,23,13041,610,10286},},
{{1417,58,24,13059,353,700},},{{9795,83,18,9451,786},},{0},{{969,58,19,8521,484},},{0},{{9861,119,20,9967,552},{339,30,23,13041,459,339},},{{8597,49,17,8419,783},},
{{7900,44,20,275,598},{447,83,20,485,330},},{{7910,41,16,7900,780},},{0},{0},{{7914,74,16,7914,616},{409,101,24,13059,353,405},},{0},{{4745,80,19,9543,595},},
{0},{{299,64,23,13041,348,288},},{0},{0},{0},{{303,61,22,299,231},},{0},{{11931,118,23,13041,610,10286},},{{8419,52,22,1417,633},},{0},{{7919,26,22,7927,564},},{0},{{13012,41,20,275,148},},
{0},{{447,76,20,485,330},},{0},{{10915,18,16,10895,643},},{{10770,5,23,13041,691,7895},},{0},{0},{{8509,50,18,8509,676},},{0},{0},{{444,78,24,13059,464,4745},},{{331,38,20,275,552},},
{{485,80,17,8918,252},},{{8238,4,17,10381,128},},{{8044,15,17,10381,752},},{{1436,45,24,13059,242,700},},{{303,62,9,13072,186},},{{9543,88,24,13059,694,4745},},
{{1417,47,16,8332,358},},{0},{{10927,20,23,13041,774,7924},},{{8890,77,24,13059,613,4745},{7894,5,20,7893,330},},{0},{{10381,5,17,10381,646},},{{10915,23,16,10895,643},},
{0},{0},{{9967,120,22,10275,231},{406,111,20,406,219},},{0},{{7914,69,24,13059,613,280},{409,111,17,8193,363},},{{288,64,22,299,453},},{{299,70,24,13059,353,280},},
{0},{{485,77,19,9543,262},},{{7917,61,22,299,687},},{0},{{1436,48,24,13059,242,700},},{{9451,76,20,485,652},},{{7924,20,22,7927,453},{303,73,20,303,219},},
{0},{0},{{700,53,18,8509,590},},{{7896,15,17,10381,585},},{0},{0},{0},{0},{0},{{9967,117,22,10275,231},},{{405,103,17,8193,585},},{{8521,58,17,8419,700},},{0},{0},{{10275,112,16,11931,358},
{444,80,23,13041,459,444},},{{7914,64,20,303,598},},{0},{0},{{8332,53,18,8509,622},{7899,60,24,13059,667,280},},{{11031,122,23,13041,637,10286},},{0},{0},{0},{{303,74,19,7917,262},},
{{10927,18,24,13059,777,7919},},{0},{{969,49,19,8521,484},},{{415,106,23,13041,459,415},},{0},{{7951,100,23,13041,801,415},},{{339,36,20,275,441},},{{405,100,23,13041,570,415},},
{{7900,37,24,13059,613,331},},{0},{0},{{403,37,16,7900,358},},{0},{0},{{10275,96,24,13059,353,9861},{4745,79,17,8918,585},},{{8332,56,18,8509,622},{8332,47,17,8419,619},},
{0},{{10974,96,22,10275,687},},{0},{{280,72,18,7899,590},},{{9543,86,16,8890,697},},{{7915,67,16,7914,643},},{{10286,122,23,13041,459,10286},},{{8419,47,22,1417,633},
{1417,54,17,8419,363},},{0},{0},{{969,54,24,13059,464,700},},{{339,41,20,275,441},},{{13012,37,20,275,148},{12952,117,16,11931,670},},{0},{0},{{8597,53,18,8509,786},},
{{403,38,16,7900,358},},{{10770,14,20,13061,683},},{0},{{10370,12,20,7893,652},{10275,118,23,13041,348,10286},},{{8142,101,22,409,606},},{{8314,109,23,13041,691,415},},
{{299,91,23,13041,348,288},},{{8238,13,17,10381,128},},{0},{0},{{8044,4,23,13041,737,7895},{7915,68,16,7914,643},},{0},{{8419,48,18,8509,649},{1417,59,23,13041,348,969},},
{0},{{12992,75,20,303,148},},{{10391,24,17,10915,700},{969,59,24,13059,464,700},},{{700,47,18,8509,590},},{{12952,112,16,11931,670},},{0},{{9861,120,23,13041,570,10286},},
{{8597,50,22,1417,770},},{{447,80,19,9543,373},},{{10770,9,20,7893,679},},{{406,104,16,8142,247},},{{8509,54,22,1417,660},},{{7914,73,23,13041,610,288},},
{{7895,3,23,13041,459,7895},{409,102,24,13059,353,405},},{{8173,11,24,13059,742,7896},{299,65,20,303,330},},{{10370,15,24,13059,667,7896},},{0},{{7917,64,22,299,687},},
{0},{0},{{11031,112,23,13041,637,10286},},{{10895,18,18,10942,622},},{0},{{1417,56,24,13059,353,700},},{{700,50,18,8509,590},},{{10927,24,20,7929,762},},{0},{{9795,85,23,13041,774,444},
{969,56,20,1436,441},},{{12952,96,24,13059,667,9861},},{{447,77,17,8918,363},},{0},{{406,107,16,8142,247},},{0},{{7907,44,20,275,652},},{{409,107,24,13059,353,405},},
{0},{{10370,10,24,13059,667,7896},{7927,23,20,7929,330},},{{4745,86,16,8890,580},},{0},{{8238,3,24,13059,116,7896},},{{8332,50,18,8509,622},},{{11031,96,20,9967,625},},
{{10974,118,22,10275,687},{280,62,8,13072,511},},{0},{0},{0},{{10927,21,20,7929,762},},{{10286,115,16,11931,469},{10286,96,23,13041,459,10286},},{0},{0},{{8890,76,24,13059,613,4745},
{7893,9,22,7894,231},},{0},{{7951,111,20,406,789},},{0},{0},{0},{{8509,48,17,8419,673},},{0},{{7914,68,24,13059,613,280},},};

static const struct action_table_entry *action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 8191;
    uint32_t j = 0;
    const struct action_table_entry *entry = 0;
    for (; j < 2; ++j) {
        entry = &action_table[index][j];
        if (entry->target_nfa_state == nfa_state && entry->dfa_state == dfa_state && entry->dfa_symbol == token)
            break;
    }
    if (j >= 2) {
        printf("Internal error!\n");
        return 0;
    }
    return entry;
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static parsed_id build_parse_tree(struct bluebird_default_tokenizer *tokenizer, struct bluebird_token_run *run, struct bluebird_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    struct state_stack stack = {0};
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 8173;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            const struct action_table_entry *entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (!entry) {
                printf("Internal error!\n");
                return 0;
            }
            if (entry->dfa_symbol < 23)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack.depth >= stack.capacity) {
                    if (!grow_state_stack(&stack))
                        break;
                }
                stack.states[stack.depth++] = entry->push_nfa_state;
            }
            apply_actions(&construct_state, entry->actions, end, end + whitespace);
            if (entry->dfa_state == 95) {
                if (stack.depth == 0)
                    break;
                nfa_state = stack.states[--stack.depth];
            } else
                nfa_state = entry->nfa_state;
            whitespace = end - offset - len;
        }
        struct bluebird_token_run *old = run;
        run = run->prev;
        free(old);
    }
    const struct action_table_entry *entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    if (!entry) {
        printf("Internal error!\n");
        return 0;
    }
    apply_actions(&construct_state, entry->actions, offset, offset + whitespace);
    free(stack.states);
    return construct_finish(&construct_state, offset);
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        if (strncmp(text + 1, "operators", 9) == 0) {
            *end_token = false;
            *token = 3;
            return 10;
        } else {
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 2;
        return 1;
    case 61:
        *end_token = false;
        *token = 1;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (strncmp(text + 1, "lat", 3) == 0) {
            *end_token = false;
            *token = 7;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (strncmp(text + 1, "nfix", 4) == 0) {
            *end_token = false;
            *token = 6;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (strncmp(text + 2, "ft", 2) == 0) {
                *end_token = false;
                *token = 8;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (strncmp(text + 2, "ne-comment-token", 16) == 0) {
                *end_token = false;
                *token = 0;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (strncmp(text + 1, "onassoc", 7) == 0) {
            *end_token = false;
            *token = 10;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (strncmp(text + 2, "stfix", 5) == 0) {
                *end_token = false;
                *token = 4;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (strncmp(text + 2, "efix", 4) == 0) {
                *end_token = false;
                *token = 5;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (strncmp(text + 1, "ight", 4) == 0) {
            *end_token = false;
            *token = 9;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 2;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 11;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 9;
        case 1: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 8;
        case 1: return 9;
        case 2: return 4;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 6;
        case 1: return 5;
        default: break;
        }
        break;
    case 5:
        switch (slot) {
        case 0: return 8;
        case 1: return 9;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 9;
        case 1: return 9;
        case 2: return 11;
        case 3: return 8;
        case 4: return 11;
        case 5: return 11;
        case 6: return 8;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 8:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 2;
    case 1: return 1;
    case 2: return 2;
    case 3: return 3;
    case 4: return 2;
    case 5: return 2;
    case 6: return 1;
    case 7: return 0;
    case 8: return 7;
    case 9: return 0;
    case 10: return 0;
    case 11: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 6;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

