// -----------------------------------------------------------------------------
// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "owl-parser.h"

#ifndef _OWL_PARSER_H_
#define _OWL_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file wasn't valid because
    // - it was NULL,
    // - it doesn't support fseek/ftell, or
    // - there was an error while reading it.
    ERROR_INVALID_FILE,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_IDENT = 1,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct owl_ref rule;
    struct owl_ref comment_token;
};

struct parsed_rule {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref body;
};

struct parsed_body {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
    struct owl_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct owl_ref fixity;
    struct owl_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref identifier;
    struct owl_ref exception;
    struct owl_ref rename;
    struct owl_ref string;
    struct owl_ref expr;
    struct owl_ref begin_token;
    struct owl_ref end_token;
    struct owl_ref operand;
};

struct parsed_comment_token {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_number {
    struct source_range range;
    double number;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_grammar parsed_grammar_get(struct owl_ref);
struct parsed_rule parsed_rule_get(struct owl_ref);
struct parsed_body parsed_body_get(struct owl_ref);
struct parsed_operators parsed_operators_get(struct owl_ref);
struct parsed_fixity parsed_fixity_get(struct owl_ref);
struct parsed_assoc parsed_assoc_get(struct owl_ref);
struct parsed_operator parsed_operator_get(struct owl_ref);
struct parsed_expr parsed_expr_get(struct owl_ref);
struct parsed_comment_token parsed_comment_token_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);
struct parsed_number parsed_number_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_identifier_token_offset;
    size_t next_number_token_offset;
    size_t next_string_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 8;
    result.comment_token.empty = result.comment_token._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 9;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 9;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 9;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 11;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 11;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 11;
    result.end_token.empty = result.end_token._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_comment_token){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 11;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_number parsed_number_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_number){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_number result = {
        .number = (union { double n; uint64_t v; }){ .v = read_tree(&offset, ref._tree) }.n,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .string = string,
        .length = string_length,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 9: {
        size_t offset = tree->next_identifier_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_identifier_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 10: {
        size_t offset = tree->next_number_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_number_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 11: {
        size_t offset = tree->next_string_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_string_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_number_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_number_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_number it = parsed_number_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("number");
        if (strcmp("number", slot_name))
            printf("@%s", slot_name);
        printf(" - %f", it.number);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, owl_tree_root_ref(tree), "grammar", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(owl_tree_root_ref(tree));
}
#define IGNORE_TOKEN_WRITE(...)
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void write_number_token(size_t offset, size_t length, double number, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_number_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    union { double n; uint64_t v; } u = { .n = number };
    write_tree(tree, u.v);
    tree->next_number_token_offset = token_offset;
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        if (char_is_whitespace(c)) {
            whitespace++;
            offset++;
            continue;
        }
        uint32_t token;
        bool is_token = false;
        bool end_token = false;
        bool comment = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 0xffffffff) comment = true;
        }
        double number = 0;
        if (char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1]))) {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                token = 22;
            }
        }
        else if (c == '\'' || c == '"') {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    token = 23;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        else if (char_starts_identifier(c)) {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                token = 21;
            }
        }
        if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 0xffffffff) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 21) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 22) {
            write_number_token(offset, token_length, number, tokenizer->info);
        }
        else if (token == 23) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = text[content_offset + i];
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity;
            int precedence;
            do {
                int local;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    uint32_t top_index;
    uint32_t capacity;
    int error;
};
static void continuation_stack_push(struct fill_run_state **top) {
    struct fill_run_continuation *cont = (*top)->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        *top = &cont->stack[cont->top_index];
    } else
        (*top)++;
    (*top)->cont = cont;
}
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[92])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_70(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 3; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_14(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 17; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_30(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 33; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_53(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 56; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_15(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 16; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_17(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 18; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_8(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 19; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_82(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 24;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_72(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 25;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_31(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 32; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_33(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 34; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_46(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 51; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_54(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 55; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_56(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 57; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 58; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_87(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 90; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_88(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 89; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_90(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 91; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_73(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 76; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_74(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 75; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_76(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 77; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_61(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 62; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_58(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_59(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 12: top->state = 60; return;
    case 14: top->state = 61; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_20(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 3: top->state = 35; return;
    case 4: top->state = 36; return;
    case 5: top->state = 37; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_37(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 6: top->state = 38; return;
    case 7: top->state = 39; return;
    case 8: top->state = 40; return;
    case 9: top->state = 41; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 4; return;
    case 23: top->state = 5; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_28(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 29; return;
    case 23: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_50(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 42; return;
    case 23: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_86(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 78; return;
    case 23: top->state = 79; return;
    case 24: top->state = 80; return;
    case 25: top->state = 81; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_62(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 63; return;
    case 23: top->state = 64; return;
    case 24: top->state = 65; return;
    case 25: top->state = 66; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_19(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 20; return;
    case 20: top->state = 1; return;
    case 21: top->state = 21; return;
    case 23: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_51(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 20; return;
    case 20: top->state = 1; return;
    case 21: top->state = 52; return;
    case 23: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_67(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 67; return;
    case 17: top->state = 68; return;
    case 18: top->state = 69; return;
    case 19: top->state = 70; return;
    case 21: top->state = 63; return;
    case 23: top->state = 71; return;
    case 24: top->state = 65; return;
    case 25: top->state = 66; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 8; return;
    case 16: top->state = 25; return;
    case 17: top->state = 26; return;
    case 18: top->state = 27; return;
    case 19: top->state = 28; return;
    case 21: top->state = 29; return;
    case 23: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_44(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 46; return;
    case 16: top->state = 47; return;
    case 17: top->state = 48; return;
    case 18: top->state = 49; return;
    case 19: top->state = 50; return;
    case 21: top->state = 42; return;
    case 23: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_84(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 13: top->state = 82; return;
    case 16: top->state = 83; return;
    case 17: top->state = 84; return;
    case 18: top->state = 85; return;
    case 19: top->state = 86; return;
    case 21: top->state = 78; return;
    case 23: top->state = 79; return;
    case 24: top->state = 80; return;
    case 25: top->state = 81; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_71(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 15: top->state = 72; return;
    case 16: top->state = 67; return;
    case 17: top->state = 68; return;
    case 18: top->state = 69; return;
    case 19: top->state = 70; return;
    case 21: top->state = 63; return;
    case 23: top->state = 71; return;
    case 24: top->state = 65; return;
    case 25: top->state = 66; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_16(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 8; return;
    case 16: top->state = 9; return;
    case 17: top->state = 10; return;
    case 18: top->state = 11; return;
    case 19: top->state = 12; return;
    case 20: top->state = 1; return;
    case 21: top->state = 13; return;
    case 23: top->state = 5; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_77(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 73; return;
    case 11: top->state = 74; return;
    case 16: top->state = 67; return;
    case 17: top->state = 68; return;
    case 18: top->state = 69; return;
    case 19: top->state = 70; return;
    case 21: top->state = 63; return;
    case 23: top->state = 71; return;
    case 24: top->state = 65; return;
    case 25: top->state = 66; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_34(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 8; return;
    case 10: top->state = 30; return;
    case 11: top->state = 31; return;
    case 16: top->state = 25; return;
    case 17: top->state = 26; return;
    case 18: top->state = 27; return;
    case 19: top->state = 28; return;
    case 21: top->state = 29; return;
    case 23: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_57(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 46; return;
    case 10: top->state = 53; return;
    case 11: top->state = 54; return;
    case 16: top->state = 47; return;
    case 17: top->state = 48; return;
    case 18: top->state = 49; return;
    case 19: top->state = 50; return;
    case 21: top->state = 42; return;
    case 23: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_91(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 87; return;
    case 11: top->state = 88; return;
    case 13: top->state = 82; return;
    case 16: top->state = 83; return;
    case 17: top->state = 84; return;
    case 18: top->state = 85; return;
    case 19: top->state = 86; return;
    case 21: top->state = 78; return;
    case 23: top->state = 79; return;
    case 24: top->state = 80; return;
    case 25: top->state = 81; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_21(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 3; return;
    case 1: top->state = 8; return;
    case 10: top->state = 30; return;
    case 11: top->state = 31; return;
    case 16: top->state = 25; return;
    case 17: top->state = 26; return;
    case 18: top->state = 27; return;
    case 19: top->state = 28; return;
    case 21: top->state = 29; return;
    case 23: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_52(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 3; return;
    case 1: top->state = 46; return;
    case 10: top->state = 53; return;
    case 11: top->state = 54; return;
    case 16: top->state = 47; return;
    case 17: top->state = 48; return;
    case 18: top->state = 49; return;
    case 19: top->state = 50; return;
    case 21: top->state = 42; return;
    case 23: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_18(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 8; return;
    case 10: top->state = 14; return;
    case 11: top->state = 15; return;
    case 16: top->state = 9; return;
    case 17: top->state = 10; return;
    case 18: top->state = 11; return;
    case 19: top->state = 12; return;
    case 20: top->state = 1; return;
    case 21: top->state = 13; return;
    case 23: top->state = 5; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_13(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 3; return;
    case 1: top->state = 8; return;
    case 10: top->state = 14; return;
    case 11: top->state = 15; return;
    case 16: top->state = 9; return;
    case 17: top->state = 10; return;
    case 18: top->state = 11; return;
    case 19: top->state = 12; return;
    case 20: top->state = 1; return;
    case 21: top->state = 13; return;
    case 23: top->state = 5; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void (*state_funcs[92])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_58, state_func_1, state_func_2, state_func_3,
    state_func_18, state_func_16, state_func_16, state_func_16,
    state_func_8, state_func_16, state_func_16, state_func_16,
    state_func_3, state_func_13, state_func_14, state_func_15,
    state_func_16, state_func_17, state_func_18, state_func_19,
    state_func_20, state_func_21, state_func_22, state_func_22,
    state_func_22, state_func_22, state_func_22, state_func_22,
    state_func_28, state_func_34, state_func_30, state_func_31,
    state_func_22, state_func_33, state_func_34, state_func_50,
    state_func_50, state_func_37, state_func_50, state_func_50,
    state_func_50, state_func_50, state_func_57, state_func_44,
    state_func_44, state_func_44, state_func_46, state_func_44,
    state_func_44, state_func_44, state_func_50, state_func_51,
    state_func_52, state_func_53, state_func_54, state_func_44,
    state_func_56, state_func_57, state_func_58, state_func_59,
    state_func_86, state_func_61, state_func_62, state_func_77,
    state_func_71, state_func_67, state_func_67, state_func_67,
    state_func_67, state_func_67, state_func_70, state_func_71,
    state_func_72, state_func_73, state_func_74, state_func_67,
    state_func_76, state_func_77, state_func_91, state_func_84,
    state_func_84, state_func_84, state_func_82, state_func_84,
    state_func_84, state_func_84, state_func_86, state_func_87,
    state_func_88, state_func_84, state_func_90, state_func_91,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    continuation_stack_push(&top);
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 59;
    state_func_59(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

struct owl_tree *owl_tree_create_from_string(const char *string) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            return tree;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        return tree;
    }
    switch (top.state) {
    case 0:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 13:
    case 16:
    case 18:
    case 19:
    case 51:
    case 58:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        return tree;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
    return tree;
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    char *str = 0;
    size_t len = 32;
    size_t off = 0;
    while (true) {
        len = len * 3 / 2;
        char *s = realloc(str, len);
        if (!s) {
            free(str);
            return 0;
        }
        str = s;
        off += fread(str + off, 1, len - off, file);
        if (off < len) {
            str[off] = '\0';
            break;
        }
    }
    struct owl_tree *tree = owl_tree_create_from_string(str);
    if (!tree) {
        free(str);
        return 0;
    }
    tree->owns_string = true;
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,16385,0,4096,32768,32769,16385,0,4096,32768,32769,32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,36864,
40960,16385,0,4096,32768,32769,36864,40960,16386,0,4096,32768,32769,36864,40961,16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,4096,
32768,32769,36864,45060,0,4096,32768,32769,36864,45061,0,4096,32768,32769,36864,45062,0,4096,32769,16384,0,4096,32770,32769,16385,0,16384,0,16385,0,
16389,0,16390,0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,0,20480,8192,4096,32768,12289,0,20480,8192,4096,32768,12290,32768,12288,
0,20480,8192,4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,0,20480,8192,4096,32768,12290,32768,12291,0,20480,8192,4096,32769,16385,
0,20480,8192,16385,0,20480,8192,16389,0,20480,45063,24576,40960,16384,0,20480,45063,24576,40960,16385,0,20480,45063,24576,40960,16386,0,20480,45063,24576,
40961,16387,0,20480,45063,24576,40962,0,20480,45063,24576,40963,0,20480,45063,24576,45060,0,20480,45063,24576,45061,0,20480,45063,24576,45062,0,20480,45064,
0,24576,40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,0,24576,40962,0,24576,40963,0,24576,45060,0,24576,45061,0,24576,
45062,0,32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,16384,0,32768,32769,36864,40960,16385,0,32768,32769,36864,40960,16386,0,
32768,32769,36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,32768,32769,36864,45060,0,32768,32769,36864,45061,0,32768,32769,36864,45062,
0,32769,16384,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,36864,40961,16387,0,36864,40962,0,36864,40963,0,36864,45060,0,36864,
45061,0,36864,45062,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,0,36868,40961,16387,0,36868,40962,0,36868,40963,0,36868,45060,0,
36868,45061,0,36868,45062,0,};
static const uint8_t action_table[1024][3][7] = {
{{62,155,18,62,223,1,0,},{165,22,23,152,190,1,0,},},{{169,48,25,85,205,101,2,},{151,86,24,77,129,86,2,},},{{65,171,23,163,190,1,0,},},{{65,169,23,163,190,1,0,},
{163,178,24,77,111,141,2,},},{{65,167,23,163,190,1,0,},{60,33,21,152,96,2,0,},},{{163,168,19,65,161,1,0,},{161,18,16,165,60,2,0,},},{{65,163,23,163,190,1,0,},
{155,18,21,152,38,0,0,},},{{63,131,24,77,191,246,4,},{150,70,23,149,190,1,0,},},{{68,113,21,95,177,0,0,},{66,121,23,163,182,2,0,},{154,22,24,77,41,98,2,},},
{{68,115,21,149,172,0,0,},{163,160,19,65,161,1,0,},},{{169,44,16,169,210,1,0,},{151,90,17,150,146,2,0,},},{{150,104,24,77,199,85,2,},},{0},{{163,156,25,85,121,141,2,},
{161,8,25,85,51,98,2,},},{{149,98,19,150,160,1,0,},},{{155,16,21,67,15,0,0,},{153,54,16,169,130,1,0,},},{0},{{73,169,21,163,172,0,0,},{152,32,24,77,111,97,2,},
{152,10,25,85,121,97,2,},},{{72,37,21,152,172,0,0,},{151,96,24,77,129,86,2,},{149,104,18,150,150,1,0,},},{{153,46,16,169,130,1,0,},},{{60,21,23,152,120,2,0,},
{219,52,24,77,129,102,2,},},{{62,129,18,62,223,1,0,},{165,18,24,77,199,97,2,},},{{66,171,16,65,203,2,0,},{151,104,24,77,129,86,2,},},{0},{{63,127,25,85,197,246,4,},
{150,84,17,150,216,1,0,},},{{165,26,16,165,210,1,0,},{165,20,23,152,190,1,0,},},{{63,129,24,77,191,246,4,},{61,135,21,61,63,1,0,},{152,22,16,165,130,1,0,},},
{0},{{68,89,21,149,172,0,0,},{65,161,24,77,199,141,2,},},{{152,26,21,152,62,1,0,},},{{61,139,23,61,99,1,0,},{60,37,17,165,146,2,0,},},{{169,54,16,169,210,1,0,},
{161,14,24,77,41,98,2,},},{{63,143,25,85,197,246,4,},{169,50,17,169,216,1,0,},},{{67,69,1,219,0,0,0,},{154,18,23,152,28,2,0,},},{{169,42,23,153,190,1,0,},
{151,114,21,149,96,2,0,},},{{155,32,25,85,107,96,2,},},{{66,157,21,163,158,2,0,},{153,68,18,169,150,1,0,},{153,48,16,169,130,1,0,},},{{219,38,24,77,129,102,2,},},
{{169,46,25,85,205,101,2,},{163,120,24,77,111,141,2,},},{{63,153,21,100,167,2,0,},{153,52,21,153,62,1,0,},},{{62,125,21,61,167,1,0,},{61,135,23,61,99,1,0,},
{155,22,25,85,107,96,2,},},{{60,19,17,165,146,2,0,},},{{163,158,23,163,98,1,0,},{161,10,23,152,28,2,0,},},{{61,129,23,61,99,1,0,},{149,74,6,96,227,0,0,},},
{{60,23,18,165,152,2,0,},{60,19,24,77,129,98,2,},},{{75,129,23,63,185,0,0,},{150,94,25,85,205,85,2,},},{{219,54,23,153,120,2,0,},{165,14,21,152,166,1,0,},},
{{151,72,21,149,96,2,0,},{149,104,23,149,98,1,0,},},{{161,18,25,85,51,98,2,},{151,110,17,150,146,2,0,},},{{65,171,24,77,199,141,2,},{165,18,16,165,210,1,0,},
{150,86,25,85,205,85,2,},},{{84,43,10,71,1,0,0,},{61,129,18,62,151,1,0,},{149,82,23,149,98,1,0,},},{{63,135,18,62,215,2,0,},{61,133,21,61,63,1,0,},
{149,86,16,150,130,1,0,},},{{66,169,23,163,182,2,0,},{165,10,21,152,166,1,0,},},{{74,127,21,61,173,0,0,},{150,96,18,150,222,1,0,},},{{61,137,18,62,151,1,0,},
{161,6,21,152,248,1,0,},{152,20,25,85,121,97,2,},},{0},{{74,133,21,61,173,0,0,},},{{62,151,25,85,205,245,4,},},{{65,157,16,65,211,1,0,},},{{70,27,21,155,172,0,0,},
{151,112,21,95,105,2,0,},},{{65,157,18,65,223,1,0,},{153,58,25,85,121,101,2,},},{{71,45,21,153,172,0,0,},{60,37,18,165,152,2,0,},{150,70,21,149,166,1,0,},},
{{149,102,25,85,121,85,2,},},{{163,160,21,163,62,1,0,},},{{219,68,24,77,129,102,2,},{169,44,18,169,222,1,0,},},{{61,139,24,77,111,245,4,},{60,25,24,77,129,98,2,},},
{{65,183,25,85,205,141,2,},},{{163,156,23,163,98,1,0,},{161,8,23,152,28,2,0,},},{{73,179,21,163,172,0,0,},{149,98,17,150,140,1,0,},},{{62,155,23,61,191,1,0,},
{153,16,21,67,47,1,0,},},{{61,151,17,62,141,1,0,},{169,44,24,77,199,101,2,},},{{63,125,23,61,183,2,0,},{61,155,18,62,151,1,0,},{149,76,21,149,62,1,0,},},
{{66,163,18,65,215,2,0,},{151,78,25,85,135,86,2,},},{{153,46,18,169,150,1,0,},},{{71,67,21,99,177,0,0,},{60,21,17,165,146,2,0,},},{{149,80,23,149,98,1,0,},},
{{66,171,18,65,215,2,0,},{169,58,25,85,205,101,2,},},{{63,131,18,62,215,2,0,},},{{60,13,17,165,146,2,0,},{163,168,24,77,111,141,2,},},{{165,20,17,165,216,1,0,},
{154,8,24,77,41,98,2,},},{{163,178,19,65,161,1,0,},{152,22,18,165,150,1,0,},},{{74,135,21,61,173,0,0,},{72,19,21,152,172,0,0,},},{{150,80,25,85,205,85,2,},},
{{154,32,24,77,41,98,2,},},{{61,139,21,61,63,1,0,},{153,42,25,85,121,101,2,},},{{169,54,18,169,222,1,0,},},{{65,159,25,85,205,141,2,},{219,42,17,169,146,2,0,},
{150,72,25,85,205,85,2,},},{{63,137,21,61,159,2,0,},{61,143,16,62,131,1,0,},{154,18,17,165,70,2,0,},},{{163,166,25,85,121,141,2,},{151,114,23,149,120,2,0,},},
{{83,27,10,72,1,0,0,},{153,64,25,85,121,101,2,},},{{77,183,13,66,1,0,0,},{155,26,21,152,38,0,0,},},{{154,26,17,165,70,2,0,},},{{88,127,10,74,1,0,0,},
{70,21,21,155,172,0,0,},{219,38,21,153,96,2,0,},},{{153,52,23,153,98,1,0,},{149,96,25,85,121,85,2,},},{{219,58,25,85,135,102,2,},{155,22,23,152,80,0,0,},},
{{62,139,25,85,205,245,4,},{60,19,23,152,120,2,0,},{150,98,21,149,166,1,0,},},{{163,158,21,163,62,1,0,},{154,6,24,77,41,98,2,},},{{66,183,25,85,197,142,2,},
{163,168,23,163,98,1,0,},},{{153,44,24,77,111,101,2,},},{{71,65,21,153,172,0,0,},{163,172,23,163,98,1,0,},{150,94,23,149,190,1,0,},},{{154,36,25,85,51,98,2,},
{154,14,24,77,41,98,2,},},{{63,127,16,62,203,2,0,},{169,52,23,153,190,1,0,},{149,104,21,149,62,1,0,},},{{66,161,21,163,158,2,0,},{163,166,23,163,98,1,0,},},
{{219,50,16,169,140,2,0,},{169,48,23,153,190,1,0,},},{{61,129,16,62,131,1,0,},{149,82,21,149,62,1,0,},},{{63,135,16,62,203,2,0,},{61,133,23,61,99,1,0,},
{149,86,18,150,150,1,0,},},{{155,8,24,77,95,96,2,},{151,82,21,149,96,2,0,},},{{161,26,18,165,80,2,0,},},{{154,92,21,76,237,1,0,},{151,86,17,150,146,2,0,},},
{{149,90,24,77,111,85,2,},},{{62,135,18,62,223,1,0,},{61,135,17,62,141,1,0,},},{{60,21,24,77,129,98,2,},{60,7,21,152,96,2,0,},},{{65,121,24,77,199,141,2,},
{60,33,17,165,146,2,0,},},{{61,127,18,62,151,1,0,},{153,54,18,169,150,1,0,},},{{90,183,10,73,1,0,0,},},{{155,24,21,152,38,0,0,},},{0},{{163,160,23,163,98,1,0,},},
{{74,137,21,61,173,0,0,},{155,20,18,165,142,0,0,},{153,50,23,153,98,1,0,},},{{62,127,23,61,191,1,0,},},{{75,139,23,63,185,0,0,},{65,179,25,85,205,141,2,},
{150,100,25,85,205,85,2,},},{{161,8,21,152,248,1,0,},{151,70,24,77,129,86,2,},},{{149,98,23,149,98,1,0,},},{{62,137,16,62,211,1,0,},},{{165,8,24,77,199,97,2,},},
{{63,155,18,62,215,2,0,},{61,155,16,62,131,1,0,},{149,76,23,149,98,1,0,},},{{149,114,19,150,160,1,0,},},{0},{{71,55,21,153,172,0,0,},{60,9,25,85,135,98,2,},
{161,36,18,165,80,2,0,},},{{149,80,21,149,62,1,0,},},{{161,32,18,165,80,2,0,},{149,84,24,77,111,85,2,},},{{155,14,18,165,142,0,0,},{150,88,24,77,199,85,2,},},
{{61,129,24,77,111,245,4,},},{{163,182,24,77,111,141,2,},{152,18,25,85,121,97,2,},},{{155,10,17,165,130,0,0,},{153,38,21,153,62,1,0,},},{{66,179,25,85,197,142,2,},
{152,12,24,77,111,97,2,},},{{61,137,16,62,131,1,0,},},{{219,46,16,169,140,2,0,},{152,26,25,85,121,97,2,},},{{154,22,18,165,80,2,0,},{151,80,24,77,129,86,2,},},
{{62,155,25,85,205,245,4,},{150,114,17,150,216,1,0,},},{0},{{61,143,18,62,151,1,0,},{165,32,25,85,205,97,2,},},{{151,88,24,77,129,86,2,},},{{155,24,25,85,107,96,2,},},
{{66,157,17,65,209,2,0,},{155,26,23,152,80,0,0,},},{{75,137,23,63,185,0,0,},{219,68,25,85,135,102,2,},},{{77,167,13,66,1,0,0,},},{{149,96,23,149,98,1,0,},},
{{155,22,21,152,38,0,0,},{150,102,24,77,199,85,2,},},{{60,19,21,152,96,2,0,},{150,98,23,149,190,1,0,},},{{169,64,18,169,222,1,0,},{169,38,21,153,166,1,0,},},
{{155,18,16,165,118,0,0,},},{{153,46,23,153,98,1,0,},},{{71,53,21,153,172,0,0,},{62,135,17,62,217,1,0,},{150,94,21,149,166,1,0,},},{{165,14,17,165,216,1,0,},
{153,42,23,153,98,1,0,},},{{85,129,15,75,1,0,0,},{149,110,24,77,111,85,2,},},{{85,143,15,75,1,0,0,},{62,131,18,62,223,1,0,},},{{163,158,16,65,131,1,0,},},
{{154,10,16,165,60,2,0,},{152,12,21,152,62,1,0,},},{{68,87,21,149,172,0,0,},{61,133,17,62,141,1,0,},{165,22,16,165,210,1,0,},},{{70,37,21,155,172,0,0,},
{154,24,23,152,28,2,0,},},{{161,26,16,165,60,2,0,},},{{63,131,21,61,159,2,0,},{163,178,25,85,121,141,2,},},{{65,167,16,65,211,1,0,},{151,86,18,150,152,2,0,},},
{0},{{65,163,24,77,199,141,2,},{150,78,25,85,205,85,2,},},{{63,143,23,61,183,2,0,},{149,94,21,149,62,1,0,},},{{63,129,25,85,197,246,4,},{151,94,18,150,152,2,0,},},
{{63,135,21,61,159,2,0,},},{{155,24,23,152,80,0,0,},{150,70,25,85,205,85,2,},},{{84,59,10,71,1,0,0,},{161,22,25,85,51,98,2,},},{{169,52,25,85,205,101,2,},},
{{63,143,21,61,159,2,0,},{153,50,21,153,62,1,0,},},{{62,127,17,62,217,1,0,},},{{65,179,23,163,190,1,0,},{150,100,23,149,190,1,0,},},{{163,156,19,65,161,1,0,},},
{{151,100,24,77,129,86,2,},{149,98,21,149,62,1,0,},},{{62,137,18,62,223,1,0,},},{{61,151,21,61,63,1,0,},{219,56,24,77,129,102,2,},{161,12,16,165,60,2,0,},},
{{152,32,18,165,150,1,0,},{149,76,25,85,121,85,2,},},{{169,66,21,99,175,1,0,},{151,78,21,149,96,2,0,},},{{70,15,21,155,172,0,0,},},{{152,36,17,165,140,1,0,},
{152,14,16,165,130,1,0,},},{{219,58,16,169,140,2,0,},},{{63,133,24,77,191,246,4,},{165,26,17,165,216,1,0,},},{{60,9,24,77,129,98,2,},{155,14,16,165,118,0,0,},},
{{65,173,24,77,199,141,2,},{60,13,21,152,96,2,0,},{161,22,17,165,70,2,0,},},{{63,129,21,61,159,2,0,},{61,135,24,77,111,245,4,},{149,88,19,150,160,1,0,},},
{{161,18,21,152,248,1,0,},{153,38,23,153,98,1,0,},},{{84,69,10,71,1,0,0,},{161,16,21,67,229,1,0,},},{{71,59,21,153,172,0,0,},{65,161,18,65,223,1,0,},
{150,80,21,149,166,1,0,},},{{161,12,25,85,51,98,2,},},{{68,105,21,149,172,0,0,},{169,48,16,169,210,1,0,},{154,22,16,165,60,2,0,},},{{155,36,25,85,107,96,2,},},
{{219,42,21,153,96,2,0,},{150,110,18,150,222,1,0,},},{{63,137,25,85,197,246,4,},{163,170,16,65,131,1,0,},{161,20,17,165,70,2,0,},},{{169,42,25,85,205,101,2,},
{163,166,21,163,62,1,0,},},{0},{{67,11,1,60,1,0,0,},{219,38,23,153,120,2,0,},},{{87,103,2,86,5,0,0,},{154,26,21,152,248,1,0,},},{{161,32,24,77,41,98,2,},},
{{93,117,31,93,1,104,2,},{149,96,21,149,62,1,0,},},{{71,51,21,153,172,0,0,},{219,64,16,169,140,2,0,},},{{75,125,23,97,185,0,0,},{61,149,21,89,87,1,0,},
{154,6,23,152,28,2,0,},},{{169,38,23,153,190,1,0,},{154,10,18,165,80,2,0,},},{{155,18,18,165,142,0,0,},{154,12,16,165,60,2,0,},},{{60,23,24,77,129,98,2,},
{154,14,18,165,80,2,0,},},{{65,181,21,92,175,1,0,},{62,135,23,61,191,1,0,},{61,151,24,77,111,245,4,},},{{219,54,17,169,146,2,0,},{152,8,25,85,121,97,2,},},
{{165,14,18,165,222,1,0,},},{{60,11,18,165,152,2,0,},{150,90,16,150,210,1,0,},},{{60,15,21,152,96,2,0,},{169,68,25,85,205,101,2,},},{{149,82,25,85,121,85,2,},},
{0},{{67,43,1,219,0,0,0,},},{{163,176,21,91,87,1,0,},{161,36,21,152,248,1,0,},},{{219,44,24,77,129,102,2,},{165,26,25,85,205,97,2,},},{{169,48,17,169,216,1,0,},
{151,86,16,150,140,2,0,},},{{66,177,21,91,175,2,0,},{65,159,21,163,166,1,0,},},{{65,121,23,163,190,1,0,},},{{169,52,18,169,222,1,0,},{149,94,23,149,98,1,0,},},
{{151,94,16,150,140,2,0,},},{{153,58,19,169,160,1,0,},},{{60,37,24,77,129,98,2,},},{{61,139,25,85,121,245,4,},{165,34,21,94,175,1,0,},},{{66,159,17,65,209,2,0,},
{61,137,25,85,121,245,4,},},{{60,27,18,165,152,2,0,},{153,50,19,169,160,1,0,},},{{150,104,16,150,210,1,0,},},{{65,179,21,163,166,1,0,},{150,100,21,149,166,1,0,},},
{{163,156,17,65,141,1,0,},{161,8,17,165,70,2,0,},},{0},{{65,183,16,65,211,1,0,},{65,171,18,65,223,1,0,},{150,96,16,150,210,1,0,},},{{61,151,23,61,99,1,0,},
{161,12,18,165,80,2,0,},},{{63,125,25,85,197,246,4,},{152,10,17,165,140,1,0,},},{{163,182,19,65,161,1,0,},{151,96,16,150,140,2,0,},},{{165,12,17,165,216,1,0,},
{154,18,25,85,51,98,2,},},{{152,36,19,165,160,1,0,},{152,14,18,165,150,1,0,},},{{154,12,24,77,41,98,2,},{151,108,21,81,113,2,0,},},{{66,171,24,77,191,142,2,},
{61,127,21,61,63,1,0,},{149,110,21,149,62,1,0,},},{{66,171,25,85,197,142,2,},},{{150,84,25,85,205,85,2,},},{{63,129,23,61,183,2,0,},{149,88,17,150,140,1,0,},},
{{66,183,18,65,215,2,0,},{154,32,25,85,51,98,2,},},{{66,179,21,163,158,2,0,},{151,104,17,150,146,2,0,},},{{69,33,20,155,0,0,0,},{65,161,16,65,211,1,0,},
{150,80,23,149,190,1,0,},},{0},{{78,37,11,72,1,0,0,},{72,21,21,152,172,0,0,},},{{72,23,21,152,172,0,0,},{150,114,21,149,166,1,0,},},{{219,42,23,153,120,2,0,},
{150,110,16,150,210,1,0,},},{{165,32,21,152,166,1,0,},{163,170,18,65,151,1,0,},},{{163,166,19,65,161,1,0,},},{{155,26,24,77,95,96,2,},{153,68,25,85,121,101,2,},},
{{153,56,24,77,111,101,2,},},{{62,143,25,85,205,245,4,},{154,26,23,152,28,2,0,},},{{68,101,21,149,172,0,0,},{169,46,17,169,216,1,0,},{165,26,23,152,190,1,0,},},
{{165,24,23,152,190,1,0,},{149,96,19,150,160,1,0,},},{{155,22,17,165,130,0,0,},},{{163,158,24,77,111,141,2,},{154,6,21,152,248,1,0,},},{{151,102,23,149,120,2,0,},},
{{63,139,24,77,191,246,4,},{163,162,16,65,131,1,0,},},{0},{{62,135,21,61,167,1,0,},{165,10,24,77,199,97,2,},{150,94,17,150,216,1,0,},},{{151,98,25,85,135,86,2,},
{151,72,24,77,129,86,2,},},{{60,7,25,85,135,98,2,},},{{60,11,16,165,140,2,0,},{150,90,18,150,222,1,0,},},{{65,171,16,65,211,1,0,},{150,86,17,150,216,1,0,},},
{{154,32,21,152,248,1,0,},{152,12,17,165,140,1,0,},},{{60,15,17,165,146,2,0,},{155,8,21,152,38,0,0,},},{{60,9,21,152,96,2,0,},},{{161,36,23,152,28,2,0,},},
{{63,131,25,85,197,246,4,},{152,20,17,165,140,1,0,},},{{66,121,24,77,191,142,2,},{61,131,18,62,151,1,0,},{149,90,18,150,150,1,0,},},{{219,58,23,153,120,2,0,},},
{{65,121,21,163,166,1,0,},{219,56,23,153,120,2,0,},},{{149,94,17,150,140,1,0,},},{0},{{153,58,17,169,140,1,0,},},{{219,48,23,153,120,2,0,},},{{163,160,24,77,111,141,2,},},
{{66,159,23,163,182,2,0,},{151,90,24,77,129,86,2,},},{{153,50,17,169,140,1,0,},},{{60,35,21,94,105,2,0,},{150,104,18,150,222,1,0,},},{0},{{151,100,23,149,120,2,0,},},
{0},{{152,104,0,70,195,0,0,},{149,114,16,150,130,1,0,},},{{219,66,21,99,105,2,0,},{165,8,18,165,222,1,0,},},{{63,155,24,77,191,246,4,},{152,10,23,152,98,1,0,},},
{{151,96,18,150,152,2,0,},},{{219,52,17,169,146,2,0,},{161,32,17,165,70,2,0,},},{{81,115,11,68,1,0,0,},{152,36,21,152,62,1,0,},},{{67,33,1,60,1,0,0,},
{219,64,25,85,135,102,2,},{154,34,21,94,5,2,0,},},{{68,81,21,149,172,0,0,},{169,58,17,169,216,1,0,},{149,110,23,149,98,1,0,},},{{72,11,21,152,172,0,0,},},
{{152,12,25,85,121,97,2,},},{{152,22,25,85,121,97,2,},{149,88,23,149,98,1,0,},},{{66,183,16,65,203,2,0,},{155,10,23,152,80,0,0,},{151,84,24,77,129,86,2,},},
{{66,179,23,163,182,2,0,},{65,179,16,65,211,1,0,},},{{62,153,21,100,175,1,0,},{169,46,21,153,166,1,0,},},{{151,80,21,149,96,2,0,},},{{169,42,17,169,216,1,0,},},
{{153,56,25,85,121,101,2,},{150,114,23,149,190,1,0,},},{{219,42,25,85,135,102,2,},{163,178,21,163,62,1,0,},},{{161,20,21,152,248,1,0,},{152,30,21,78,87,1,0,},},
{{163,166,17,65,141,1,0,},},{{71,69,21,153,172,0,0,},{153,48,25,85,121,101,2,},},{{165,36,16,165,210,1,0,},},{{62,143,23,61,191,1,0,},{149,40,3,87,203,0,0,},},
{0},{{149,96,17,150,140,1,0,},},{{150,98,24,77,199,85,2,},},{{68,71,21,149,172,0,0,},},{{70,13,21,155,172,0,0,},{151,102,21,149,96,2,0,},},{0},{{153,44,16,169,130,1,0,},
{149,110,25,85,121,85,2,},},{{154,36,18,165,80,2,0,},},{{149,104,24,77,111,85,2,},},{{152,34,21,94,75,1,0,},{151,110,24,77,129,86,2,},},{{62,131,24,77,199,245,4,},
{219,44,18,169,152,2,0,},{165,22,17,165,216,1,0,},},{{219,50,24,77,129,102,2,},{150,86,23,149,190,1,0,},},{{154,32,23,152,28,2,0,},{152,12,19,165,160,1,0,},},
{{81,85,11,68,1,0,0,},{155,8,23,152,80,0,0,},},{{65,167,17,65,217,1,0,},},{{62,155,21,61,167,1,0,},{161,36,25,85,51,98,2,},},{{165,26,21,152,166,1,0,},
{152,20,19,165,160,1,0,},},{{169,48,21,153,166,1,0,},{149,90,16,150,130,1,0,},},{{89,155,11,74,1,0,0,},{60,7,24,77,129,98,2,},{163,168,16,65,131,1,0,},},
{{65,167,24,77,199,141,2,},{65,157,25,85,205,141,2,},{155,20,23,152,80,0,0,},},{{63,143,17,62,209,2,0,},{152,24,25,85,121,97,2,},{149,94,19,150,160,1,0,},},
{{63,139,18,62,215,2,0,},},{{74,129,21,61,173,0,0,},{169,52,24,77,199,101,2,},{153,58,23,153,98,1,0,},},{{66,161,24,77,191,142,2,},{63,143,18,62,215,2,0,},},
{{63,151,17,62,209,2,0,},{152,42,0,70,195,0,0,},},{{66,159,21,163,158,2,0,},},{0},{0},{{65,179,17,65,217,1,0,},{149,104,16,150,130,1,0,},},{{151,100,21,149,96,2,0,},
{149,72,25,85,121,85,2,},},{{69,13,20,155,0,0,0,},{153,54,25,85,121,101,2,},},{{62,137,24,77,199,245,4,},},{{165,8,16,165,210,1,0,},},{{61,155,24,77,111,245,4,},
{152,10,21,152,62,1,0,},},{{63,127,23,61,183,2,0,},{153,46,25,85,121,101,2,},},{{219,52,23,153,120,2,0,},{165,12,21,152,166,1,0,},},{{65,169,24,77,199,141,2,},
{152,36,23,152,98,1,0,},},{0},{{63,133,18,62,215,2,0,},{169,58,23,153,190,1,0,},{149,84,16,150,130,1,0,},},{{219,48,25,85,135,102,2,},{161,18,18,165,80,2,0,},},
{{161,34,21,94,5,2,0,},{154,8,23,152,28,2,0,},},{{149,88,21,149,62,1,0,},},{{155,10,25,85,107,96,2,},},{{66,179,17,65,209,2,0,},{169,68,21,153,166,1,0,},
{151,114,16,150,140,2,0,},},{0},{{66,167,17,65,209,2,0,},{151,80,23,149,120,2,0,},},{{75,127,23,63,185,0,0,},{169,54,25,85,205,101,2,},},{{60,13,24,77,129,98,2,},
{150,114,25,85,205,85,2,},},{{63,155,23,61,183,2,0,},},{{165,32,17,165,216,1,0,},{161,20,23,152,28,2,0,},},{{155,32,16,165,118,0,0,},{153,64,18,169,150,1,0,},},
{{161,32,23,152,28,2,0,},},{{60,27,24,77,129,98,2,},{165,36,18,165,222,1,0,},},{{62,143,21,61,167,1,0,},{219,68,17,169,146,2,0,},},{{67,51,1,219,0,0,0,},
{154,8,21,152,248,1,0,},},{{60,31,21,78,113,2,0,},{154,10,21,152,248,1,0,},},{{77,171,13,66,1,0,0,},{219,64,18,169,152,2,0,},{154,12,17,165,70,2,0,},},
{{61,137,21,61,63,1,0,},{152,14,19,165,160,1,0,},},{{98,119,14,93,1,0,0,},{61,151,25,85,121,245,4,},{155,12,18,165,142,0,0,},},{{155,18,24,77,95,96,2,},
{152,10,19,165,160,1,0,},},{{153,44,18,169,150,1,0,},},{{154,36,16,165,60,2,0,},{154,14,17,165,70,2,0,},},{{169,68,24,77,199,101,2,},{149,78,25,85,121,85,2,},},
{{169,56,23,153,190,1,0,},},{{161,6,23,152,28,2,0,},},{{150,86,21,149,166,1,0,},},{{70,1,21,155,172,0,0,},{149,86,25,85,121,85,2,},},{{66,169,24,77,191,142,2,},
{155,8,17,165,130,0,0,},},{0},{{165,22,18,165,222,1,0,},{161,26,24,77,41,98,2,},},{{161,30,21,78,17,2,0,},{152,20,21,152,62,1,0,},},{{74,139,21,61,173,0,0,},
{69,23,20,155,0,0,0,},},{{65,163,21,163,166,1,0,},{62,151,16,62,211,1,0,},{151,102,25,85,135,86,2,},},{{151,100,25,85,135,86,2,},},{{161,18,23,152,28,2,0,},
{151,82,25,85,135,86,2,},},{{74,131,21,61,173,0,0,},{63,139,16,62,203,2,0,},},{{76,89,1,151,0,0,0,},{61,137,24,77,111,245,4,},{153,58,21,153,62,1,0,},},
{{60,27,17,165,146,2,0,},},{{68,77,21,149,172,0,0,},{63,151,23,61,183,2,0,},},{{169,44,21,153,166,1,0,},},{{155,20,24,77,95,96,2,},},{{62,127,25,85,205,245,4,},
{169,42,24,77,199,101,2,},},{{155,26,17,165,130,0,0,},},{0},{{66,167,24,77,191,142,2,},},{{74,151,21,61,173,0,0,},{163,182,16,65,131,1,0,},},{{161,12,24,77,41,98,2,},
{152,6,24,77,111,97,2,},},{{87,39,2,86,5,0,0,},{66,163,21,163,158,2,0,},{153,42,18,169,150,1,0,},},{{63,129,18,62,215,2,0,},},{{62,133,16,62,211,1,0,},
{165,12,23,152,190,1,0,},},{{62,129,21,61,167,1,0,},{152,36,25,85,121,97,2,},{152,14,24,77,111,97,2,},},{{154,12,18,165,80,2,0,},},{{169,58,21,153,166,1,0,},
{149,84,18,150,150,1,0,},},{{65,173,23,163,190,1,0,},},{{61,131,23,61,99,1,0,},{152,18,18,165,150,1,0,},{151,104,16,150,140,2,0,},},{{61,135,16,62,131,1,0,},
{152,22,21,152,62,1,0,},{149,110,16,150,130,1,0,},},{0},{{155,6,24,77,95,96,2,},},{{152,26,18,165,150,1,0,},},{{165,22,24,77,199,97,2,},},{0},{{155,36,17,165,130,0,0,},
{150,76,24,77,199,85,2,},},{{68,85,21,149,172,0,0,},{150,72,21,149,166,1,0,},},{{68,79,21,149,172,0,0,},{151,88,17,150,146,2,0,},},{{155,32,18,165,142,0,0,},
{153,64,16,169,130,1,0,},},{{67,13,1,60,1,0,0,},{66,157,24,77,191,142,2,},},{0},{{219,68,23,153,120,2,0,},{163,162,24,77,111,141,2,},},{{169,46,23,153,190,1,0,},
{155,20,16,165,118,0,0,},},{{76,99,1,151,0,0,0,},{66,171,23,163,182,2,0,},{163,172,21,163,62,1,0,},},{{62,139,16,62,211,1,0,},{165,6,21,152,166,1,0,},},
{{161,10,18,165,80,2,0,},{149,70,24,77,111,85,2,},},{{169,64,24,77,199,101,2,},{151,76,24,77,129,86,2,},},{{99,61,1,84,1,0,0,},{149,74,8,96,3,1,0,},},
{{165,10,23,152,190,1,0,},{161,14,17,165,70,2,0,},},{{165,14,24,77,199,97,2,},{152,8,18,165,150,1,0,},},{{66,161,23,163,182,2,0,},{161,254,31,154,2,104,2,},
{151,82,23,149,120,2,0,},},{{82,43,11,71,1,0,0,},{169,56,21,153,166,1,0,},},{{63,155,25,85,197,246,4,},{150,90,24,77,199,85,2,},},{{154,10,25,85,51,98,2,},
{153,68,17,169,140,1,0,},},{{63,135,25,85,197,246,4,},{153,66,21,99,75,1,0,},},{0},{{72,13,21,152,172,0,0,},{150,82,24,77,199,85,2,},},{{62,155,17,62,217,1,0,},},
{{163,172,24,77,111,141,2,},{152,20,23,152,98,1,0,},},{0},{0},{{65,157,21,163,166,1,0,},{161,20,25,85,51,98,2,},},{{154,20,17,165,70,2,0,},{152,24,21,152,62,1,0,},},
{{62,127,21,61,167,1,0,},{151,94,24,77,129,86,2,},},{{60,37,21,152,96,2,0,},},{{161,22,16,165,60,2,0,},},{{63,151,21,61,159,2,0,},{165,10,25,85,205,97,2,},},
{{66,159,25,85,197,142,2,},{165,8,25,85,205,97,2,},},{{161,6,25,85,51,98,2,},},{0},{{149,114,17,150,140,1,0,},},{0},{{153,54,21,153,62,1,0,},},{{150,96,24,77,199,85,2,},},
{{161,32,16,165,60,2,0,},},{{66,163,23,163,182,2,0,},{153,42,16,169,130,1,0,},},{{219,64,24,77,129,102,2,},},{{61,143,24,77,111,245,4,},{165,12,25,85,205,97,2,},},
{{62,129,23,61,191,1,0,},{219,48,18,169,152,2,0,},},{{149,80,25,85,121,85,2,},},{{73,183,21,163,172,0,0,},{150,88,17,150,216,1,0,},},{{61,151,16,62,131,1,0,},
{150,84,18,150,222,1,0,},},{{61,131,21,61,63,1,0,},{163,182,17,65,141,1,0,},{152,18,16,165,130,1,0,},},{{61,135,18,62,151,1,0,},{149,88,25,85,121,85,2,},},
{{97,123,23,98,181,0,0,},{151,84,18,150,152,2,0,},},{0},{{219,46,25,85,135,102,2,},{152,26,16,165,130,1,0,},},{{169,50,16,169,210,1,0,},{154,22,25,85,51,98,2,},},
{{169,54,21,153,166,1,0,},},{{155,36,23,152,80,0,0,},},{{150,72,23,149,190,1,0,},},{{169,42,16,169,210,1,0,},{151,114,18,150,152,2,0,},},{{73,159,21,163,172,0,0,},},
{{155,26,16,165,118,0,0,},{153,48,19,169,160,1,0,},},{{71,47,21,153,172,0,0,},},{{62,143,17,62,217,1,0,},{219,68,21,153,96,2,0,},},{{153,52,16,169,130,1,0,},},
{{150,102,23,149,190,1,0,},},{{62,139,18,62,223,1,0,},{165,6,23,152,190,1,0,},{153,42,21,153,62,1,0,},},{{152,36,18,165,150,1,0,},},{{95,107,1,79,1,0,0,},
{169,38,25,85,205,101,2,},{149,100,24,77,111,85,2,},},{{60,23,17,165,146,2,0,},{152,4,0,70,195,0,0,},},{{62,135,24,77,199,245,4,},{163,156,16,65,131,1,0,},},
{{219,44,17,169,146,2,0,},{152,8,16,165,130,1,0,},},{{66,161,25,85,197,142,2,},{169,68,16,169,210,1,0,},{149,78,21,149,62,1,0,},},{{91,157,11,73,1,0,0,},
{151,110,18,150,152,2,0,},},{{60,11,24,77,129,98,2,},{155,12,16,165,118,0,0,},},{{65,167,18,65,223,1,0,},{61,129,21,61,63,1,0,},{161,32,25,85,51,98,2,},},
{{61,133,24,77,111,245,4,},{152,24,23,152,98,1,0,},},{{65,163,18,65,223,1,0,},},{{163,170,19,65,161,1,0,},},{{76,91,1,151,0,0,0,},{152,22,23,152,98,1,0,},},
{{66,169,17,65,209,2,0,},{66,121,21,163,158,2,0,},},{{66,171,17,65,209,2,0,},},{{65,163,17,65,217,1,0,},},{{78,27,11,72,1,0,0,},{65,157,23,163,190,1,0,},},
{{154,20,23,152,28,2,0,},{149,94,25,85,121,85,2,},},{{66,163,25,85,197,142,2,},},{{60,37,23,152,120,2,0,},},{{161,22,18,165,80,2,0,},},{{163,160,16,65,131,1,0,},},
{{90,157,10,73,1,0,0,},{169,44,17,169,216,1,0,},{151,90,16,150,140,2,0,},},{{153,50,25,85,121,101,2,},},{0},{{154,24,25,85,51,98,2,},{151,70,23,149,120,2,0,},},
{{149,98,18,150,150,1,0,},},{{153,54,23,153,98,1,0,},},{{69,11,20,155,0,0,0,},{219,58,18,169,152,2,0,},},{{63,155,21,61,159,2,0,},{61,155,23,61,99,1,0,},},
{{66,163,17,65,209,2,0,},{151,96,25,85,135,86,2,},},{0},{{219,52,25,85,135,102,2,},},{{62,129,17,62,217,1,0,},{219,48,24,77,129,102,2,},},{{151,104,25,85,135,86,2,},},
{{60,9,17,165,146,2,0,},{155,14,25,85,107,96,2,},},{{150,84,16,150,210,1,0,},},{{151,114,17,150,146,2,0,},},{{163,178,16,65,131,1,0,},{152,22,17,165,140,1,0,},},
{{66,183,24,77,191,142,2,},{151,84,16,150,140,2,0,},},{{68,99,21,149,172,0,0,},{65,161,25,85,205,141,2,},},{{60,13,25,85,135,98,2,},},{{63,155,16,62,203,2,0,},
{60,15,25,85,135,98,2,},{154,22,23,152,28,2,0,},},{{62,133,25,85,205,245,4,},{169,54,23,153,190,1,0,},},{{155,36,21,152,38,0,0,},},{{63,137,16,62,203,2,0,},
{61,143,21,61,63,1,0,},{161,20,24,77,41,98,2,},},{{76,87,1,151,0,0,0,},{151,88,21,149,96,2,0,},},{{155,30,21,78,67,0,0,},},{{153,68,19,169,160,1,0,},
{153,48,17,169,140,1,0,},},{{76,85,1,151,0,0,0,},{165,36,24,77,199,97,2,},{155,10,21,152,38,0,0,},},{{61,139,18,62,151,1,0,},{169,46,24,77,199,101,2,},},
{{65,183,23,163,190,1,0,},{153,52,18,169,150,1,0,},},{{65,177,21,91,183,1,0,},{155,22,24,77,95,96,2,},{150,102,21,149,166,1,0,},},{{165,6,25,85,205,97,2,},
{150,98,16,150,210,1,0,},},{{75,133,23,63,185,0,0,},{169,46,16,169,210,1,0,},},{0},{{165,10,16,165,210,1,0,},},{{161,14,21,152,248,1,0,},},{0},{{63,127,21,61,159,2,0,},
{169,68,18,169,222,1,0,},{149,78,23,149,98,1,0,},},{{151,110,16,150,140,2,0,},{149,114,24,77,111,85,2,},},{{219,50,21,153,96,2,0,},},{{61,125,21,61,63,1,0,},
{161,6,24,77,41,98,2,},{149,108,21,81,87,1,0,},},{{65,159,23,163,190,1,0,},},{0},{{79,85,10,68,1,0,0,},},{{163,120,21,163,62,1,0,},{152,20,24,77,111,97,2,},},
{{169,48,24,77,199,101,2,},{151,86,25,85,135,86,2,},},{{149,98,24,77,111,85,2,},},{{153,42,19,169,160,1,0,},},{{60,33,18,165,152,2,0,},{155,32,21,152,38,0,0,},},
{{163,168,18,65,151,1,0,},{154,20,21,152,248,1,0,},},{{153,58,24,77,111,101,2,},},{{70,33,21,155,172,0,0,},{155,24,24,77,95,96,2,},},{0},{{78,9,11,72,1,0,0,},
{163,160,18,65,151,1,0,},},{{70,23,21,155,172,0,0,},{155,26,18,165,142,0,0,},{151,90,18,150,152,2,0,},},{{65,169,18,65,223,1,0,},{150,104,25,85,205,85,2,},},
{0},{{161,8,24,77,41,98,2,},{151,70,21,149,96,2,0,},},{{149,98,16,150,130,1,0,},},{{86,17,21,67,9,0,0,},{66,167,18,65,215,2,0,},{153,54,17,169,140,1,0,},},
{{161,12,21,152,248,1,0,},{152,6,21,152,62,1,0,},},{{152,32,25,85,121,97,2,},{152,10,24,77,111,97,2,},},{{169,56,25,85,205,101,2,},{151,78,24,77,129,86,2,},},
{{153,46,17,169,140,1,0,},},{{60,21,16,165,140,2,0,},{165,36,25,85,205,97,2,},},{{65,169,16,65,211,1,0,},},{{169,58,24,77,199,101,2,},},{{150,88,21,149,166,1,0,},
{149,110,17,150,140,1,0,},},{{60,13,16,165,140,2,0,},},{{61,131,25,85,121,245,4,},{163,158,25,85,121,141,2,},},{{163,178,18,65,151,1,0,},{152,22,19,165,160,1,0,},},
{{70,9,21,155,172,0,0,},{155,6,23,152,80,0,0,},},{{165,20,25,85,205,97,2,},{150,80,24,77,199,85,2,},},{{165,18,21,152,166,1,0,},},{{67,21,1,60,1,0,0,},
{154,22,21,152,248,1,0,},},{{169,54,17,169,216,1,0,},{155,254,31,154,4,104,2,},},{{65,159,24,77,199,141,2,},{150,110,23,149,190,1,0,},{150,72,24,77,199,85,2,},},
{{61,143,23,61,99,1,0,},{161,26,17,165,70,2,0,},},{{70,103,21,155,172,0,0,},{151,88,23,149,120,2,0,},},{{155,32,24,77,95,96,2,},},{{77,157,13,66,1,0,0,},
{66,157,18,65,215,2,0,},{153,48,23,153,98,1,0,},},{{60,27,16,165,140,2,0,},{219,38,25,85,135,102,2,},},{{163,162,18,65,151,1,0,},},{{63,137,24,77,191,246,4,},
{169,52,16,169,210,1,0,},},{{66,161,16,65,203,2,0,},{169,50,18,169,222,1,0,},},{{60,19,16,165,140,2,0,},{150,98,18,150,222,1,0,},},{{154,6,25,85,51,98,2,},},
{{149,74,7,96,243,0,0,},},{{60,23,21,152,96,2,0,},{153,44,25,85,121,101,2,},},{{67,23,1,60,1,0,0,},{161,14,23,152,28,2,0,},{150,94,24,77,199,85,2,},},
{{154,36,24,77,41,98,2,},{154,14,25,85,51,98,2,},},{{62,133,23,61,191,1,0,},{151,98,21,149,96,2,0,},},{{71,49,21,153,172,0,0,},{60,11,23,152,120,2,0,},
{150,90,21,149,166,1,0,},},{{65,171,25,85,205,141,2,},{219,50,23,153,120,2,0,},{150,86,24,77,199,85,2,},},{{68,83,21,149,172,0,0,},{61,129,17,62,141,1,0,},
{61,125,23,61,99,1,0,},},{{149,86,17,150,140,1,0,},},{{66,169,16,65,203,2,0,},{155,8,25,85,107,96,2,},{154,8,16,165,60,2,0,},},{{219,62,21,82,113,2,0,},
{165,24,24,77,199,97,2,},},{{61,137,17,62,141,1,0,},{163,120,23,163,98,1,0,},},{{219,50,17,169,146,2,0,},},{{219,48,17,169,146,2,0,},},{{62,151,24,77,199,245,4,},
{219,54,21,153,96,2,0,},},{{65,121,25,85,205,141,2,},{60,33,16,165,140,2,0,},{219,52,21,153,96,2,0,},},{{151,94,23,149,120,2,0,},},{{69,39,20,155,0,0,0,},
{151,114,24,77,129,86,2,},},{{67,55,1,219,0,0,0,},{150,108,21,81,183,1,0,},},{{67,53,1,219,0,0,0,},{169,64,17,169,216,1,0,},},{{75,143,23,63,185,0,0,},},
{{67,49,1,219,0,0,0,},{161,92,21,76,237,1,0,},},{{60,25,25,85,135,98,2,},},{{65,179,24,77,199,141,2,},{150,100,24,77,199,85,2,},},{{65,159,17,65,217,1,0,},
{154,24,21,152,248,1,0,},},{{65,157,17,65,217,1,0,},{149,72,23,149,98,1,0,},},{{72,33,21,152,172,0,0,},{66,167,16,65,203,2,0,},{153,54,19,169,160,1,0,},},
{{161,12,23,152,28,2,0,},{152,6,23,152,98,1,0,},},{{61,143,25,85,121,245,4,},{149,102,21,149,62,1,0,},},{{70,11,21,155,172,0,0,},{151,96,21,149,96,2,0,},},
{{153,46,19,169,160,1,0,},},{{62,133,24,77,199,245,4,},{60,21,18,165,152,2,0,},{155,14,24,77,95,96,2,},},{{62,151,18,62,223,1,0,},{61,123,23,98,55,1,0,},},
{{66,171,21,163,158,2,0,},{61,127,24,77,111,245,4,},{149,84,25,85,121,85,2,},},{{150,88,23,149,190,1,0,},},{{60,13,18,165,152,2,0,},{169,44,23,153,190,1,0,},},
{{165,20,16,165,210,1,0,},{154,8,25,85,51,98,2,},},{{66,183,23,163,182,2,0,},{155,10,16,165,118,0,0,},},{{74,125,21,61,173,0,0,},{155,6,21,152,38,0,0,},},
{{165,24,21,152,166,1,0,},},{{163,182,23,163,98,1,0,},},{{151,80,25,85,135,86,2,},{149,92,21,76,35,1,0,},},{0},{{150,110,21,149,166,1,0,},},{{61,143,17,62,141,1,0,},
{154,18,16,165,60,2,0,},},{{151,88,25,85,135,86,2,},},{{153,64,24,77,111,101,2,},},{{66,157,16,65,203,2,0,},{153,68,23,153,98,1,0,},{153,48,21,153,62,1,0,},},
{{154,26,16,165,60,2,0,},},{{151,104,21,149,96,2,0,},},{{154,36,17,165,70,2,0,},{149,96,24,77,111,85,2,},},{{72,35,21,94,177,0,0,},{62,125,24,77,199,245,4,},
{150,102,25,85,205,85,2,},},{{62,139,24,77,199,245,4,},{152,32,19,165,160,1,0,},},{{149,100,21,149,62,1,0,},},{{219,44,16,169,140,2,0,},{155,18,23,152,80,0,0,},},
{{69,19,20,155,0,0,0,},{60,23,23,152,120,2,0,},},{{219,58,17,169,146,2,0,},{161,14,25,85,51,98,2,},},{{219,54,18,169,152,2,0,},{165,14,16,165,210,1,0,},},
{{63,127,17,62,209,2,0,},{151,98,23,149,120,2,0,},},{{60,11,21,152,96,2,0,},{150,90,23,149,190,1,0,},},{{66,179,24,77,191,142,2,},{165,18,23,152,190,1,0,},},
{{61,125,25,85,121,245,4,},{154,32,16,165,60,2,0,},{154,10,17,165,70,2,0,},},{{73,163,21,163,172,0,0,},{63,135,17,62,209,2,0,},{149,86,19,150,160,1,0,},},
{{66,169,18,65,215,2,0,},{63,135,24,77,191,246,4,},{155,20,21,152,38,0,0,},},{{165,22,25,85,205,97,2,},{161,36,16,165,60,2,0,},},{{81,105,11,68,1,0,0,},
{61,137,23,61,99,1,0,},},{{66,181,21,92,167,2,0,},{63,137,18,62,215,2,0,},{149,90,25,85,121,85,2,},},{{63,143,16,62,203,2,0,},{163,166,24,77,111,141,2,},},
{{69,117,20,155,0,0,0,},{66,163,24,77,191,142,2,},},{{68,111,21,149,172,0,0,},{169,52,17,169,216,1,0,},},{{151,94,21,149,96,2,0,},},{{63,151,24,77,191,246,4,},},
{{155,34,21,94,53,0,0,},},{{62,131,17,62,217,1,0,},{161,22,24,77,41,98,2,},},{0},{{155,20,17,165,130,0,0,},},{{62,127,18,62,223,1,0,},},{{153,56,23,153,98,1,0,},},
{{61,127,23,61,99,1,0,},{151,70,25,85,135,86,2,},},{{63,125,21,61,159,2,0,},{149,72,21,149,62,1,0,},},{{65,183,21,163,166,1,0,},{62,137,17,62,217,1,0,},
{150,96,21,149,166,1,0,},},{{73,181,21,92,177,0,0,},{219,56,25,85,135,102,2,},{161,12,17,165,70,2,0,},},{{61,155,17,62,141,1,0,},{149,102,23,149,98,1,0,},},
{{153,42,24,77,111,101,2,},{151,96,23,149,120,2,0,},},{{153,46,21,153,62,1,0,},},{{152,36,16,165,130,1,0,},{152,14,17,165,140,1,0,},},{{76,97,1,151,0,0,0,},},
{{63,133,25,85,197,246,4,},{169,68,23,153,190,1,0,},{161,10,24,77,41,98,2,},},{{150,88,25,85,205,85,2,},},{{65,173,25,85,205,141,2,},{169,64,23,153,190,1,0,},},
{{75,155,23,63,185,0,0,},{161,24,24,77,41,98,2,},{152,18,24,77,111,97,2,},},{{66,183,21,163,158,2,0,},{63,149,21,89,175,2,0,},{155,10,18,165,142,0,0,},},
{{63,155,17,62,209,2,0,},{60,15,24,77,129,98,2,},},{{161,36,17,165,70,2,0,},},{{62,149,21,89,183,1,0,},{219,46,17,169,146,2,0,},{152,26,24,77,111,97,2,},},
{{169,50,24,77,199,101,2,},{154,22,17,165,70,2,0,},},{{69,37,20,155,0,0,0,},{150,114,16,150,210,1,0,},},{0},{{165,32,24,77,199,97,2,},{154,18,18,165,80,2,0,},},
{{73,121,21,163,172,0,0,},{154,10,23,152,28,2,0,},},{0},{{165,36,21,152,166,1,0,},{154,14,23,152,28,2,0,},},{{163,162,23,163,98,1,0,},{154,26,18,165,80,2,0,},},
{{154,2,23,69,91,2,0,},},{{153,52,24,77,111,101,2,},},{{155,22,18,165,142,0,0,},},{{165,10,17,165,216,1,0,},{161,10,21,152,248,1,0,},},{{68,91,21,149,172,0,0,},
{149,100,23,149,98,1,0,},},{{155,18,17,165,130,0,0,},},{{60,23,25,85,135,98,2,},{153,44,21,153,62,1,0,},},{{62,135,16,62,211,1,0,},{149,114,25,85,121,85,2,},},
{{219,54,16,169,140,2,0,},{152,8,24,77,111,97,2,},},{{66,173,23,163,182,2,0,},},{{62,131,21,61,167,1,0,},{150,90,17,150,216,1,0,},},{{150,110,24,77,199,85,2,},},
{{154,32,18,165,80,2,0,},{149,82,24,77,111,85,2,},},{{63,135,23,61,183,2,0,},{61,133,16,62,131,1,0,},{149,86,21,149,62,1,0,},},{0},{{149,98,25,85,121,85,2,},},
{{219,44,25,85,135,102,2,},{165,26,24,77,199,97,2,},},{{149,90,23,149,98,1,0,},},{{219,42,16,169,140,2,0,},},{{86,93,21,76,163,0,0,},{65,163,25,85,205,141,2,},
{150,78,24,77,199,85,2,},},{{82,59,11,71,1,0,0,},{154,20,24,77,41,98,2,},},{{63,139,25,85,197,246,4,},},{{65,173,21,163,166,1,0,},{153,58,18,169,150,1,0,},},
{{72,25,21,152,172,0,0,},{65,171,17,65,217,1,0,},{150,70,24,77,199,85,2,},},{{65,169,17,65,217,1,0,},},{{77,159,13,66,1,0,0,},{66,159,18,65,215,2,0,},
{65,167,21,163,166,1,0,},},{{153,50,18,169,150,1,0,},},{{70,117,21,155,172,0,0,},{62,127,16,62,211,1,0,},},{0},{{91,183,11,73,1,0,0,},{163,156,18,65,151,1,0,},
{152,22,24,77,111,97,2,},},{0},{{63,133,16,62,203,2,0,},{150,96,23,149,190,1,0,},},{{66,173,24,77,191,142,2,},},{{152,10,18,165,150,1,0,},{149,76,24,77,111,85,2,},},
{{151,96,17,150,146,2,0,},},{{77,163,13,66,1,0,0,},{151,104,18,150,152,2,0,},},{{77,161,13,66,1,0,0,},{149,110,18,150,150,1,0,},},{{153,38,25,85,121,101,2,},},
{{169,58,18,169,222,1,0,},{149,84,21,149,62,1,0,},},{{163,156,24,77,111,141,2,},{155,14,17,165,130,0,0,},},{{77,169,13,66,1,0,0,},{150,84,24,77,199,85,2,},},
{{61,135,25,85,121,245,4,},{165,20,24,77,199,97,2,},{149,88,18,150,150,1,0,},},{{74,155,21,61,173,0,0,},{72,15,21,152,172,0,0,},},{{77,179,13,66,1,0,0,},},
{{76,115,1,151,0,0,0,},{65,161,17,65,217,1,0,},{165,24,25,85,205,97,2,},},{{61,127,25,85,121,245,4,},{219,46,23,153,120,2,0,},},{{165,26,18,165,222,1,0,},
{153,52,25,85,121,101,2,},},{{155,36,24,77,95,96,2,},{150,114,18,150,222,1,0,},},{{150,110,17,150,216,1,0,},},{{67,59,1,219,0,0,0,},{163,170,17,65,141,1,0,},
{161,20,16,165,60,2,0,},},{{163,166,18,65,151,1,0,},},{{66,173,21,163,158,2,0,},},{{165,36,23,152,190,1,0,},},{{66,161,17,65,209,2,0,},{163,162,17,65,141,1,0,},},
{{165,32,23,152,190,1,0,},},{0},{{155,22,16,165,118,0,0,},},{0},{{151,76,23,149,120,2,0,},},{{151,86,21,149,96,2,0,},},{{153,44,23,153,98,1,0,},},{{219,58,21,153,96,2,0,},
{150,94,18,150,222,1,0,},},{{151,98,24,77,129,86,2,},{151,72,25,85,135,86,2,},},{{61,131,17,62,141,1,0,},},{{62,131,23,61,191,1,0,},{60,11,17,165,146,2,0,},
{155,12,25,85,107,96,2,},},{{154,8,17,165,70,2,0,},{150,86,18,150,222,1,0,},},{{152,12,16,165,130,1,0,},},{{61,133,18,62,151,1,0,},{149,86,23,149,98,1,0,},},
{{219,50,18,169,152,2,0,},},{{62,155,24,77,199,245,4,},{219,48,16,169,140,2,0,},{161,26,23,152,28,2,0,},},{{219,44,23,153,120,2,0,},{152,20,16,165,130,1,0,},},
{{165,14,23,152,190,1,0,},{149,90,21,149,62,1,0,},},{{60,33,24,77,129,98,2,},},{{165,30,21,78,183,1,0,},{151,114,25,85,135,86,2,},},{{163,168,25,85,121,141,2,},
{149,94,16,150,130,1,0,},},{{169,64,16,169,210,1,0,},{151,94,17,150,146,2,0,},},{{153,58,16,169,130,1,0,},},{{67,19,1,60,1,0,0,},{60,37,25,85,135,98,2,},},
{{63,151,18,62,215,2,0,},{163,160,25,85,121,141,2,},},{{66,159,16,65,203,2,0,},},{{65,159,18,65,223,1,0,},{153,50,16,169,130,1,0,},},{{150,104,17,150,216,1,0,},},
{{65,179,18,65,223,1,0,},},{{161,8,16,165,60,2,0,},},{{155,92,21,76,25,0,0,},},{{65,183,17,65,217,1,0,},{62,137,21,61,167,1,0,},{150,96,17,150,216,1,0,},},
{{219,56,21,153,96,2,0,},},{{63,125,24,77,191,246,4,},{152,10,16,165,130,1,0,},},{{61,151,18,62,151,1,0,},{60,27,21,152,96,2,0,},},{{219,52,18,169,152,2,0,},
{165,12,16,165,210,1,0,},},{{62,129,24,77,199,245,4,},{152,14,21,152,62,1,0,},},{{154,12,25,85,51,98,2,},},{{63,133,21,61,159,2,0,},{169,58,16,169,210,1,0,},
{149,84,23,149,98,1,0,},},{{155,14,23,152,80,0,0,},},{{161,24,23,152,28,2,0,},{152,18,23,152,98,1,0,},},{{149,88,16,150,130,1,0,},},{{66,183,17,65,209,2,0,},
{151,84,25,85,135,86,2,},},{0},{{65,161,23,163,190,1,0,},{63,131,16,62,203,2,0,},{163,170,24,77,111,141,2,},},{{219,46,21,153,96,2,0,},},{0},{{150,76,23,149,190,1,0,},},
{{65,159,16,65,211,1,0,},{219,42,24,77,129,102,2,},},{{161,20,18,165,80,2,0,},},{{163,166,16,65,131,1,0,},{154,30,21,78,17,2,0,},},{{155,26,25,85,107,96,2,},
{153,68,24,77,111,101,2,},},{{165,36,17,165,216,1,0,},},{{62,143,24,77,199,245,4,},{163,162,19,65,161,1,0,},},{{152,32,16,165,130,1,0,},},{{149,96,18,150,150,1,0,},},
{{62,139,21,61,167,1,0,},{219,64,17,169,146,2,0,},{150,98,25,85,205,85,2,},},{{165,20,18,165,222,1,0,},{161,10,25,85,51,98,2,},},{{70,39,21,155,172,0,0,},
{151,76,21,149,96,2,0,},},{{83,37,10,72,1,0,0,},},{{153,44,17,169,140,1,0,},},{{163,182,25,85,121,141,2,},{150,94,16,150,210,1,0,},},{{66,161,18,65,215,2,0,},
{65,163,16,65,211,1,0,},{149,104,25,85,121,85,2,},},{{163,170,21,163,62,1,0,},},{{163,168,21,163,62,1,0,},{155,12,23,152,80,0,0,},},{{165,18,25,85,205,97,2,},
{150,86,16,150,210,1,0,},},{{161,32,21,152,248,1,0,},{152,12,18,165,150,1,0,},},{{163,162,21,163,62,1,0,},},{{71,57,21,153,172,0,0,},{169,52,21,153,166,1,0,},
{150,82,21,149,166,1,0,},},{{169,50,25,85,205,101,2,},{161,26,21,152,248,1,0,},},{{219,44,21,153,96,2,0,},{152,20,18,165,150,1,0,},},{{66,121,25,85,197,142,2,},
{151,86,23,149,120,2,0,},{149,90,19,150,160,1,0,},},{{150,78,23,149,190,1,0,},},{{89,127,11,74,1,0,0,},{63,151,25,85,197,246,4,},},{{152,24,24,77,111,97,2,},
{149,94,18,150,150,1,0,},},{{63,139,21,61,159,2,0,},{62,131,16,62,211,1,0,},},{{62,133,18,62,223,1,0,},{153,68,21,153,62,1,0,},},{{69,1,20,155,0,0,0,},},
{{100,147,1,88,1,0,0,},{63,151,16,62,203,2,0,},},{{153,62,21,82,87,1,0,},{151,90,25,85,135,86,2,},},{{63,127,18,62,215,2,0,},{61,127,16,62,131,1,0,},},
{{69,9,20,155,0,0,0,},},{{161,24,25,85,51,98,2,},},{0},{{69,103,20,155,0,0,0,},{153,54,24,77,111,101,2,},},{{62,137,23,61,191,1,0,},{62,125,25,85,205,245,4,},
{161,18,17,165,70,2,0,},},{{219,54,24,77,129,102,2,},{165,8,17,165,216,1,0,},},{{165,14,25,85,205,97,2,},{152,32,23,152,98,1,0,},},{{72,7,21,152,172,0,0,},
{153,46,24,77,111,101,2,},},{{219,52,16,169,140,2,0,},{165,12,18,165,222,1,0,},},{{65,169,25,85,205,141,2,},{152,14,23,152,98,1,0,},},{{154,12,23,152,28,2,0,},},
{{149,84,17,150,140,1,0,},},{{155,14,21,152,38,0,0,},},{{61,131,16,62,131,1,0,},{161,24,21,152,248,1,0,},{152,18,21,152,62,1,0,},},{{63,129,16,62,203,2,0,},
{169,62,21,82,183,1,0,},{149,114,23,149,98,1,0,},},{{155,10,24,77,95,96,2,},{151,84,23,149,120,2,0,},},{{79,105,10,68,1,0,0,},{67,15,1,60,1,0,0,},},
{{65,161,21,163,166,1,0,},{61,131,24,77,111,245,4,},},{{169,50,23,153,190,1,0,},},{{169,54,24,77,199,101,2,},},{{71,39,21,153,172,0,0,},{150,76,21,149,166,1,0,},},
{{61,139,16,62,131,1,0,},{163,118,12,93,189,0,0,},},{{165,32,18,165,222,1,0,},{154,18,24,77,41,98,2,},},{{155,32,17,165,130,0,0,},{153,64,19,169,160,1,0,},},
{{153,48,24,77,111,101,2,},},{{60,27,25,85,135,98,2,},{169,46,18,169,222,1,0,},},{{219,68,18,169,152,2,0,},{154,26,24,77,41,98,2,},},{{67,9,1,60,1,0,0,},
{169,42,18,169,222,1,0,},},{{149,96,16,150,130,1,0,},},{{62,139,23,61,191,1,0,},{60,19,25,85,135,98,2,},{169,64,25,85,205,101,2,},},{{149,70,21,149,62,1,0,},},
{0},{{67,47,1,219,0,0,0,},},{{67,45,1,219,0,0,0,},{153,44,19,169,160,1,0,},},{{161,2,23,69,91,2,0,},{152,8,23,152,98,1,0,},},{{154,254,31,154,0,104,2,},
{149,78,24,77,111,85,2,},},{{169,56,24,77,199,101,2,},{151,110,25,85,135,86,2,},},{{155,12,21,152,38,0,0,},},{{60,15,16,165,140,2,0,},{219,50,25,85,135,102,2,},},
{{149,86,24,77,111,85,2,},},{{75,131,23,63,185,0,0,},{72,9,21,152,172,0,0,},},{{150,82,23,149,190,1,0,},},{{75,135,23,63,185,0,0,},{161,36,24,77,41,98,2,},},
{{163,158,18,65,151,1,0,},{163,120,25,85,121,141,2,},},{{149,90,17,150,140,1,0,},},{{62,151,17,62,217,1,0,},{150,78,21,149,166,1,0,},},{{65,167,25,85,205,141,2,},
{65,157,24,77,199,141,2,},},{{154,20,18,165,80,2,0,},{151,82,24,77,129,86,2,},},{{63,139,23,61,183,2,0,},{61,155,21,61,63,1,0,},},{0},{{161,22,21,152,248,1,0,},},
{{68,103,21,149,172,0,0,},},{{63,131,23,61,183,2,0,},{154,20,25,85,51,98,2,},},{{155,20,25,85,107,96,2,},},{{60,25,23,152,120,2,0,},{150,104,21,149,166,1,0,},},
{{63,133,23,61,183,2,0,},},{{66,173,25,85,197,142,2,},{149,72,24,77,111,85,2,},},{{66,167,25,85,197,142,2,},{63,137,23,61,183,2,0,},},{{62,137,25,85,205,245,4,},},
{{165,8,23,152,190,1,0,},{152,6,25,85,121,97,2,},},{{61,155,25,85,121,245,4,},{152,32,21,152,62,1,0,},{149,110,19,150,160,1,0,},},{{72,27,21,152,172,0,0,},
{67,37,1,60,1,0,0,},},{{74,153,21,100,177,0,0,},{60,21,25,85,135,98,2,},},{{152,36,24,77,111,97,2,},{152,14,25,85,121,97,2,},},{{66,157,25,85,197,142,2,},
{154,12,21,152,248,1,0,},},{{63,133,17,62,209,2,0,},{151,104,23,149,120,2,0,},{149,84,19,150,160,1,0,},},{{150,84,23,149,190,1,0,},},{{163,182,18,65,151,1,0,},
{152,18,19,165,160,1,0,},},{{149,114,21,149,62,1,0,},},{{151,84,21,149,96,2,0,},},{{66,179,16,65,203,2,0,},{61,125,24,77,111,245,4,},},{{152,26,19,165,160,1,0,},},
{{169,50,21,153,166,1,0,},{152,26,0,70,195,0,0,},},{0},{{155,36,18,165,142,0,0,},{150,114,24,77,199,85,2,},},{{92,175,1,90,1,0,0,},{60,37,16,165,140,2,0,},},
{{165,32,16,165,210,1,0,},{163,170,23,163,98,1,0,},},{{63,143,24,77,191,246,4,},{153,64,17,169,140,1,0,},},{{66,163,16,65,203,2,0,},{169,48,18,169,222,1,0,},},
{{60,27,23,152,120,2,0,},},{{219,68,16,169,140,2,0,},},{0},{{71,43,21,153,172,0,0,},{62,129,25,85,205,245,4,},},{{62,139,17,62,217,1,0,},{62,131,25,85,205,245,4,},
{219,64,21,153,96,2,0,},},{{62,133,21,61,167,1,0,},{149,70,23,149,98,1,0,},},{{151,102,24,77,129,86,2,},{151,76,25,85,135,86,2,},},{{155,18,25,85,107,96,2,},},
{{219,58,24,77,129,102,2,},{161,14,16,165,60,2,0,},},{{154,14,16,165,60,2,0,},{152,8,21,152,62,1,0,},},{{63,127,24,77,191,246,4,},{154,8,18,165,80,2,0,},},
{{151,110,23,149,120,2,0,},},{{150,90,25,85,205,85,2,},},{{65,171,21,163,166,1,0,},{60,15,18,165,152,2,0,},},{{161,18,24,77,41,98,2,},{149,112,21,95,75,1,0,},},
{{66,169,25,85,197,142,2,},{155,8,16,165,118,0,0,},},{{67,65,1,219,0,0,0,},{150,82,25,85,205,85,2,},},{{96,41,5,87,5,0,0,},{161,26,25,85,51,98,2,},},
{{163,172,25,85,121,141,2,},{161,10,16,165,60,2,0,},},{{67,27,1,60,1,0,0,},{161,8,18,165,80,2,0,},},{{76,95,1,151,0,0,0,},{62,151,23,61,191,1,0,},},
{{76,105,1,151,0,0,0,},{60,33,25,85,135,98,2,},},{{154,20,16,165,60,2,0,},},{{82,69,11,71,1,0,0,},{63,139,17,62,209,2,0,},},{0},{{161,22,23,152,28,2,0,},},
{0},{{88,155,10,74,1,0,0,},{151,90,21,149,96,2,0,},},{{149,102,24,77,111,85,2,},},{{60,25,21,152,96,2,0,},{150,104,23,149,190,1,0,},},{0},{0},{{66,167,23,163,182,2,0,},
{65,183,24,77,199,141,2,},},{{155,12,24,77,95,96,2,},},{{165,8,21,152,166,1,0,},{151,72,23,149,120,2,0,},},{{151,78,23,149,120,2,0,},},{{169,44,25,85,205,101,2,},},
{{62,133,17,62,217,1,0,},{169,42,21,153,166,1,0,},},{{65,169,21,163,166,1,0,},},{{163,178,17,65,141,1,0,},},{{60,9,18,165,152,2,0,},{150,88,16,150,210,1,0,},},
{{163,182,21,163,62,1,0,},{150,84,21,149,166,1,0,},},{{73,161,21,163,172,0,0,},{163,180,21,92,75,1,0,},{152,18,17,165,140,1,0,},},{{75,151,23,63,185,0,0,},
{63,131,17,62,209,2,0,},{163,170,25,85,121,141,2,},},{{63,129,17,62,209,2,0,},{153,38,24,77,111,101,2,},},{{66,179,18,65,215,2,0,},{155,6,25,85,107,96,2,},},
{{219,46,24,77,129,102,2,},{152,26,17,165,140,1,0,},},{0},{0},{{155,2,23,69,155,0,0,},{150,76,25,85,205,85,2,},},{{150,110,25,85,205,85,2,},},{{151,88,16,150,140,2,0,},},
{{153,64,23,153,98,1,0,},},{{155,36,16,165,118,0,0,},{152,32,17,165,140,1,0,},},{{163,156,21,163,62,1,0,},},{{62,143,18,62,223,1,0,},{163,162,25,85,121,141,2,},},
{{153,52,17,169,140,1,0,},},{{83,9,10,72,1,0,0,},{165,18,17,165,216,1,0,},},{{219,64,23,153,120,2,0,},},{{149,70,25,85,121,85,2,},},{{169,38,24,77,199,101,2,},
{149,100,25,85,121,85,2,},},{{149,74,9,96,19,1,0,},},{{62,135,25,85,205,245,4,},{161,14,18,165,80,2,0,},},{{154,36,23,152,28,2,0,},{152,8,19,165,160,1,0,},},
{{68,95,21,149,172,0,0,},{151,98,16,150,140,2,0,},{149,104,19,150,160,1,0,},},{{151,110,21,149,96,2,0,},},{{60,11,25,85,135,98,2,},{155,12,17,165,130,0,0,},},
{{154,10,24,77,41,98,2,},},{{61,133,25,85,121,245,4,},},{{155,8,18,165,142,0,0,},},{{60,7,23,152,120,2,0,},},{{62,155,16,62,211,1,0,},{165,22,21,152,166,1,0,},},
{{73,173,21,163,172,0,0,},},{{60,13,23,152,120,2,0,},},{{62,151,21,61,167,1,0,},{60,15,23,152,120,2,0,},},{{73,167,21,163,172,0,0,},{60,9,23,152,120,2,0,},
{150,112,21,95,175,1,0,},},{{163,168,17,65,141,1,0,},{149,94,24,77,111,85,2,},},{{68,73,21,149,172,0,0,},{151,94,25,85,135,86,2,},},{{79,115,10,68,1,0,0,},
{153,56,21,153,62,1,0,},},{{61,127,17,62,141,1,0,},{154,16,21,67,229,1,0,},},{{163,160,17,65,141,1,0,},},{{66,159,24,77,191,142,2,},{151,90,23,149,120,2,0,},},
{{153,50,24,77,111,101,2,},},{0},{{70,19,21,155,172,0,0,},{154,24,24,77,41,98,2,},},{{62,127,24,77,199,245,4,},{219,54,25,85,135,102,2,},},{{66,167,21,163,158,2,0,},},
{{60,33,23,152,120,2,0,},{150,96,25,85,205,85,2,},},{{169,68,17,169,216,1,0,},},{{153,42,17,169,140,1,0,},},{{169,64,21,153,166,1,0,},},{{69,21,20,155,0,0,0,},
{60,21,21,152,96,2,0,},{165,12,24,77,199,97,2,},},{{62,129,16,62,211,1,0,},{219,48,21,153,96,2,0,},{149,114,18,150,150,1,0,},},{{149,80,24,77,111,85,2,},},
{{60,9,16,165,140,2,0,},{150,88,18,150,222,1,0,},},{0},{{165,20,21,152,166,1,0,},},{{163,178,23,163,98,1,0,},{149,88,24,77,111,85,2,},},{{61,129,25,85,121,245,4,},
{151,84,17,150,146,2,0,},},{{60,19,18,165,152,2,0,},},{{152,26,23,152,98,1,0,},},{{61,139,17,62,141,1,0,},{152,12,23,152,98,1,0,},},{{65,183,18,65,223,1,0,},
{154,14,21,152,248,1,0,},},{0},{{73,157,21,163,172,0,0,},{63,137,17,62,209,2,0,},{154,18,21,152,248,1,0,},},{{68,97,21,149,172,0,0,},{151,88,18,150,152,2,0,},},
{{74,143,21,61,173,0,0,},{155,32,23,152,80,0,0,},{153,64,21,153,62,1,0,},},{{66,157,23,163,182,2,0,},{153,68,16,169,130,1,0,},{153,48,18,169,150,1,0,},},
{{76,111,1,151,0,0,0,},{154,26,25,85,51,98,2,},},{{62,143,16,62,211,1,0,},{149,40,4,87,215,0,0,},},{{153,52,19,169,160,1,0,},},{{62,125,23,61,191,1,0,},},
{{69,15,20,155,0,0,0,},{165,6,24,77,199,97,2,},{150,98,17,150,216,1,0,},},{{163,158,17,65,141,1,0,},{161,10,17,165,70,2,0,},},{{61,153,21,100,75,1,0,},},
{{60,23,16,165,140,2,0,},{151,98,17,150,146,2,0,},},{{165,10,18,165,222,1,0,},},{{73,171,21,163,172,0,0,},{152,8,17,165,140,1,0,},},{{151,98,18,150,152,2,0,},
{149,104,17,150,140,1,0,},},{{154,32,17,165,70,2,0,},},{{165,18,18,165,222,1,0,},},{{94,29,1,83,1,0,0,},{154,36,21,152,248,1,0,},},{{69,27,20,155,0,0,0,},
{219,42,18,169,152,2,0,},},{{66,169,21,163,158,2,0,},{163,158,19,65,161,1,0,},},{{219,46,18,169,152,2,0,},},};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {0};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (target_nfa_state >> 8) & 1;
    key.bytes[1] |= (dfa_state << 1) & 255;
    key.bytes[2] |= (dfa_symbol >> 0) & 31;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.nfa_state |= ((uint32_t)bytes[4] & 1) << 8;
    entry.actions |= ((uint32_t)bytes[4] & 255) >> 1;
    entry.actions |= ((uint32_t)bytes[5] & 3) << 7;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 2;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 7) << 6;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 3; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 3)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 161;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 24)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 59) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    return construct_finish(&construct_state, offset);
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        if (text[1] == 111 && text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
            *end_token = false;
            *token = 2;
            return 10;
        } else {
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 20;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 8;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 9;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 9;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 9;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 9;
        case 1: return 9;
        case 2: return 9;
        case 3: return 11;
        case 4: return 7;
        case 5: return 11;
        case 6: return 11;
        case 7: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 11;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 2;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 8;
    case 8: return 1;
    case 9: return 0;
    case 10: return 0;
    case 11: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 7;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

