// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "owl-parser.h"

#ifndef _OWL_PARSER_H_
#define _OWL_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Explicitly create a tree with particular options.
struct owl_tree_options {
    // Exactly one of string or file should be set.
    const char *string;
    FILE *file;
};
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file was NULL.
    ERROR_INVALID_FILE,

    // The options passed to owl_tree_create_with_options weren't valid --
    // both file and string were specified at the same time or neither were.
    ERROR_INVALID_OPTIONS,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_IDENT = 1,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct owl_ref rule;
    struct owl_ref comment_token;
    struct owl_ref custom_token;
    struct owl_ref whitespace;
};

struct parsed_rule {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref body;
};

struct parsed_body {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
    struct owl_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct owl_ref fixity;
    struct owl_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref identifier;
    struct owl_ref exception;
    struct owl_ref rename;
    struct owl_ref string;
    struct owl_ref expr;
    struct owl_ref begin_token;
    struct owl_ref end_token;
    struct owl_ref operand;
};

struct parsed_comment_token {
    struct source_range range;
    struct owl_ref string;
    struct owl_ref comment_token_v1;
};

struct parsed_comment_token_v1 {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_custom_token {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref string;
};

struct parsed_whitespace {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_grammar parsed_grammar_get(struct owl_ref);
struct parsed_rule parsed_rule_get(struct owl_ref);
struct parsed_body parsed_body_get(struct owl_ref);
struct parsed_operators parsed_operators_get(struct owl_ref);
struct parsed_fixity parsed_fixity_get(struct owl_ref);
struct parsed_assoc parsed_assoc_get(struct owl_ref);
struct parsed_operator parsed_operator_get(struct owl_ref);
struct parsed_expr parsed_expr_get(struct owl_ref);
struct parsed_comment_token parsed_comment_token_get(struct owl_ref);
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref);
struct parsed_custom_token parsed_custom_token_get(struct owl_ref);
struct parsed_whitespace parsed_whitespace_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_identifier_token_offset;
    size_t next_string_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
            .custom_token.empty = true,
            .whitespace.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 8;
    result.comment_token.empty = result.comment_token._offset == 0;
    result.custom_token._tree = ref._tree;
    result.custom_token._offset = read_tree(&offset, ref._tree);
    result.custom_token._type = 10;
    result.custom_token.empty = result.custom_token._offset == 0;
    result.whitespace._tree = ref._tree;
    result.whitespace._offset = read_tree(&offset, ref._tree);
    result.whitespace._type = 11;
    result.whitespace.empty = result.whitespace._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 12;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 12;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 12;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 12;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 12;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 12;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 13;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 13;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 13;
    result.end_token.empty = result.end_token._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_comment_token){
            .string.empty = true,
            .comment_token_v1.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 13;
    result.string.empty = result.string._offset == 0;
    result.comment_token_v1._tree = ref._tree;
    result.comment_token_v1._offset = read_tree(&offset, ref._tree);
    result.comment_token_v1._type = 9;
    result.comment_token_v1.empty = result.comment_token_v1._offset == 0;
    return result;
}
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_comment_token_v1){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token_v1 result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 13;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_custom_token parsed_custom_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_custom_token){
            .identifier.empty = true,
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_custom_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 12;
    result.identifier.empty = result.identifier._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 13;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_whitespace parsed_whitespace_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_whitespace){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_whitespace result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 13;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 12) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 13) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .string = string,
        .length = string_length,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 9: {
        write_tree(tree, slots[0]);
        break;
    }
    case 10: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 11: {
        write_tree(tree, slots[0]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 12: {
        size_t offset = tree->next_identifier_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_identifier_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 13: {
        size_t offset = tree->next_string_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_string_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_OPTIONS:
        fprintf(stderr, "invalid options\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_whitespace_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        parsed_custom_token_print(tree, it.custom_token, "custom_token", indent + 1);
        parsed_whitespace_print(tree, it.whitespace, "whitespace", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_comment_token_v1_print(tree, it.comment_token_v1, "comment_token_v1", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token_v1 it = parsed_comment_token_v1_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token_v1");
        if (strcmp("comment_token_v1", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_custom_token it = parsed_custom_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("custom_token");
        if (strcmp("custom_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_whitespace_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_whitespace it = parsed_whitespace_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("whitespace");
        if (strcmp("whitespace", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, owl_tree_root_ref(tree), "grammar", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(owl_tree_root_ref(tree));
}
#define ESCAPE_CHAR(c, info) ((c) == 'b' ? '\b' : (c) == 'f' ? '\f' : (c) == 'n' ? '\n' : (c) == 'r' ? '\r' : (c) == 't' ? '\t' : (c))
#define IGNORE_TOKEN_WRITE(...)
#define IGNORE_TOKEN_READ(...) (0)
#define CUSTOM_TOKEN_DATA(...)
#define IF_IDENTIFIER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define NUMBER_TOKEN_DATA(...)
#define IF_NUMBER_TOKEN(...) if (0) { /* no number tokens */  }
#define IF_STRING_TOKEN(cond, ...) if (cond) __VA_ARGS__
static size_t read_whitespace(const char *text, void *info);
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool char_ends_identifier(char c) {
    return c != '-';
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        size_t whitespace_length = read_whitespace(text + offset, tokenizer->info);
        if (whitespace_length > 0) {
            whitespace += whitespace_length;
            offset += whitespace_length;
            continue;
        }
        uint32_t token = -1;
        CUSTOM_TOKEN_DATA(custom_data);
        NUMBER_TOKEN_DATA(number);
        bool is_token = false;
        bool end_token = false;
        bool custom_token = false;
        bool comment = false;
        bool custom_whitespace = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 4294967295U) comment = true;
        }
        if (IGNORE_TOKEN_READ(&token, &token_length, text + offset, &custom_whitespace, &custom_data, tokenizer->info)) {
            is_token = true;
            custom_token = true;
            end_token = false;
            comment = false;
        }
        IF_NUMBER_TOKEN(char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1])), {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 4294967295U;
            }
        }
        ) else IF_STRING_TOKEN(c == '\'' || c == '"', {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    custom_whitespace = false;
                    token = 25;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        ) else IF_IDENTIFIER_TOKEN(char_starts_identifier(c), {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            while (!char_ends_identifier(text[identifier_offset - 1])) identifier_offset--;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 24;
            }
        }
        ) if (custom_whitespace) {
            whitespace += token_length;
            offset += token_length;
            continue;
        }
        else if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 4294967295U) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 24) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 4294967295U) {
            IGNORE_TOKEN_WRITE(offset, token_length, number, tokenizer->info);
        }
        else if (token == 25) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = ESCAPE_CHAR(text[content_offset + i], tokenizer->info);
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        else if (custom_token) {
            IGNORE_TOKEN_WRITE(offset, token_length, token, custom_data, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity = 0;
            int precedence = 0;
            do {
                int local = 0;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    size_t top_index;
    size_t capacity;
    int error;
};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[99])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_77(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    default: top->cont->error = 1; return;
    }
}
static void state_func_5(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_33(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 36; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_89(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 26;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_17(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 20; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_56(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 59; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_18(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 19; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_20(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 21; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_11(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 22; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_34(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 35; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_36(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 37; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_49(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 54; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_57(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 58; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_59(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 60; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 62; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 25: top->state = 64; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 25: top->state = 65; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_94(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 97; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_95(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 96; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_97(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 98; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_80(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 83; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_81(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 82; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_83(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 84; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_68(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 25: top->state = 69; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_66(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 12: top->state = 67; return;
    case 14: top->state = 68; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_23(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 3: top->state = 38; return;
    case 4: top->state = 39; return;
    case 5: top->state = 40; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_40(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 6: top->state = 41; return;
    case 7: top->state = 42; return;
    case 8: top->state = 43; return;
    case 9: top->state = 44; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_6(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 7; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    case 27: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_31(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 32; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    case 27: top->state = 27; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_41(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    case 27: top->state = 48; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_93(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 85; return;
    case 25: top->state = 86; return;
    case 26: top->state = 87; return;
    case 27: top->state = 88; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_69(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 70; return;
    case 25: top->state = 71; return;
    case 26: top->state = 72; return;
    case 27: top->state = 73; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_64(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 5; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_4(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 5; return;
    case 25: top->state = 61; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_62(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 5; return;
    case 25: top->state = 63; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_79(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 27;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_82(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 74; return;
    case 17: top->state = 75; return;
    case 18: top->state = 76; return;
    case 19: top->state = 77; return;
    case 24: top->state = 70; return;
    case 25: top->state = 78; return;
    case 26: top->state = 72; return;
    case 27: top->state = 73; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_25(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 16: top->state = 28; return;
    case 17: top->state = 29; return;
    case 18: top->state = 30; return;
    case 19: top->state = 31; return;
    case 24: top->state = 32; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    case 27: top->state = 27; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_51(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 49; return;
    case 16: top->state = 50; return;
    case 17: top->state = 51; return;
    case 18: top->state = 52; return;
    case 19: top->state = 53; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    case 27: top->state = 48; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 23; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    case 27: top->state = 27; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_54(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 23; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 55; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    case 27: top->state = 48; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_86(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 13: top->state = 89; return;
    case 16: top->state = 90; return;
    case 17: top->state = 91; return;
    case 18: top->state = 92; return;
    case 19: top->state = 93; return;
    case 24: top->state = 85; return;
    case 25: top->state = 86; return;
    case 26: top->state = 87; return;
    case 27: top->state = 88; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_78(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 15: top->state = 79; return;
    case 16: top->state = 74; return;
    case 17: top->state = 75; return;
    case 18: top->state = 76; return;
    case 19: top->state = 77; return;
    case 24: top->state = 70; return;
    case 25: top->state = 78; return;
    case 26: top->state = 72; return;
    case 27: top->state = 73; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_84(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 80; return;
    case 11: top->state = 81; return;
    case 16: top->state = 74; return;
    case 17: top->state = 75; return;
    case 18: top->state = 76; return;
    case 19: top->state = 77; return;
    case 24: top->state = 70; return;
    case 25: top->state = 78; return;
    case 26: top->state = 72; return;
    case 27: top->state = 73; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_32(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 10: top->state = 33; return;
    case 11: top->state = 34; return;
    case 16: top->state = 28; return;
    case 17: top->state = 29; return;
    case 18: top->state = 30; return;
    case 19: top->state = 31; return;
    case 24: top->state = 32; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    case 27: top->state = 27; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_45(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 49; return;
    case 10: top->state = 56; return;
    case 11: top->state = 57; return;
    case 16: top->state = 50; return;
    case 17: top->state = 51; return;
    case 18: top->state = 52; return;
    case 19: top->state = 53; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    case 27: top->state = 48; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_85(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 94; return;
    case 11: top->state = 95; return;
    case 13: top->state = 89; return;
    case 16: top->state = 90; return;
    case 17: top->state = 91; return;
    case 18: top->state = 92; return;
    case 19: top->state = 93; return;
    case 24: top->state = 85; return;
    case 25: top->state = 86; return;
    case 26: top->state = 87; return;
    case 27: top->state = 88; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_24(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 11; return;
    case 10: top->state = 33; return;
    case 11: top->state = 34; return;
    case 16: top->state = 28; return;
    case 17: top->state = 29; return;
    case 18: top->state = 30; return;
    case 19: top->state = 31; return;
    case 24: top->state = 32; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    case 27: top->state = 27; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_55(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 49; return;
    case 10: top->state = 56; return;
    case 11: top->state = 57; return;
    case 16: top->state = 50; return;
    case 17: top->state = 51; return;
    case 18: top->state = 52; return;
    case 19: top->state = 53; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    case 27: top->state = 48; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_8(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 19: top->state = 15; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 16; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    case 27: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_21(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 10: top->state = 17; return;
    case 11: top->state = 18; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 19: top->state = 15; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 16; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    case 27: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_16(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 11; return;
    case 10: top->state = 17; return;
    case 11: top->state = 18; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 19: top->state = 15; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 16; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    case 27: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void (*state_funcs[99])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_64, state_func_1, state_func_2, state_func_3,
    state_func_4, state_func_5, state_func_6, state_func_21,
    state_func_8, state_func_8, state_func_8, state_func_11,
    state_func_8, state_func_8, state_func_8, state_func_6,
    state_func_16, state_func_17, state_func_18, state_func_8,
    state_func_20, state_func_21, state_func_22, state_func_23,
    state_func_24, state_func_25, state_func_25, state_func_25,
    state_func_25, state_func_25, state_func_25, state_func_31,
    state_func_32, state_func_33, state_func_34, state_func_25,
    state_func_36, state_func_32, state_func_41, state_func_41,
    state_func_40, state_func_41, state_func_41, state_func_41,
    state_func_41, state_func_45, state_func_51, state_func_51,
    state_func_51, state_func_49, state_func_51, state_func_51,
    state_func_51, state_func_41, state_func_54, state_func_55,
    state_func_56, state_func_57, state_func_51, state_func_59,
    state_func_45, state_func_4, state_func_62, state_func_62,
    state_func_64, state_func_64, state_func_66, state_func_93,
    state_func_68, state_func_69, state_func_84, state_func_78,
    state_func_82, state_func_82, state_func_82, state_func_82,
    state_func_82, state_func_77, state_func_78, state_func_79,
    state_func_80, state_func_81, state_func_82, state_func_83,
    state_func_84, state_func_85, state_func_86, state_func_86,
    state_func_86, state_func_89, state_func_86, state_func_86,
    state_func_86, state_func_93, state_func_94, state_func_95,
    state_func_86, state_func_97, state_func_85,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    struct fill_run_continuation *cont = top->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        top = &cont->stack[cont->top_index];
    } else
        top++;
    top->cont = cont;
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 66;
    state_func_66(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

static void free_token_runs(struct owl_token_run **run) {
    while (*run) {
        struct owl_token_run *prev = (*run)->prev;
        free(*run);
        *run = prev;
    }
}
static void parse_string(struct owl_tree *tree, const char *string) {
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            free_token_runs(&token_run);
            return;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    switch (top.state) {
    case 0:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 19:
    case 21:
    case 22:
    case 54:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_string(const char *string) {
    return owl_tree_create_with_options((struct owl_tree_options){ .string = string });
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    return owl_tree_create_with_options((struct owl_tree_options){ .file = file });
}
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options) {
    if (!options.file == !options.string)
        return owl_tree_create_with_error(ERROR_INVALID_OPTIONS);
    if (options.file) {
        char *str = 0;
        size_t len = 32;
        size_t off = 0;
        while (true) {
            len = len * 3 / 2;
            char *s = realloc(str, len);
            if (!s) {
                free(str);
                return 0;
            }
            str = s;
            off += fread(str + off, 1, len - off, options.file);
            if (off < len) {
                str[off] = '\0';
                break;
            }
        }
        options.string = str;
    }
    struct owl_tree *tree = owl_tree_create_empty();
    if (options.file)
        tree->owns_string = true;
    parse_string(tree, options.string);
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,4096,0,4096,4096,32768,32769,16385,0,4096,4096,32768,32769,32770,32769,16385,0,4096,4096,32768,32769,36864,40960,16384,0,4096,
4096,32768,32769,36864,40960,16385,0,4096,4096,32768,32769,36864,40960,16386,0,4096,4096,32768,32769,36864,40961,16387,0,4096,4096,32768,32769,36864,40962,0,
4096,4096,32768,32769,36864,40963,0,4096,4096,32768,32769,36864,45060,0,4096,4096,32768,32769,36864,45061,0,4096,4096,32768,32769,36864,45062,0,4096,4096,
32769,16384,0,4096,4096,32769,32769,16384,0,4096,4096,32770,16384,0,4096,4096,32770,16385,0,4096,4096,32771,0,4096,4096,32771,16384,0,4096,16385,
0,4096,32768,32769,16385,0,4096,32768,32769,32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,36864,40960,16385,0,4096,32768,32769,
36864,40960,16386,0,4096,32768,32769,36864,40961,16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,4096,32768,32769,36864,45060,0,4096,
32768,32769,36864,45061,0,4096,32768,32769,36864,45062,0,4096,32769,16384,0,4096,32769,32769,16384,0,4096,32770,16384,0,4096,32770,16385,0,4096,32770,
32769,16385,0,4096,32771,0,4096,32771,16384,0,16384,0,16385,0,16389,0,16390,0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,
0,20480,8192,4096,32768,12289,0,20480,8192,4096,32768,12290,32768,12288,0,20480,8192,4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,
0,20480,8192,4096,32768,12290,32768,12291,0,20480,8192,4096,32769,16385,0,20480,8192,16385,0,20480,8192,16389,0,20480,45063,24576,40960,16384,0,20480,
45063,24576,40960,16385,0,20480,45063,24576,40960,16386,0,20480,45063,24576,40961,16387,0,20480,45063,24576,40962,0,20480,45063,24576,40963,0,20480,45063,24576,
45060,0,20480,45063,24576,45061,0,20480,45063,24576,45062,0,20480,45064,0,24576,40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,
0,24576,40962,0,24576,40963,0,24576,45060,0,24576,45061,0,24576,45062,0,32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,
16384,0,32768,32769,36864,40960,16385,0,32768,32769,36864,40960,16386,0,32768,32769,36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,
32768,32769,36864,45060,0,32768,32769,36864,45061,0,32768,32769,36864,45062,0,32769,16384,0,32769,32769,16384,0,32770,16384,0,32770,16385,0,32771,0,
32771,16384,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,36864,40961,16387,0,36864,40962,0,36864,40963,0,36864,45060,0,36864,45061,
0,36864,45062,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,0,36868,40961,16387,0,36868,40962,0,36868,40963,0,36868,45060,0,36868,
45061,0,36868,45062,0,};
static const uint8_t action_table[1024][3][7] = {
{{138,1,23,160,0,0,0,},{182,52,25,182,110,2,0,},},{{144,17,24,160,184,1,0,},{139,21,1,130,1,0,0,},},{{137,185,26,153,233,107,6,},{159,110,19,164,172,2,0,},},
{{160,127,25,160,189,1,0,},{164,104,18,164,234,2,0,},{162,38,23,160,218,0,0,},},{{136,171,16,136,223,2,0,},{241,74,17,241,228,2,0,},{182,44,25,182,110,2,0,},},
{{161,18,16,14,73,3,0,},},{{134,163,24,161,195,2,0,},{130,33,17,14,189,3,0,},{159,76,26,153,123,250,4,},},{0},{{165,110,27,163,177,251,4,},{160,98,24,152,253,0,0,},},
{{144,1,24,160,184,1,0,},{131,59,26,153,171,179,5,},},{{143,45,22,160,0,0,0,},},{{130,15,27,163,177,75,5,},{241,52,25,182,202,2,0,},},{{167,169,10,149,1,0,0,},
{182,70,16,241,142,2,0,},{169,32,0,144,207,1,0,},},{{150,197,24,205,184,1,0,},{163,18,26,153,53,75,5,},{161,8,25,138,133,3,0,},},{0},{{162,12,26,153,107,72,5,},},
{{146,55,24,182,184,1,0,},{139,55,1,131,1,0,0,},},{{133,157,27,163,239,35,12,},{161,42,24,169,4,3,0,},},{{137,173,24,205,200,3,0,},{164,116,17,164,228,2,0,},
{160,128,23,160,170,1,0,},},{{132,153,26,153,123,34,12,},{162,20,26,153,107,72,5,},},{{162,24,27,163,121,72,5,},},{{182,58,27,163,133,178,5,},{162,26,27,163,121,72,5,},},
{{169,16,26,153,123,74,5,},},{{164,106,27,163,217,250,4,},{159,100,27,163,133,250,4,},},{{132,145,25,132,111,2,0,},{162,28,25,169,90,0,0,},},{{155,65,11,146,1,0,0,},
{144,33,24,160,184,1,0,},{182,54,17,241,152,2,0,},},{{163,126,23,160,128,3,0,},{161,28,16,14,73,3,0,},},{{134,169,24,132,179,2,0,},{159,108,27,163,133,250,4,},},
{{182,50,18,241,162,2,0,},},{{132,149,18,134,163,2,0,},},{{132,151,16,134,143,2,0,},{131,65,16,241,182,3,0,},},{{143,39,22,160,0,0,0,},{133,149,17,134,251,3,0,},
{132,145,18,134,163,2,0,},},{{134,165,17,134,229,2,0,},{205,172,26,153,123,106,6,},},{{161,20,27,163,63,75,5,},},{{133,143,25,132,225,3,0,},{131,49,24,182,138,3,0,},
{14,43,16,14,223,2,0,},},{{131,55,26,153,171,179,5,},{162,32,24,169,42,0,0,},},{{160,42,16,14,91,1,0,},},{{136,173,18,136,235,2,0,},{241,50,16,241,222,2,0,},
{163,32,23,160,128,3,0,},},{{137,197,24,205,200,3,0,},{14,39,26,153,211,74,5,},{205,176,18,136,163,2,0,},},{{137,183,24,205,200,3,0,},{241,74,18,241,234,2,0,},},
{{151,143,25,133,197,1,0,},{132,165,27,163,133,34,12,},{160,8,25,138,177,1,0,},},{{136,181,18,136,235,2,0,},{165,120,25,159,162,3,0,},{165,82,24,159,138,3,0,},},
{{136,177,27,163,217,106,6,},{163,12,26,153,53,75,5,},},{{159,82,24,159,74,2,0,},},{{130,21,17,14,189,3,0,},},{{136,185,24,205,178,2,0,},{182,64,18,241,162,2,0,},},
{{182,60,19,241,172,2,0,},{165,96,26,153,171,251,4,},},{{14,21,18,14,235,2,0,},{205,180,25,205,110,2,0,},},{{153,171,13,137,1,0,0,},{164,84,27,163,217,250,4,},
{159,90,27,163,133,250,4,},},{{136,193,24,205,178,2,0,},{182,56,18,241,162,2,0,},{163,8,23,160,128,3,0,},},{{153,175,13,137,1,0,0,},{14,17,17,14,229,2,0,},},
{{131,75,16,241,182,3,0,},{163,124,23,160,128,3,0,},},{{162,30,24,169,42,0,0,},{159,102,17,164,152,2,0,},},{{130,25,26,153,171,75,5,},{162,26,23,160,218,0,0,},},
{{161,30,25,169,40,3,0,},},{{131,71,26,153,171,179,5,},{14,15,27,163,217,74,5,},},{{137,185,24,205,200,3,0,},{133,153,16,134,245,3,0,},{159,110,17,164,152,2,0,},},
{{165,102,26,153,171,251,4,},{159,120,27,163,133,250,4,},},{{138,9,25,138,185,1,0,},{241,60,16,241,222,2,0,},{165,106,27,163,177,251,4,},},{{143,15,22,160,0,0,0,},
{131,63,26,153,171,179,5,},{169,14,24,169,74,2,0,},},{{159,76,24,159,74,2,0,},},{{140,9,20,160,0,0,0,},},{{133,141,24,132,201,3,0,},{163,26,25,169,40,3,0,},},
{{146,57,24,182,184,1,0,},{205,196,17,136,153,2,0,},{182,74,17,241,152,2,0,},},{{149,145,24,132,185,1,0,},},{{130,15,25,169,162,3,0,},{164,120,24,159,178,2,0,},},
{{152,117,1,165,0,0,0,},{136,183,24,205,178,2,0,},{241,70,25,182,202,2,0,},},{{169,32,27,163,133,74,5,},{161,8,23,160,128,3,0,},},{{149,153,24,132,185,1,0,},
{159,80,6,168,239,1,0,},},{{159,33,11,148,1,0,0,},{162,12,24,169,42,0,0,},{160,14,23,160,170,1,0,},},{{143,125,22,160,0,0,0,},{133,153,18,134,1,4,0,},},
{{182,62,27,163,133,178,5,},},{{169,24,24,169,74,2,0,},{164,110,26,153,211,250,4,},},{{164,104,24,159,178,2,0,},{162,20,24,169,42,0,0,},},{{148,15,24,169,184,1,0,},
{162,98,24,152,27,0,0,},},{{14,19,25,169,202,2,0,},{205,182,16,136,143,2,0,},},{{169,16,24,169,74,2,0,},},{{164,106,25,159,202,2,0,},{159,100,25,159,110,2,0,},},
{{130,27,16,14,183,3,0,},{162,28,23,160,218,0,0,},},{{144,109,24,160,184,1,0,},{133,165,25,132,225,3,0,},{161,24,27,163,63,75,5,},},{{136,197,27,163,217,106,6,},
{161,28,18,14,93,3,0,},},{{134,169,26,153,211,34,12,},{159,108,25,159,110,2,0,},},{{130,39,26,153,171,75,5,},{164,90,26,153,211,250,4,},},{{144,21,24,160,184,1,0,},
{161,16,27,163,63,75,5,},},{{131,65,18,241,194,3,0,},{205,192,24,205,74,2,0,},},{{149,139,24,132,185,1,0,},{131,61,17,241,188,3,0,},{169,14,26,153,123,74,5,},},
{{241,62,25,182,202,2,0,},{241,56,26,153,211,178,5,},},{{163,24,17,14,83,3,0,},},{{133,143,27,163,239,35,12,},{14,43,18,14,235,2,0,},{164,78,26,153,211,250,4,},},
{{162,32,26,153,107,72,5,},},{{132,143,24,132,75,2,0,},{241,48,18,241,234,2,0,},},{{148,29,24,169,184,1,0,},{182,72,24,170,87,2,0,},{163,16,17,14,83,3,0,},},
{{131,53,24,182,138,3,0,},{241,44,26,153,211,178,5,},},{{137,183,26,153,233,107,6,},{169,30,26,153,123,74,5,},},{{241,68,24,155,195,2,0,},{160,8,23,160,170,1,0,},},
{{140,109,20,160,0,0,0,},{161,26,18,14,93,3,0,},},{{163,12,24,169,4,3,0,},},{{164,92,26,153,211,250,4,},{159,82,26,153,123,250,4,},},{{159,94,27,163,133,250,4,},},
{{163,157,15,151,1,0,0,},{161,14,24,169,4,3,0,},},{{150,135,24,205,184,1,0,},{137,173,26,153,233,107,6,},{182,60,17,241,152,2,0,},},{{14,21,16,14,223,2,0,},
{205,180,27,163,133,106,6,},},{{130,17,25,169,162,3,0,},{163,42,17,14,83,3,0,},},{{130,29,26,153,171,75,5,},{165,94,16,164,182,3,0,},},{{131,49,18,241,194,3,0,},},
{{131,75,18,241,194,3,0,},{131,55,16,241,182,3,0,},{205,194,24,169,87,2,0,},},{{134,149,27,163,217,34,12,},{160,22,24,139,243,0,0,},},{{146,65,24,182,184,1,0,},
{160,36,24,159,39,1,0,},},{{154,75,10,146,1,0,0,},{136,185,25,205,202,2,0,},{161,30,27,163,63,75,5,},},{{14,15,25,169,202,2,0,},{241,74,24,182,178,2,0,},},
{{132,165,25,132,111,2,0,},{160,30,24,169,10,1,0,},},{{241,56,27,163,217,178,5,},},{{142,21,21,162,0,0,0,},{241,60,18,241,234,2,0,},{165,106,25,159,162,3,0,},},
{{131,63,24,182,138,3,0,},{162,16,26,153,107,72,5,},},{{143,21,22,160,0,0,0,},{159,106,25,159,110,2,0,},},{{136,175,25,205,202,2,0,},{131,65,17,241,188,3,0,},
{241,48,27,163,217,178,5,},},{{144,123,24,160,184,1,0,},{133,141,26,153,233,35,12,},{163,26,27,163,63,75,5,},},{{130,31,25,169,162,3,0,},{163,22,24,139,241,2,0,},},
{{132,141,17,134,153,2,0,},{162,42,16,14,135,0,0,},},{{132,151,25,132,111,2,0,},{130,41,24,175,147,3,0,},},{{136,183,26,153,211,106,6,},{241,70,27,163,217,178,5,},},
{{137,181,27,163,239,107,6,},{169,32,25,169,110,2,0,},},{{14,27,16,14,223,2,0,},{163,2,25,140,103,3,0,},},{0},{{14,21,25,169,202,2,0,},{163,14,17,14,83,3,0,},},
{{182,62,25,182,110,2,0,},{159,116,25,159,110,2,0,},},{{159,92,26,153,123,250,4,},},{0},{{130,19,18,14,195,3,0,},},{{145,83,24,159,184,1,0,},{14,19,27,163,217,74,5,},
{205,182,18,136,163,2,0,},},{{131,73,24,170,147,3,0,},{205,192,18,136,163,2,0,},},{{132,157,16,134,143,2,0,},{130,31,27,163,177,75,5,},{160,16,18,14,115,1,0,},},
{{130,27,18,14,195,3,0,},{164,114,24,157,195,2,0,},},{{142,127,21,162,0,0,0,},{133,165,27,163,239,35,12,},{161,24,25,169,40,3,0,},},{{152,101,1,165,0,0,0,},
{134,147,16,134,223,2,0,},{160,20,17,14,103,1,0,},},{{132,149,16,134,143,2,0,},{160,24,18,14,115,1,0,},},{{130,39,24,169,138,3,0,},{165,100,18,164,194,3,0,},},
{{165,104,17,164,188,3,0,},{161,16,25,169,40,3,0,},},{{163,28,18,14,93,3,0,},},{{132,169,26,153,123,34,12,},{241,58,18,241,234,2,0,},{165,104,27,163,177,251,4,},},
{{241,62,27,163,217,178,5,},},{{169,42,16,14,143,2,0,},},{{169,42,27,163,133,74,5,},{163,20,18,14,93,3,0,},},{{205,170,18,136,163,2,0,},{159,78,26,153,123,250,4,},},
{{132,143,26,153,123,34,12,},{165,94,27,163,177,251,4,},},{{133,147,16,134,245,3,0,},{161,108,23,160,128,3,0,},},{{166,197,11,150,1,0,0,},{205,174,17,136,153,2,0,},
{182,60,27,163,133,178,5,},},{{145,79,24,159,184,1,0,},{143,127,22,160,0,0,0,},{159,86,26,153,123,250,4,},},{{136,177,25,205,202,2,0,},{162,14,16,14,135,0,0,},},
{0},{{146,59,24,182,184,1,0,},{139,59,1,131,1,0,0,},{14,25,25,169,202,2,0,},},{{205,176,27,163,133,106,6,},{160,42,23,160,170,1,0,},},{{136,193,17,136,229,2,0,},
{159,94,25,159,110,2,0,},},{{150,173,24,205,184,1,0,},{161,14,26,153,53,75,5,},},{0},{{157,121,11,145,1,0,0,},{205,184,27,163,133,106,6,},},{{130,17,27,163,177,75,5,},
{241,56,16,241,222,2,0,},},{{130,29,24,169,138,3,0,},{165,94,18,164,194,3,0,},},{{134,151,18,134,235,2,0,},{161,32,18,14,93,3,0,},},{{163,38,18,14,93,3,0,},},
{{134,149,25,132,203,2,0,},{160,108,23,160,170,1,0,},},{{161,26,16,14,73,3,0,},},{{149,157,24,132,185,1,0,},{182,48,25,182,110,2,0,},},{{159,98,24,152,47,2,0,},},
{{134,141,25,132,203,2,0,},{160,30,26,153,67,73,5,},},{{162,38,17,14,149,0,0,},},{{163,30,27,163,63,75,5,},},{0},{{164,100,27,163,217,250,4,},{159,106,27,163,133,250,4,},},
{{136,175,27,163,217,106,6,},{241,48,25,182,202,2,0,},},{{165,110,17,164,188,3,0,},},{{137,177,27,163,239,107,6,},{205,134,24,205,74,2,0,},{164,120,18,164,234,2,0,},},
{{160,32,17,14,103,1,0,},},{0},{{182,70,26,153,123,178,5,},},{{14,31,27,163,217,74,5,},{163,18,16,14,73,3,0,},},{{14,27,18,14,235,2,0,},{241,54,27,163,217,178,5,},},
{{137,197,27,163,239,107,6,},{241,52,27,163,217,178,5,},},{{163,14,23,160,128,3,0,},},{{139,49,1,131,1,0,0,},{133,157,17,134,251,3,0,},{161,42,18,14,93,3,0,},},
{{164,82,24,159,178,2,0,},{159,92,24,159,74,2,0,},},{{163,24,27,163,63,75,5,},},{{165,92,24,159,138,3,0,},{162,30,26,153,107,72,5,},},{{144,125,24,160,184,1,0,},
{169,28,17,14,153,2,0,},},{{205,192,16,136,143,2,0,},{162,18,18,14,163,0,0,},},{{132,157,18,134,163,2,0,},{162,16,18,14,163,0,0,},{160,16,16,14,91,1,0,},},
{{131,71,27,163,177,179,5,},},{{133,169,27,163,239,35,12,},{163,32,25,169,40,3,0,},},{{134,147,18,134,235,2,0,},},{{134,143,17,134,229,2,0,},{162,24,18,14,163,0,0,},
{160,24,16,14,91,1,0,},},{{142,129,21,162,0,0,0,},{133,149,16,134,245,3,0,},{182,50,24,182,74,2,0,},},{{138,127,23,160,0,0,0,},{133,147,18,134,1,4,0,},},
{{163,28,16,14,73,3,0,},{160,44,23,160,170,1,0,},},{{132,169,24,132,75,2,0,},{162,36,24,159,75,0,0,},},{{131,55,27,163,177,179,5,},{182,74,16,241,142,2,0,},},
{{161,20,17,14,83,3,0,},},{{151,151,25,133,197,1,0,},{137,193,24,205,200,3,0,},{163,20,16,14,73,3,0,},},{{136,185,16,136,223,2,0,},{159,78,24,159,74,2,0,},},
{{241,64,26,153,211,178,5,},},{{165,78,24,159,138,3,0,},{161,124,25,160,123,3,0,},},{{152,97,1,165,0,0,0,},{205,174,19,136,173,2,0,},},{{143,43,22,160,0,0,0,},
{164,88,24,159,178,2,0,},{159,86,24,159,74,2,0,},},{{130,13,27,163,177,75,5,},{160,38,16,14,91,1,0,},},{{133,151,24,132,201,3,0,},{14,29,18,14,235,2,0,},
{241,64,27,163,217,178,5,},},{{137,171,17,136,251,3,0,},{14,25,27,163,217,74,5,},},{{205,176,25,205,110,2,0,},{160,126,23,160,170,1,0,},},{{130,21,27,163,177,75,5,},},
{{148,21,24,169,184,1,0,},{182,64,24,182,74,2,0,},{164,100,24,159,178,2,0,},},{{144,131,24,160,184,1,0,},{165,90,17,164,188,3,0,},{161,2,25,140,103,3,0,},},
{{134,153,18,134,235,2,0,},{205,184,25,205,110,2,0,},},{{162,18,24,169,42,0,0,},{159,46,3,164,215,1,0,},},{{136,193,18,136,235,2,0,},{132,157,24,132,75,2,0,},
{182,56,24,182,74,2,0,},},{{145,121,24,159,184,1,0,},{161,32,16,14,73,3,0,},},{{169,18,24,169,74,2,0,},{163,38,16,14,73,3,0,},},{{132,151,24,132,75,2,0,},
{130,15,18,14,195,3,0,},{160,0,23,160,170,1,0,},},{{182,52,18,241,162,2,0,},{164,84,24,159,178,2,0,},},{{156,111,10,145,1,0,0,},{182,48,27,163,133,178,5,},
{159,120,26,153,123,250,4,},},{{164,108,26,153,211,250,4,},},{{137,185,18,136,1,4,0,},{164,96,27,163,217,250,4,},{159,110,27,163,133,250,4,},},{{136,171,27,163,217,106,6,},
{241,74,26,153,211,178,5,},{164,92,16,164,222,2,0,},},{{145,105,24,159,184,1,0,},{144,27,24,160,184,1,0,},{163,30,25,169,40,3,0,},},{{151,165,25,133,197,1,0,},
{146,61,24,182,184,1,0,},},{{130,33,25,169,162,3,0,},{205,196,16,136,143,2,0,},},{0},{{148,27,24,169,184,1,0,},{132,169,17,134,153,2,0,},},{{137,177,25,205,224,3,0,},
{205,134,26,153,123,106,6,},{164,120,16,164,222,2,0,},},{{133,169,18,134,1,4,0,},{160,32,23,160,170,1,0,},},{{241,52,17,241,228,2,0,},{165,76,25,159,162,3,0,},},
{{148,19,24,169,184,1,0,},{164,96,17,164,228,2,0,},},{{131,55,24,182,138,3,0,},{14,31,25,169,202,2,0,},{163,18,18,14,93,3,0,},},{{139,75,1,131,1,0,0,},
{160,14,24,169,10,1,0,},},{0},{{165,84,26,153,171,251,4,},{164,104,25,159,202,2,0,},},{{161,42,16,14,73,3,0,},},{{137,173,16,136,245,3,0,},{164,116,25,159,202,2,0,},},
{0},{{165,92,26,153,171,251,4,},},{{166,171,11,150,1,0,0,},{143,131,22,160,0,0,0,},{163,6,24,143,117,3,0,},},{{134,165,27,163,217,34,12,},{14,33,17,14,229,2,0,},
{169,16,18,14,163,2,0,},},{{131,59,16,241,182,3,0,},{159,100,19,164,172,2,0,},},{{132,145,17,134,153,2,0,},{162,28,17,14,149,0,0,},},{{133,169,25,132,225,3,0,},
{169,20,19,14,173,2,0,},{163,32,27,163,63,75,5,},},{{164,110,16,164,222,2,0,},{159,96,16,164,142,2,0,},},{{134,169,16,134,223,2,0,},},{{182,50,26,153,123,178,5,},},
{{241,56,25,182,202,2,0,},},{{137,187,27,163,239,107,6,},{159,104,16,164,142,2,0,},},{{134,165,26,153,211,34,12,},{134,139,25,132,203,2,0,},{160,28,24,169,10,1,0,},},
{{142,125,21,162,0,0,0,},{132,139,24,132,75,2,0,},{162,6,24,143,199,0,0,},},{{137,193,17,136,251,3,0,},},{{133,143,17,134,251,3,0,},{131,57,24,182,138,3,0,},
{14,43,24,169,178,2,0,},},{{130,43,17,14,189,3,0,},},{{241,64,24,182,178,2,0,},{169,30,27,163,133,74,5,},},{{165,78,26,153,171,251,4,},{163,16,23,160,128,3,0,},},
{{137,197,16,136,245,3,0,},{131,53,18,241,194,3,0,},{14,39,18,14,235,2,0,},},{{169,24,27,163,133,74,5,},{162,254,31,161,8,8,5,},},{{152,121,1,165,0,0,0,},
{130,13,25,169,162,3,0,},{160,38,18,14,115,1,0,},},{{133,151,26,153,233,35,12,},{14,29,16,14,223,2,0,},},{{143,29,22,160,0,0,0,},{169,38,17,14,153,2,0,},},
{{153,173,13,137,1,0,0,},{159,120,17,164,152,2,0,},},{{134,157,17,134,229,2,0,},{130,21,25,169,162,3,0,},{14,39,24,169,178,2,0,},},{{182,64,26,153,123,178,5,},
{163,42,18,14,93,3,0,},},{{137,175,25,205,224,3,0,},{169,26,27,163,133,74,5,},},{{145,95,24,159,184,1,0,},{159,90,16,164,142,2,0,},},{{142,29,21,162,0,0,0,},
{160,18,24,169,10,1,0,},},{{136,193,16,136,223,2,0,},{131,53,17,241,188,3,0,},{182,56,26,153,123,178,5,},},{{167,141,10,149,1,0,0,},{14,17,25,169,202,2,0,},
{163,32,24,169,4,3,0,},},{{164,104,26,153,211,250,4,},{159,102,26,153,123,250,4,},},{{162,26,26,153,107,72,5,},{160,26,24,169,10,1,0,},},{{131,45,25,182,162,3,0,},
{182,52,16,241,142,2,0,},},{{146,75,24,182,184,1,0,},{132,167,24,174,87,2,0,},},{{153,181,13,137,1,0,0,},{138,123,25,138,185,1,0,},{131,71,18,241,194,3,0,},},
{{164,96,25,159,202,2,0,},{159,110,25,159,110,2,0,},},{{136,171,25,205,202,2,0,},{169,10,0,144,207,1,0,},{162,18,27,163,121,72,5,},},{{161,18,27,163,63,75,5,},},
{{149,167,24,174,189,1,0,},{169,14,16,14,143,2,0,},},{{130,33,27,163,177,75,5,},{130,31,24,169,138,3,0,},},{{140,25,20,160,0,0,0,},{132,149,26,153,123,34,12,},},
{{131,59,17,241,188,3,0,},{161,130,23,160,128,3,0,},},{{133,149,25,132,225,3,0,},{160,130,23,160,170,1,0,},},{{159,43,11,148,1,0,0,},{164,90,16,164,222,2,0,},
{162,0,23,160,218,0,0,},},{{165,114,24,157,155,3,0,},{165,76,27,163,177,251,4,},},{{163,143,15,151,1,0,0,},{136,183,16,136,223,2,0,},{241,70,17,241,228,2,0,},},
{{132,153,18,134,163,2,0,},},{{159,116,24,159,74,2,0,},},{{160,40,24,175,25,1,0,},},{{133,153,26,153,233,35,12,},{163,14,27,163,63,75,5,},},{{145,111,24,159,184,1,0,},
{161,0,23,160,128,3,0,},},{{169,24,16,14,143,2,0,},{164,116,27,163,217,250,4,},},{{241,70,18,241,234,2,0,},},{{160,7,24,143,185,1,0,},{161,122,23,160,128,3,0,},},
{{14,19,17,14,229,2,0,},{205,182,24,205,74,2,0,},},{{169,16,16,14,143,2,0,},{162,124,25,160,209,0,0,},},{{162,126,25,160,209,0,0,},{159,100,17,164,152,2,0,},},
{{182,54,26,153,123,178,5,},{161,126,25,160,123,3,0,},},{{161,38,24,169,4,3,0,},{161,28,25,169,40,3,0,},},{{164,110,18,164,234,2,0,},{159,96,18,164,162,2,0,},},
{{134,169,18,134,235,2,0,},{165,106,24,159,138,3,0,},},{{130,39,18,14,195,3,0,},{165,100,24,159,138,3,0,},},{{131,65,25,182,162,3,0,},{14,13,26,153,211,74,5,},},
{{137,187,25,205,224,3,0,},{164,102,18,164,234,2,0,},{159,104,18,164,162,2,0,},},{{134,165,24,132,179,2,0,},{134,139,27,163,217,34,12,},{160,28,26,153,67,73,5,},},
{{165,108,24,159,138,3,0,},},{{133,139,26,153,233,35,12,},{163,24,25,169,40,3,0,},},{{131,57,26,153,171,179,5,},{14,43,26,153,211,74,5,},},{{164,45,2,162,5,0,0,},
{182,60,24,182,74,2,0,},},{{241,50,27,163,217,178,5,},{165,88,26,153,171,251,4,},},{{150,185,24,205,184,1,0,},{133,147,26,153,233,35,12,},{163,16,25,169,40,3,0,},},
{{137,197,18,136,1,4,0,},{131,53,16,241,182,3,0,},{14,39,16,14,223,2,0,},},{{137,183,18,136,1,4,0,},},{{136,181,25,205,202,2,0,},{165,120,18,164,194,3,0,},},
{{205,196,25,205,110,2,0,},},{{169,38,19,14,173,2,0,},{161,40,24,175,17,3,0,},},{{160,42,25,169,52,1,0,},{159,120,19,164,172,2,0,},},{{159,94,19,164,172,2,0,},},
{{139,65,1,131,1,0,0,},{182,60,26,153,123,178,5,},},{{143,129,22,160,0,0,0,},{137,175,27,163,239,107,6,},{169,26,25,169,110,2,0,},},{{134,151,17,134,229,2,0,},
{159,90,18,164,162,2,0,},},{{130,17,17,14,189,3,0,},},{{130,29,18,14,195,3,0,},{162,24,16,14,135,0,0,},},{{158,43,10,148,1,0,0,},{144,19,24,160,184,1,0,},
{163,42,23,160,128,3,0,},},{{132,147,17,134,153,2,0,},{164,104,16,164,222,2,0,},{159,102,24,159,74,2,0,},},{{134,145,25,132,203,2,0,},{130,25,17,14,189,3,0,},},
{{133,167,24,174,209,3,0,},{161,26,26,153,53,75,5,},},{{169,48,0,144,207,1,0,},},{{131,71,16,241,182,3,0,},{14,15,17,14,229,2,0,},},{{142,17,21,162,0,0,0,},
{140,127,20,160,0,0,0,},{165,102,17,164,188,3,0,},},{{14,33,24,169,178,2,0,},{241,60,25,182,202,2,0,},},{{161,18,25,169,40,3,0,},},{{169,14,18,14,163,2,0,},},
{{164,100,17,164,228,2,0,},},{{133,141,17,134,251,3,0,},{163,26,16,14,73,3,0,},},{{182,70,24,182,74,2,0,},},{{137,195,24,169,209,3,0,},},{{132,141,25,132,111,2,0,},
{160,32,27,163,79,73,5,},},{{152,111,1,165,0,0,0,},{139,57,1,131,1,0,0,},{160,42,27,163,79,73,5,},},{{142,45,21,162,0,0,0,},{137,197,26,153,233,107,6,},
{136,183,18,136,235,2,0,},},{{164,109,2,162,5,0,0,},{241,50,24,182,178,2,0,},},{{158,15,10,148,1,0,0,},{137,193,26,153,233,107,6,},{164,94,24,159,178,2,0,},},
{{136,187,27,163,217,106,6,},{134,157,26,153,211,34,12,},},{{133,153,24,132,201,3,0,},{163,14,25,169,40,3,0,},},{{162,30,25,169,90,0,0,},},{{159,88,24,159,74,2,0,},},
{{161,169,11,149,1,0,0,},{130,19,25,169,162,3,0,},},{{182,58,18,241,162,2,0,},{162,20,17,14,149,0,0,},},{{172,133,14,173,1,0,0,},{131,71,24,182,138,3,0,},
{205,182,26,153,123,106,6,},},{{173,131,31,173,1,8,5,},{205,186,27,163,133,106,6,},{161,20,16,14,73,3,0,},},{{130,27,25,169,162,3,0,},{169,18,26,153,123,74,5,},},
{{132,151,18,134,163,2,0,},{182,54,24,182,74,2,0,},},{{161,28,27,163,63,75,5,},},{{151,147,25,133,197,1,0,},{134,147,24,132,179,2,0,},{160,20,25,169,52,1,0,},},
{{132,149,24,132,75,2,0,},{160,24,26,153,67,73,5,},},{{140,19,20,160,0,0,0,},{130,39,16,14,183,3,0,},{165,100,26,153,171,251,4,},},{{131,65,27,163,177,179,5,},
{14,13,24,169,178,2,0,},{182,74,19,241,172,2,0,},},{{131,61,26,153,171,179,5,},{131,53,26,153,171,179,5,},{169,12,24,169,74,2,0,},},{{132,169,18,134,163,2,0,},
{241,58,26,153,211,178,5,},},{{165,108,26,153,171,251,4,},},{{144,25,24,160,184,1,0,},{163,128,23,160,128,3,0,},{161,20,23,160,128,3,0,},},{{132,165,17,134,153,2,0,},
{162,32,17,14,149,0,0,},},{{132,143,17,134,153,2,0,},},{{241,50,25,182,202,2,0,},{165,120,16,164,182,3,0,},},{{133,147,24,132,201,3,0,},{162,122,23,160,218,0,0,},},
{{137,177,26,153,233,107,6,},{162,124,23,160,218,0,0,},},{{136,177,18,136,235,2,0,},{162,14,27,163,121,72,5,},},{{136,181,27,163,217,106,6,},{165,96,24,159,138,3,0,},},
{{148,17,24,169,184,1,0,},{182,68,24,155,99,2,0,},},{{137,171,27,163,239,107,6,},{14,25,17,14,229,2,0,},{164,100,25,159,202,2,0,},},{{165,171,10,150,1,0,0,},
{160,12,24,169,10,1,0,},},{{159,94,17,164,152,2,0,},},{{161,44,23,160,128,3,0,},},{{14,21,27,163,217,74,5,},{205,180,16,136,143,2,0,},},{{134,153,24,132,179,2,0,},
{205,184,19,136,173,2,0,},},{{14,21,17,14,229,2,0,},},{{130,15,17,14,189,3,0,},{165,94,26,153,171,251,4,},},{{131,75,25,182,162,3,0,},{164,84,25,159,202,2,0,},},
{{134,149,18,134,235,2,0,},{164,86,25,159,202,2,0,},},{{134,145,27,163,217,34,12,},},{{161,26,24,169,4,3,0,},},{{182,48,17,241,152,2,0,},{164,92,17,164,228,2,0,},},
{{134,141,18,134,235,2,0,},{133,143,24,132,201,3,0,},{164,94,17,164,228,2,0,},},{{140,43,20,160,0,0,0,},},{{241,60,27,163,217,178,5,},{205,196,19,136,173,2,0,},},
{{161,18,23,160,128,3,0,},},{{205,192,19,136,173,2,0,},},{0},{{133,169,17,134,251,3,0,},{163,26,18,14,93,3,0,},},{{148,31,24,169,184,1,0,},{133,145,18,134,1,4,0,},
{182,74,24,182,74,2,0,},},{{205,172,17,136,153,2,0,},{164,120,26,153,211,250,4,},},{{162,42,26,153,107,72,5,},{160,32,25,169,52,1,0,},},{{169,42,24,169,74,2,0,},},
{{137,181,16,136,245,3,0,},{169,32,18,14,163,2,0,},},{{131,51,24,182,138,3,0,},{14,27,25,169,202,2,0,},{159,80,9,168,31,2,0,},},{{164,94,26,153,211,250,4,},},
{{136,187,25,205,202,2,0,},},{{161,12,24,169,4,3,0,},},{{159,92,19,164,172,2,0,},},{{164,86,26,153,211,250,4,},{159,88,26,153,123,250,4,},},{{138,27,23,160,0,0,0,},
{130,19,27,163,177,75,5,},{14,33,18,14,235,2,0,},},{{136,175,16,136,223,2,0,},{165,92,16,164,182,3,0,},},{{137,135,24,205,200,3,0,},{169,28,25,169,110,2,0,},},
{{205,186,25,205,110,2,0,},{164,90,24,159,178,2,0,},},{{130,27,27,163,177,75,5,},},{{133,165,16,134,245,3,0,},{161,24,18,14,93,3,0,},},{{169,20,25,169,110,2,0,},
{163,32,17,14,83,3,0,},},{{134,147,26,153,211,34,12,},{160,20,27,163,79,73,5,},},{{134,143,25,132,203,2,0,},{160,24,24,169,10,1,0,},},{{139,43,1,130,1,0,0,},
{165,104,26,153,171,251,4,},{161,16,18,14,93,3,0,},},{{146,73,24,170,189,1,0,},{163,28,27,163,63,75,5,},},{{169,12,26,153,123,74,5,},{162,24,23,160,218,0,0,},},
{{132,169,16,134,143,2,0,},{241,58,24,182,178,2,0,},},{{136,135,24,205,178,2,0,},},{{168,47,5,164,5,0,0,},{163,20,27,163,63,75,5,},},{{149,169,24,132,185,1,0,},
{162,16,23,160,218,0,0,},},{{130,25,18,14,195,3,0,},},{{140,15,20,160,0,0,0,},{241,64,18,241,234,2,0,},{169,24,26,153,123,74,5,},},{{165,116,17,164,188,3,0,},},
{{205,174,27,163,133,106,6,},},{{162,14,25,169,90,0,0,},{160,122,25,138,177,1,0,},},{0},{{133,151,16,134,245,3,0,},{205,174,24,205,74,2,0,},},{{137,171,25,205,224,3,0,},
{131,61,24,182,138,3,0,},{162,42,18,14,163,0,0,},},{{205,176,17,136,153,2,0,},{160,12,26,153,67,73,5,},},{{138,29,23,160,0,0,0,},{161,14,17,14,83,3,0,},},
{{165,90,26,153,171,251,4,},},{{146,71,24,182,184,1,0,},{205,180,18,136,163,2,0,},{161,254,31,161,0,8,5,},},{{145,91,24,159,184,1,0,},{134,153,26,153,211,34,12,},
{205,184,17,136,153,2,0,},},{{162,18,16,14,135,0,0,},{160,18,18,14,115,1,0,},},{{163,42,24,169,4,3,0,},{161,32,27,163,63,75,5,},},{{131,75,27,163,177,179,5,},
{241,72,24,170,187,2,0,},},{{134,149,16,134,223,2,0,},},{{136,197,25,205,202,2,0,},{162,26,16,14,135,0,0,},{160,26,18,14,115,1,0,},},{{182,52,26,153,123,178,5,},
{165,102,24,159,138,3,0,},},{{138,25,23,160,0,0,0,},{162,18,26,153,107,72,5,},},{{134,141,16,134,223,2,0,},{163,16,27,163,63,75,5,},},{{241,56,18,241,234,2,0,},
{162,38,26,153,107,72,5,},},{{140,21,20,160,0,0,0,},{169,20,17,14,153,2,0,},},{{132,149,27,163,133,34,12,},},{{132,151,27,163,133,34,12,},},{{132,145,27,163,133,34,12,},
{162,14,18,14,163,0,0,},},{{165,110,24,159,138,3,0,},{165,86,24,159,138,3,0,},},{{133,145,16,134,245,3,0,},{182,74,26,153,123,178,5,},},{{205,172,19,136,173,2,0,},
{159,118,24,176,87,2,0,},},{{145,77,24,159,184,1,0,},{159,84,26,153,123,250,4,},},{{182,70,19,241,172,2,0,},{165,118,24,176,147,3,0,},},{{150,183,24,205,184,1,0,},
{137,181,18,136,1,4,0,},{169,32,16,14,143,2,0,},},{{131,51,26,153,171,179,5,},{14,27,27,163,217,74,5,},},{{160,14,16,14,91,1,0,},},{0},{{138,129,23,160,0,0,0,},
{161,12,26,153,53,75,5,},},{{136,177,16,136,223,2,0,},{159,92,17,164,152,2,0,},},{{138,125,23,160,0,0,0,},{162,20,23,160,218,0,0,},},{{165,88,27,163,177,251,4,},},
{{140,27,20,160,0,0,0,},{165,92,18,164,194,3,0,},{161,122,25,138,133,3,0,},},{{137,135,26,153,233,107,6,},{169,28,27,163,133,74,5,},{165,96,17,164,188,3,0,},},
{{134,151,26,153,211,34,12,},{132,157,25,132,111,2,0,},{160,16,27,163,79,73,5,},},{{132,145,26,153,123,34,12,},{162,28,26,153,107,72,5,},},{{133,165,18,134,1,4,0,},
{161,24,16,14,73,3,0,},},{{151,141,25,133,197,1,0,},{169,20,27,163,133,74,5,},{161,28,23,160,128,3,0,},},{{164,110,24,159,178,2,0,},{159,96,24,159,74,2,0,},},
{{182,50,17,241,152,2,0,},{164,108,24,159,178,2,0,},},{{165,104,24,159,138,3,0,},{161,16,16,14,73,3,0,},},{{163,28,25,169,40,3,0,},},{{144,15,24,160,184,1,0,},
{159,104,24,159,74,2,0,},},{{134,165,18,134,235,2,0,},{160,28,16,14,91,1,0,},},{{136,135,26,153,211,106,6,},{182,60,25,182,110,2,0,},},{{163,20,25,169,40,3,0,},},
{{205,170,27,163,133,106,6,},{159,116,18,164,162,2,0,},},{{164,92,24,159,178,2,0,},},{{241,64,16,241,222,2,0,},},{{152,91,1,165,0,0,0,},},{{205,196,24,205,74,2,0,},},
{{241,54,16,241,222,2,0,},{160,38,25,169,52,1,0,},},{{145,97,24,159,184,1,0,},{138,17,23,160,0,0,0,},},{{133,151,18,134,1,4,0,},{131,49,27,163,177,179,5,},
{14,29,24,169,178,2,0,},},{{131,45,26,153,171,179,5,},{169,38,25,169,110,2,0,},},{{130,21,18,14,195,3,0,},{164,76,24,159,178,2,0,},},{{165,86,27,163,177,251,4,},},
{{158,33,10,148,1,0,0,},{146,45,24,182,184,1,0,},{165,90,24,159,138,3,0,},},{{137,175,17,136,251,3,0,},{169,26,19,14,173,2,0,},{162,24,17,14,149,0,0,},},
{{159,90,24,159,74,2,0,},},{{164,104,17,164,228,2,0,},{160,18,16,14,91,1,0,},},{{163,42,26,153,53,75,5,},{161,32,25,169,40,3,0,},},{{169,18,19,14,173,2,0,},
{163,38,27,163,63,75,5,},},{{132,147,27,163,133,34,12,},{162,30,27,163,121,72,5,},{159,102,18,164,162,2,0,},},{{162,26,18,14,163,0,0,},{160,26,16,14,91,1,0,},},
{{138,43,23,160,0,0,0,},{182,52,24,182,74,2,0,},},{{136,173,25,205,202,2,0,},{14,33,25,169,202,2,0,},},{{137,185,27,163,239,107,6,},{131,59,24,182,138,3,0,},
{159,110,18,164,162,2,0,},},{{140,131,20,160,0,0,0,},{139,71,1,131,1,0,0,},{162,38,24,169,42,0,0,},},{{241,74,16,241,222,2,0,},{182,44,24,182,74,2,0,},},
{{205,172,16,136,143,2,0,},},{{139,33,1,130,1,0,0,},{130,33,16,14,183,3,0,},{159,76,27,163,133,250,4,},},{{241,48,16,241,222,2,0,},{162,4,25,142,187,0,0,},},
{{165,110,26,153,171,251,4,},},{{160,42,26,153,67,73,5,},},{{137,191,24,166,217,3,0,},{130,43,25,169,162,3,0,},},{{162,23,24,139,237,0,0,},{159,84,24,159,74,2,0,},},
{{138,19,23,160,0,0,0,},{182,70,17,241,152,2,0,},},{{133,149,24,132,201,3,0,},{163,18,25,169,40,3,0,},},{{142,19,21,162,0,0,0,},},{{160,14,18,14,115,1,0,},},
{{169,28,19,14,173,2,0,},},{{133,157,24,132,201,3,0,},{161,42,27,163,63,75,5,},{160,26,26,153,67,73,5,},},{{137,173,25,205,224,3,0,},{169,24,19,14,173,2,0,},
{164,116,16,164,222,2,0,},},{{131,71,25,182,162,3,0,},},{{165,88,25,159,162,3,0,},},{{134,141,27,163,217,34,12,},{182,58,24,182,74,2,0,},},{{134,143,27,163,217,34,12,},
{169,16,27,163,133,74,5,},},{{134,151,24,132,179,2,0,},{162,16,27,163,121,72,5,},{160,14,26,153,67,73,5,},},{{132,145,24,132,75,2,0,},{162,28,24,169,42,0,0,},},
{{138,45,23,160,0,0,0,},{182,50,16,241,142,2,0,},},{{161,28,17,14,83,3,0,},},{{159,96,26,153,123,250,4,},},{{182,50,19,241,172,2,0,},},{{160,125,25,160,189,1,0,},},
{{163,28,23,160,128,3,0,},{161,38,16,14,73,3,0,},},{{159,104,26,153,123,250,4,},},{{134,165,16,134,223,2,0,},{132,165,18,134,163,2,0,},{160,28,18,14,115,1,0,},},
{{164,118,24,176,187,2,0,},{161,20,24,169,4,3,0,},},{{144,29,24,160,184,1,0,},{131,57,17,241,188,3,0,},{14,43,17,14,229,2,0,},},{{205,170,25,205,110,2,0,},
{159,116,16,164,142,2,0,},},{{130,43,27,163,177,75,5,},{241,64,25,182,202,2,0,},},{{136,173,17,136,229,2,0,},},{{137,197,25,205,224,3,0,},{131,53,27,163,177,179,5,},
{14,39,27,163,217,74,5,},},{0},{{132,165,26,153,123,34,12,},{241,54,18,241,234,2,0,},{160,38,27,163,79,73,5,},},{{136,181,17,136,229,2,0,},{165,120,26,153,171,251,4,},
{164,102,24,159,178,2,0,},},{{163,12,27,163,63,75,5,},},{{131,45,24,182,138,3,0,},{169,38,27,163,133,74,5,},},{{134,157,24,132,179,2,0,},{130,21,16,14,183,3,0,},},
{{136,185,27,163,217,106,6,},{182,64,17,241,152,2,0,},},{{182,60,18,241,162,2,0,},{169,110,0,144,207,1,0,},},{{130,15,16,14,183,3,0,},{169,26,17,14,153,2,0,},},
{{164,84,26,153,211,250,4,},{159,90,26,153,123,250,4,},},{{136,193,27,163,217,106,6,},{164,86,24,159,178,2,0,},},{{14,17,16,14,223,2,0,},{161,6,24,143,117,3,0,},},
{{139,39,1,130,1,0,0,},{169,18,17,14,153,2,0,},{163,38,25,169,40,3,0,},},{{154,49,10,146,1,0,0,},{164,92,18,164,234,2,0,},{159,102,16,164,142,2,0,},},
{{136,197,17,136,229,2,0,},{130,25,25,169,162,3,0,},{164,94,16,164,222,2,0,},},{{161,30,24,169,4,3,0,},},{{205,196,18,136,163,2,0,},},{{137,185,25,205,224,3,0,},
{164,96,16,164,222,2,0,},{159,110,16,164,142,2,0,},},{{165,102,25,159,162,3,0,},},{{241,60,17,241,228,2,0,},{165,106,26,153,171,251,4,},},{{133,169,16,134,245,3,0,},
{161,18,17,14,83,3,0,},},{{145,107,24,159,184,1,0,},{130,33,18,14,195,3,0,},{159,76,25,159,110,2,0,},},{{165,104,18,164,194,3,0,},{160,6,24,143,145,1,0,},},
{{142,123,21,162,0,0,0,},{133,141,25,132,225,3,0,},{163,26,24,169,4,3,0,},},{{131,59,27,163,177,179,5,},{169,42,25,169,110,2,0,},},{0},{{130,15,26,153,171,75,5,},
{241,52,24,182,178,2,0,},},{{136,183,25,205,202,2,0,},{241,70,24,182,178,2,0,},},{{131,55,17,241,188,3,0,},{163,18,27,163,63,75,5,},},{{159,80,7,168,255,1,0,},},
{{162,12,27,163,121,72,5,},},{{163,14,18,14,93,3,0,},},{{133,157,26,153,233,35,12,},{161,42,25,169,40,3,0,},},{{137,173,27,163,239,107,6,},{164,116,18,164,234,2,0,},},
{{131,57,16,241,182,3,0,},{162,20,27,163,121,72,5,},},{{130,19,17,14,189,3,0,},{162,40,24,175,59,0,0,},},{{142,109,21,162,0,0,0,},{136,195,24,169,187,2,0,},
{182,58,26,153,123,178,5,},},{{169,16,25,169,110,2,0,},},{{139,19,1,130,1,0,0,},{164,106,26,153,211,250,4,},{159,100,26,153,123,250,4,},},{{130,27,17,14,189,3,0,},},
{{182,54,16,241,142,2,0,},{163,36,24,159,29,3,0,},},{{134,151,25,132,203,2,0,},{161,38,18,14,93,3,0,},},{{145,85,24,159,184,1,0,},{134,169,25,132,203,2,0,},
{159,108,26,153,123,250,4,},},{{169,189,1,165,1,0,0,},{130,39,27,163,177,75,5,},{162,24,24,169,42,0,0,},},{{152,105,1,165,0,0,0,},{163,122,23,160,128,3,0,},
{163,26,23,160,128,3,0,},},{{163,24,23,160,128,3,0,},},{{149,165,24,132,185,1,0,},{131,61,18,241,194,3,0,},},{{241,62,24,182,178,2,0,},{162,16,16,14,135,0,0,},},
{{161,20,26,153,53,75,5,},},{{133,143,26,153,233,35,12,},{169,24,25,169,110,2,0,},},{{162,32,25,169,90,0,0,},},{{171,137,25,172,193,1,0,},{132,143,25,132,111,2,0,},
{162,2,25,140,177,0,0,},},{{157,111,11,145,1,0,0,},{241,50,17,241,228,2,0,},},{{131,53,25,182,162,3,0,},{14,39,25,169,202,2,0,},},{{137,183,25,205,224,3,0,},
{205,174,25,205,110,2,0,},},{{136,177,26,153,211,106,6,},{205,172,25,205,110,2,0,},},{{165,120,24,159,138,3,0,},{165,82,25,159,162,3,0,},},{{150,181,24,205,184,1,0,},
{163,12,25,169,40,3,0,},},{{145,93,24,159,184,1,0,},{164,92,25,159,202,2,0,},{159,82,25,159,110,2,0,},},{{165,116,25,159,162,3,0,},{159,94,26,153,123,250,4,},},
{{182,64,19,241,172,2,0,},{161,14,23,160,128,3,0,},},{{182,60,16,241,142,2,0,},{161,38,26,153,53,75,5,},},{{174,161,1,167,1,0,0,},{205,180,24,205,74,2,0,},
{161,36,24,159,29,3,0,},},{{152,103,1,165,0,0,0,},{130,17,24,169,138,3,0,},},{{136,193,25,205,202,2,0,},{182,56,19,241,172,2,0,},},{{14,17,18,14,235,2,0,},},
{{131,75,17,241,188,3,0,},{163,38,23,160,128,3,0,},},{{151,145,25,133,197,1,0,},{134,149,26,153,211,34,12,},},{{130,25,27,163,177,75,5,},{163,16,26,153,53,75,5,},},
{{148,41,24,175,189,1,0,},{161,30,26,153,53,75,5,},},{{14,15,26,153,211,74,5,},{169,20,16,14,143,2,0,},},{{134,141,26,153,211,34,12,},{169,18,18,14,163,2,0,},
{160,30,25,169,52,1,0,},},{{139,15,1,130,1,0,0,},{132,151,26,153,123,34,12,},{165,102,27,163,177,251,4,},},{{133,149,27,163,239,35,12,},{162,14,17,14,149,0,0,},},
{{131,63,27,163,177,179,5,},{169,14,25,169,110,2,0,},{165,86,25,159,162,3,0,},},{{133,145,27,163,239,35,12,},{159,106,24,159,74,2,0,},},{0},{{133,141,27,163,239,35,12,},
{132,153,16,134,143,2,0,},{163,26,26,153,53,75,5,},},{{150,187,24,205,184,1,0,},{133,145,26,153,233,35,12,},{182,56,17,241,152,2,0,},},{{132,141,16,134,143,2,0,},
{159,114,24,157,99,2,0,},},{{130,15,24,169,138,3,0,},{241,52,26,153,211,178,5,},},{{136,183,27,163,217,106,6,},{241,70,26,153,211,178,5,},},{{137,181,24,205,200,3,0,},
{169,32,26,153,123,74,5,},},{{131,51,16,241,182,3,0,},{14,33,16,14,223,2,0,},{14,27,17,14,229,2,0,},},{{164,94,18,164,234,2,0,},{162,12,25,169,90,0,0,},},
{{163,14,16,14,73,3,0,},},{{182,62,26,153,123,178,5,},},{{164,82,27,163,217,250,4,},{159,92,27,163,133,250,4,},},{{132,153,25,132,111,2,0,},{162,20,25,169,90,0,0,},},
{0},{{14,19,24,169,178,2,0,},{205,182,17,136,153,2,0,},},{{164,102,17,164,228,2,0,},},{{164,106,24,159,178,2,0,},{159,100,24,159,74,2,0,},},{{142,39,21,162,0,0,0,},},
{{133,165,24,132,201,3,0,},{165,96,18,164,194,3,0,},{161,24,26,153,53,75,5,},},{{134,147,17,134,229,2,0,},{160,20,16,14,91,1,0,},},{{134,169,27,163,217,34,12,},
{159,108,24,159,74,2,0,},},{{130,39,25,169,162,3,0,},},{{150,195,24,169,189,1,0,},{163,122,25,138,133,3,0,},{161,16,26,153,53,75,5,},},{0},{{131,61,16,241,182,3,0,},
{165,88,24,159,138,3,0,},},{{241,62,26,153,211,178,5,},},{{163,24,16,14,73,3,0,},},{{137,193,27,163,239,107,6,},{133,143,16,134,245,3,0,},{169,42,26,153,123,74,5,},},
{{162,32,27,163,121,72,5,},},{{132,143,27,163,133,34,12,},{205,196,27,163,133,106,6,},},{{163,16,16,14,73,3,0,},},{{205,192,27,163,133,106,6,},{205,174,16,136,143,2,0,},},
{{143,1,22,160,0,0,0,},{137,183,27,163,239,107,6,},},{{136,177,24,205,178,2,0,},{160,38,23,160,170,1,0,},},{{164,76,25,159,202,2,0,},},{{137,171,18,136,1,4,0,},
{14,25,24,169,178,2,0,},{164,78,25,159,202,2,0,},},{{143,9,22,160,0,0,0,},{164,92,27,163,217,250,4,},{159,82,27,163,133,250,4,},},{{142,15,21,162,0,0,0,},
{159,94,24,159,74,2,0,},},{{142,1,21,162,0,0,0,},{161,14,25,169,40,3,0,},},{{165,90,18,164,194,3,0,},{163,98,24,152,249,2,0,},},{{143,25,22,160,0,0,0,},
{205,180,26,153,123,106,6,},},{{130,17,26,153,171,75,5,},{159,46,4,164,227,1,0,},},{{130,29,27,163,177,75,5,},{165,94,17,164,188,3,0,},},{{169,30,24,169,74,2,0,},
{163,42,16,14,73,3,0,},},{0},{{134,149,24,132,179,2,0,},{14,33,26,153,211,74,5,},},{{131,59,25,182,162,3,0,},},{{131,57,25,182,162,3,0,},{182,48,24,182,74,2,0,},},
{{14,15,24,169,178,2,0,},},{{134,141,24,132,179,2,0,},{160,30,27,163,79,73,5,},},{{131,51,17,241,188,3,0,},{162,38,18,14,163,0,0,},},{{146,49,24,182,184,1,0,},
{131,49,17,241,188,3,0,},{163,30,26,153,53,75,5,},},{{143,33,22,160,0,0,0,},{131,63,25,182,162,3,0,},{169,14,27,163,133,74,5,},},{{164,100,26,153,211,250,4,},
{159,106,26,153,123,250,4,},},{{136,175,24,205,178,2,0,},{241,48,26,153,211,178,5,},},{{165,110,16,164,182,3,0,},{161,22,24,139,241,2,0,},},{{133,145,24,132,201,3,0,},
{182,74,18,241,162,2,0,},},{{132,141,18,134,163,2,0,},{160,32,16,14,91,1,0,},},{0},{{182,70,27,163,133,178,5,},},{{137,181,26,153,233,107,6,},{169,32,24,169,74,2,0,},
{163,18,23,160,128,3,0,},},{{131,51,18,241,194,3,0,},{169,26,16,14,143,2,0,},},{{169,24,18,14,163,2,0,},},{{140,29,20,160,0,0,0,},{165,84,25,159,162,3,0,},},
{{182,62,24,182,74,2,0,},{169,20,26,153,123,74,5,},},{{159,92,25,159,110,2,0,},},{{134,143,26,153,211,34,12,},{130,19,16,14,183,3,0,},},{{165,92,25,159,162,3,0,},},
{{205,182,19,136,173,2,0,},{182,48,19,241,172,2,0,},},{{205,192,17,136,153,2,0,},},{{132,157,17,134,153,2,0,},{182,52,19,241,172,2,0,},{162,16,17,14,149,0,0,},},
{{130,13,26,153,171,75,5,},{162,28,18,14,163,0,0,},},{{165,96,16,164,182,3,0,},{161,24,24,169,4,3,0,},},{{160,20,18,14,115,1,0,},},{{132,149,17,134,153,2,0,},
{161,38,17,14,83,3,0,},},{{148,13,24,169,184,1,0,},{182,50,25,182,110,2,0,},{160,32,18,14,115,1,0,},},{{176,113,1,156,1,0,0,},{137,185,16,136,245,3,0,},
{161,16,24,169,4,3,0,},},{{163,28,17,14,83,3,0,},},{{132,169,27,163,133,34,12,},},{{140,125,20,160,0,0,0,},{132,139,27,163,133,34,12,},{162,122,25,138,227,0,0,},},
{{137,177,24,205,200,3,0,},{163,24,18,14,93,3,0,},},{{137,193,25,205,224,3,0,},{163,20,17,14,83,3,0,},},{{145,109,24,159,184,1,0,},{205,170,19,136,173,2,0,},
{159,78,27,163,133,250,4,},},{{160,122,23,160,170,1,0,},},{{133,147,17,134,251,3,0,},{163,16,18,14,93,3,0,},},{{205,174,18,136,163,2,0,},{164,102,27,163,217,250,4,},},
{{145,101,24,159,184,1,0,},{164,88,27,163,217,250,4,},{159,86,27,163,133,250,4,},},{{132,165,16,134,143,2,0,},{241,54,24,182,178,2,0,},{160,38,17,14,103,1,0,},},
{{132,157,27,163,133,34,12,},},{{143,123,22,160,0,0,0,},{137,171,16,136,245,3,0,},{14,25,26,153,211,74,5,},},{{132,153,27,163,133,34,12,},{205,176,26,153,123,106,6,},},
{{134,157,18,134,235,2,0,},{130,21,26,153,171,75,5,},{165,94,24,159,138,3,0,},},{{155,75,11,146,1,0,0,},{161,14,27,163,63,75,5,},},{{161,141,11,149,1,0,0,},
{165,90,16,164,182,3,0,},{164,86,27,163,217,250,4,},},{{134,153,17,134,229,2,0,},{205,184,26,153,123,106,6,},},{{160,18,27,163,79,73,5,},},{{132,141,27,163,133,34,12,},
{130,29,25,169,162,3,0,},},{{161,32,17,14,83,3,0,},},{{156,91,10,145,1,0,0,},{169,18,27,163,133,74,5,},},{{136,197,16,136,223,2,0,},{162,26,25,169,90,0,0,},
{160,26,27,163,79,73,5,},},{{161,26,17,14,83,3,0,},},{{182,48,26,153,123,178,5,},},{{134,145,17,134,229,2,0,},{164,108,25,159,202,2,0,},},{{145,87,24,159,184,1,0,},
{164,96,26,153,211,250,4,},{159,110,26,153,123,250,4,},},{{241,56,24,182,178,2,0,},{162,38,16,14,135,0,0,},},{{155,49,11,146,1,0,0,},{163,30,24,169,4,3,0,},},
{0},{{130,33,24,169,138,3,0,},},{{136,175,26,153,211,106,6,},{241,48,24,182,178,2,0,},},{{148,33,24,169,184,1,0,},{165,110,18,164,194,3,0,},{160,254,31,161,4,8,5,},},
{{205,172,24,205,74,2,0,},{205,134,25,205,110,2,0,},},{{162,126,23,160,218,0,0,},},{0},{{140,1,20,160,0,0,0,},{182,70,25,182,110,2,0,},},{{14,31,26,153,211,74,5,},
{163,18,17,14,83,3,0,},},{{156,121,10,145,1,0,0,},{160,14,25,169,52,1,0,},},{{136,175,18,136,235,2,0,},{134,167,24,174,187,2,0,},},{{165,84,27,163,177,251,4,},},
{{139,27,1,130,1,0,0,},{133,157,16,134,245,3,0,},},{{137,173,17,136,251,3,0,},{164,116,24,159,178,2,0,},{162,42,25,169,90,0,0,},},{{145,89,24,159,184,1,0,},},
{{165,92,27,163,177,251,4,},},{{150,171,24,205,184,1,0,},{169,28,16,14,143,2,0,},{163,40,24,175,17,3,0,},},{{169,16,19,14,173,2,0,},},{{134,151,16,134,223,2,0,},
{160,16,17,14,103,1,0,},},{{132,145,16,134,143,2,0,},{162,28,16,14,135,0,0,},},{{133,169,26,153,233,35,12,},{162,24,25,169,90,0,0,},},{{205,190,24,166,99,2,0,},
{159,96,17,164,152,2,0,},},{{134,143,16,134,223,2,0,},{160,24,17,14,103,1,0,},},{{140,129,20,160,0,0,0,},{182,50,27,163,133,178,5,},},{{144,39,24,160,184,1,0,},
{160,24,23,160,170,1,0,},},{{137,187,26,153,233,107,6,},{159,104,17,164,152,2,0,},},{{241,58,17,241,228,2,0,},{160,20,23,160,170,1,0,},},{{138,123,23,160,0,0,0,},
{132,139,25,132,111,2,0,},{130,29,16,14,183,3,0,},},{{160,16,23,160,170,1,0,},},{{163,20,23,160,128,3,0,},{161,128,23,160,128,3,0,},},{{165,197,10,150,1,0,0,},
{159,78,25,159,110,2,0,},},{{205,174,26,153,123,106,6,},},{{165,116,24,159,138,3,0,},{165,78,25,159,162,3,0,},},{{137,197,17,136,251,3,0,},{14,43,25,169,202,2,0,},
{205,170,26,153,123,106,6,},},{{143,17,22,160,0,0,0,},{164,88,25,159,202,2,0,},{159,86,25,159,110,2,0,},},{{130,13,24,169,138,3,0,},{241,54,26,153,211,178,5,},},
{{133,151,25,132,225,3,0,},{131,49,16,241,182,3,0,},{160,42,18,14,115,1,0,},},{{150,177,24,205,184,1,0,},{169,38,16,14,143,2,0,},{163,8,25,138,133,3,0,},},
{{205,176,24,205,74,2,0,},{160,38,26,153,67,73,5,},},{{134,157,16,134,223,2,0,},{130,21,24,169,138,3,0,},},{{157,91,11,145,1,0,0,},{182,64,25,182,110,2,0,},},
{{137,175,24,205,200,3,0,},{169,26,26,153,123,74,5,},},{{133,165,26,153,233,35,12,},{205,184,24,205,74,2,0,},},{{151,149,25,133,197,1,0,},{133,163,24,161,217,3,0,},
{160,18,25,169,52,1,0,},},{{182,56,25,182,110,2,0,},},{{14,17,24,169,178,2,0,},{161,32,23,160,128,3,0,},},{{131,71,17,241,188,3,0,},{162,22,24,139,15,0,0,},},
{{151,157,25,133,197,1,0,},{136,197,18,136,235,2,0,},{160,26,25,169,52,1,0,},},{{161,26,23,160,128,3,0,},{160,18,26,153,67,73,5,},},{{136,135,25,205,202,2,0,},},
{{133,149,26,153,233,35,12,},{164,108,27,163,217,250,4,},},{{137,185,17,136,251,3,0,},{132,147,25,132,111,2,0,},{159,110,24,159,74,2,0,},},{{136,171,26,153,211,106,6,},
{241,74,27,163,217,178,5,},{165,84,24,159,138,3,0,},},{{161,18,26,153,53,75,5,},},{{132,153,17,134,153,2,0,},},{{130,33,26,153,171,75,5,},{163,4,25,142,109,3,0,},},
{{182,58,16,241,142,2,0,},},{{163,108,23,160,128,3,0,},{159,120,25,159,110,2,0,},},{{205,134,27,163,133,106,6,},{164,120,17,164,228,2,0,},},{{162,42,23,160,218,0,0,},},
{{241,52,16,241,222,2,0,},{165,76,24,159,138,3,0,},},{{136,183,17,136,229,2,0,},{241,70,16,241,222,2,0,},},{{133,149,18,134,1,4,0,},{131,55,25,182,162,3,0,},
{14,31,24,169,178,2,0,},},{{139,53,1,131,1,0,0,},{137,177,17,136,251,3,0,},{160,14,27,163,79,73,5,},},{{162,8,25,138,227,0,0,},{160,124,25,160,153,1,0,},},
{{133,153,27,163,239,35,12,},{163,14,26,153,53,75,5,},},{{133,157,18,134,1,4,0,},{161,42,17,14,83,3,0,},},{{139,29,1,130,1,0,0,},{164,116,26,153,211,250,4,},
{164,100,18,164,234,2,0,},},{{136,191,24,166,195,2,0,},{164,102,16,164,222,2,0,},},{{182,58,17,241,152,2,0,},{164,96,18,164,234,2,0,},},{{169,28,18,14,163,2,0,},},
{{140,33,20,160,0,0,0,},{169,16,17,14,153,2,0,},},{{159,100,18,164,162,2,0,},},{{182,54,27,163,133,178,5,},{161,24,23,160,128,3,0,},},{{133,169,24,132,201,3,0,},
{163,126,25,160,123,3,0,},{163,32,26,153,53,75,5,},},{{159,96,19,164,172,2,0,},},{{134,169,17,134,229,2,0,},},{{165,100,25,159,162,3,0,},},{0},{{137,187,24,205,200,3,0,},
{159,104,19,164,172,2,0,},},{{134,139,24,132,179,2,0,},{132,143,16,134,143,2,0,},{160,28,25,169,52,1,0,},},{{165,108,25,159,162,3,0,},{164,88,26,153,211,250,4,},},
{{146,63,24,182,184,1,0,},{205,196,26,153,123,106,6,},{161,20,18,14,93,3,0,},},{{133,143,18,134,1,4,0,},{131,57,27,163,177,179,5,},{14,43,27,163,217,74,5,},},
{{205,192,26,153,123,106,6,},{160,4,25,142,135,1,0,},},{{136,173,24,205,178,2,0,},{241,50,26,153,211,178,5,},},{{165,116,26,153,171,251,4,},{165,78,27,163,177,251,4,},},
{{149,147,24,132,185,1,0,},{14,39,17,14,229,2,0,},{164,76,26,153,211,250,4,},},{{159,15,11,148,1,0,0,},{137,183,17,136,251,3,0,},{164,78,24,159,178,2,0,},},
{{142,43,21,162,0,0,0,},{136,181,24,205,178,2,0,},{134,153,16,134,223,2,0,},},{{133,151,27,163,239,35,12,},{14,29,17,14,229,2,0,},},{{144,9,24,160,184,1,0,},
{169,38,18,14,163,2,0,},},{{241,44,24,182,178,2,0,},{159,120,16,164,142,2,0,},},{{159,94,18,164,162,2,0,},},{{136,185,17,136,229,2,0,},{182,64,27,163,133,178,5,},},
{{137,175,26,153,233,107,6,},{169,26,24,169,74,2,0,},},{{159,90,17,164,152,2,0,},},{{139,17,1,130,1,0,0,},{130,17,16,14,183,3,0,},{160,18,23,160,170,1,0,},},
{{136,173,27,163,217,106,6,},{182,56,27,163,133,178,5,},},{{14,17,26,153,211,74,5,},{163,0,23,160,128,3,0,},},{{132,147,18,134,163,2,0,},{159,102,27,163,133,250,4,},},
{{142,131,21,162,0,0,0,},{134,145,24,132,179,2,0,},{130,25,16,14,183,3,0,},},{{182,52,17,241,152,2,0,},},{{146,53,24,182,184,1,0,},{205,170,16,136,143,2,0,},},
{{143,109,22,160,0,0,0,},{14,15,18,14,235,2,0,},},{{165,102,16,164,182,3,0,},},{{136,171,24,205,178,2,0,},{241,74,25,182,202,2,0,},{160,42,24,169,10,1,0,},},
{{161,18,24,169,4,3,0,},},{{149,141,24,132,185,1,0,},{169,14,17,14,153,2,0,},},{{164,100,16,164,222,2,0,},},{{134,157,25,132,203,2,0,},},{{143,19,22,160,0,0,0,},
{131,59,18,241,194,3,0,},},{0},{{132,141,24,132,75,2,0,},{160,32,26,153,67,73,5,},},{{241,52,18,241,234,2,0,},{165,76,26,153,171,251,4,},},{{143,27,22,160,0,0,0,},
{169,24,17,14,153,2,0,},},{{169,36,24,159,99,2,0,},},{{145,103,24,159,184,1,0,},{164,94,25,159,202,2,0,},},{{169,18,25,169,110,2,0,},},{{133,153,25,132,225,3,0,},
{163,14,24,169,4,3,0,},},{{161,42,23,160,128,3,0,},},{{159,88,25,159,110,2,0,},},{{14,17,27,163,217,74,5,},},{{182,58,19,241,172,2,0,},},{{205,182,25,205,110,2,0,},
{182,54,18,241,162,2,0,},},{{205,186,26,153,123,106,6,},{159,116,27,163,133,250,4,},},{{159,100,16,164,142,2,0,},},{{182,54,25,182,110,2,0,},},{{161,38,25,169,40,3,0,},
{161,28,24,169,4,3,0,},},{{151,153,25,133,197,1,0,},{134,147,25,132,203,2,0,},{160,20,24,169,10,1,0,},},{0},{{130,39,17,14,189,3,0,},{165,100,27,163,177,251,4,},},
{{131,65,24,182,138,3,0,},{14,13,27,163,217,74,5,},},{{131,61,27,163,177,179,5,},{169,12,25,169,110,2,0,},{165,100,17,164,188,3,0,},},{{134,165,25,132,203,2,0,},
{134,139,26,153,211,34,12,},{160,28,27,163,79,73,5,},},{{165,108,27,163,177,251,4,},},{{133,139,27,163,239,35,12,},{163,24,24,169,4,3,0,},},{{162,32,16,14,135,0,0,},},
{{130,43,18,14,195,3,0,},{164,102,26,153,211,250,4,},},{{136,173,26,153,211,106,6,},{164,96,24,159,178,2,0,},},{{144,127,24,160,184,1,0,},{133,147,27,163,239,35,12,},
{163,16,24,169,4,3,0,},},{{169,42,18,14,163,2,0,},},{0},{{136,181,26,153,211,106,6,},{132,153,24,132,75,2,0,},{165,120,17,164,188,3,0,},},{{145,117,24,159,184,1,0,},
{165,94,25,159,162,3,0,},},{{137,171,26,153,233,107,6,},{14,25,16,14,223,2,0,},},{{159,120,18,164,162,2,0,},},{{162,130,23,160,218,0,0,},{159,94,16,164,142,2,0,},},
{{152,93,1,165,0,0,0,},{164,82,26,153,211,250,4,},},{{152,95,1,165,0,0,0,},{14,21,26,153,211,74,5,},{205,180,17,136,153,2,0,},},{{162,128,23,160,218,0,0,},
{159,90,19,164,172,2,0,},},{{130,17,18,14,195,3,0,},{162,18,23,160,218,0,0,},},{{142,25,21,162,0,0,0,},{132,139,26,153,123,34,12,},{164,90,18,164,234,2,0,},},
{{151,169,25,133,197,1,0,},{131,75,24,182,138,3,0,},},{{132,147,16,134,143,2,0,},{159,102,25,159,110,2,0,},},{{134,145,26,153,211,34,12,},{134,145,18,134,235,2,0,},
{241,58,16,241,222,2,0,},},{{148,39,24,169,184,1,0,},{161,26,27,163,63,75,5,},},{{182,48,16,241,142,2,0,},},{{14,15,16,14,223,2,0,},{165,104,16,164,182,3,0,},},
{{140,17,20,160,0,0,0,},{130,37,24,159,155,3,0,},{165,102,18,164,194,3,0,},},{{241,60,24,182,178,2,0,},{162,108,23,160,218,0,0,},},{{164,110,17,164,228,2,0,},},
{{169,14,19,14,173,2,0,},},{{160,2,25,140,127,1,0,},},{{133,141,16,134,245,3,0,},{163,26,17,14,83,3,0,},},{{182,74,25,182,110,2,0,},},{0},{{132,141,26,153,123,34,12,},
{162,42,27,163,121,72,5,},{160,32,24,169,10,1,0,},},{{162,99,24,152,161,1,0,},{140,39,20,160,0,0,0,},},{{137,181,17,136,251,3,0,},{169,32,19,14,173,2,0,},},
{{137,173,18,136,1,4,0,},{131,57,18,241,194,3,0,},},{{136,171,17,136,229,2,0,},{164,94,27,163,217,250,4,},},{{136,187,26,153,211,106,6,},{162,42,24,169,42,0,0,},},
{{150,193,24,205,184,1,0,},{144,45,24,160,184,1,0,},{161,12,25,169,40,3,0,},},{{150,175,24,205,184,1,0,},},{{162,20,16,14,135,0,0,},{159,88,27,163,133,250,4,},},
{{241,54,25,182,202,2,0,},},{{142,27,21,162,0,0,0,},{165,92,17,164,188,3,0,},{161,4,25,142,109,3,0,},},{{14,19,18,14,235,2,0,},{205,182,27,163,133,106,6,},},
{{205,186,24,205,74,2,0,},{162,24,26,153,107,72,5,},},{{130,27,24,169,138,3,0,},{162,26,24,169,42,0,0,},},{{133,165,17,134,251,3,0,},{165,96,27,163,177,251,4,},},
{{148,43,24,169,184,1,0,},{161,38,27,163,63,75,5,},{161,28,26,153,53,75,5,},},{{134,147,27,163,217,34,12,},{160,20,26,153,67,73,5,},},{{132,149,25,132,111,2,0,},
{160,24,27,163,79,73,5,},},{{162,20,18,14,163,0,0,},},{{131,65,26,153,171,179,5,},{130,29,17,14,189,3,0,},{14,13,25,169,202,2,0,},},{{131,61,25,182,162,3,0,},
{169,12,27,163,133,74,5,},},{{241,58,27,163,217,178,5,},},{{140,45,20,160,0,0,0,},{132,151,17,134,153,2,0,},{161,16,23,160,128,3,0,},},{{133,139,25,132,225,3,0,},
{163,24,26,153,53,75,5,},},{{205,172,27,163,133,106,6,},{162,32,18,14,163,0,0,},},{{131,51,25,182,162,3,0,},{162,44,23,160,218,0,0,},},{{131,49,25,182,162,3,0,},},
{{144,43,24,160,184,1,0,},{133,147,25,132,225,3,0,},{162,32,23,160,218,0,0,},},{{165,116,27,163,177,251,4,},{160,42,17,14,103,1,0,},},{{130,43,16,14,183,3,0,},
{162,14,26,153,107,72,5,},},{{136,185,18,136,235,2,0,},{205,176,19,136,173,2,0,},},{{161,126,23,160,128,3,0,},},{{137,171,24,205,200,3,0,},{14,25,18,14,235,2,0,},
{161,124,23,160,128,3,0,},},{{151,139,25,171,197,1,0,},{160,12,25,169,52,1,0,},},{{138,39,23,160,0,0,0,},{137,181,25,205,224,3,0,},{161,14,16,14,73,3,0,},},
{{132,163,24,161,99,2,0,},{182,22,24,139,59,2,0,},},{{153,177,13,137,1,0,0,},{205,180,19,136,173,2,0,},},{{134,153,25,132,203,2,0,},{205,184,18,136,163,2,0,},},
{{241,44,25,182,202,2,0,},{162,18,17,14,149,0,0,},},{{169,20,18,14,163,2,0,},{160,16,25,169,52,1,0,},},{{131,75,26,153,171,179,5,},{169,18,16,14,143,2,0,},},
{{134,143,18,134,235,2,0,},{130,19,24,169,138,3,0,},},{{136,197,24,205,178,2,0,},{162,26,17,14,149,0,0,},{162,14,23,160,218,0,0,},},{{140,123,20,160,0,0,0,},
{132,147,24,132,75,2,0,},{161,26,25,169,40,3,0,},},{{133,145,25,132,225,3,0,},{182,48,18,241,162,2,0,},},{{14,19,16,14,223,2,0,},{165,82,27,163,177,251,4,},},
{{162,38,27,163,121,72,5,},},{{241,60,26,153,211,178,5,},},{{133,153,17,134,251,3,0,},},{{159,120,24,159,74,2,0,},},{{136,175,17,136,229,2,0,},{14,29,26,153,211,74,5,},},
{{133,141,18,134,1,4,0,},{163,130,23,160,128,3,0,},},{{139,61,1,131,1,0,0,},{133,145,17,134,251,3,0,},{182,74,27,163,133,178,5,},},{{137,177,18,136,1,4,0,},
{164,120,27,163,217,250,4,},},{{164,90,27,163,217,250,4,},{159,84,27,163,133,250,4,},},{{137,177,16,136,245,3,0,},},{{169,32,17,14,153,2,0,},},{{14,27,24,169,178,2,0,},
{159,80,8,168,15,2,0,},},{{160,14,17,14,103,1,0,},},{{136,187,24,205,178,2,0,},{162,8,23,160,218,0,0,},{160,124,23,160,170,1,0,},},{{161,12,27,163,63,75,5,},},
{{149,149,24,132,185,1,0,},{159,92,18,164,162,2,0,},},{0},{{130,19,26,153,171,75,5,},},{{144,129,24,160,184,1,0,},{161,98,24,152,249,2,0,},},{{137,135,25,205,224,3,0,},
{169,28,24,169,74,2,0,},{164,104,27,163,217,250,4,},},{{134,151,27,163,217,34,12,},{162,16,24,169,42,0,0,},{160,16,26,153,67,73,5,},},{{138,33,23,160,0,0,0,},
{130,27,26,153,171,75,5,},},{{165,96,25,159,162,3,0,},{161,24,17,14,83,3,0,},},{{169,20,24,169,74,2,0,},{163,32,16,14,73,3,0,},},{{145,119,24,176,189,1,0,},
{164,110,25,159,202,2,0,},{159,96,25,159,110,2,0,},},{{134,143,24,132,179,2,0,},{160,24,25,169,52,1,0,},},{{165,104,25,159,162,3,0,},{161,16,17,14,83,3,0,},},
{{146,51,24,182,184,1,0,},{163,28,26,153,53,75,5,},},{{164,102,25,159,202,2,0,},{159,104,25,159,110,2,0,},},{{241,58,25,182,202,2,0,},{160,28,23,160,170,1,0,},},
{{136,135,27,163,217,106,6,},{205,192,25,205,110,2,0,},},{{137,193,18,136,1,4,0,},{205,132,12,173,201,1,0,},{163,20,26,153,53,75,5,},},{{149,143,24,132,185,1,0,},
{159,116,19,164,172,2,0,},},{{138,9,23,160,0,0,0,},{132,143,18,134,163,2,0,},{164,76,27,163,217,250,4,},},{{148,25,24,169,184,1,0,},{241,64,17,241,228,2,0,},
{164,78,27,163,217,250,4,},},{{138,21,23,160,0,0,0,},{165,116,16,164,182,3,0,},},{{149,151,24,132,185,1,0,},{138,15,23,160,0,0,0,},},{{136,177,17,136,229,2,0,},
{162,14,24,169,42,0,0,},},{{241,44,27,163,217,178,5,},},{{133,151,17,134,251,3,0,},{14,29,27,163,217,74,5,},{169,30,25,169,110,2,0,},},{{139,25,1,130,1,0,0,},
{131,45,27,163,177,179,5,},{169,38,24,169,74,2,0,},},{{205,176,16,136,143,2,0,},{160,12,27,163,79,73,5,},},{{165,86,26,153,171,251,4,},{161,14,18,14,93,3,0,},},
{{139,51,1,131,1,0,0,},{165,90,27,163,177,251,4,},},{{137,175,16,136,245,3,0,},{169,26,18,14,163,2,0,},},{{134,153,27,163,217,34,12,},{205,184,16,136,143,2,0,},},
{{14,37,24,159,195,2,0,},{160,18,17,14,103,1,0,},},{{163,42,25,169,40,3,0,},{161,32,26,153,53,75,5,},},{{163,38,26,153,53,75,5,},{162,42,17,14,149,0,0,},},
{{134,149,17,134,229,2,0,},{205,170,17,136,153,2,0,},},{{136,197,26,153,211,106,6,},{160,26,17,14,103,1,0,},},{{138,109,23,160,0,0,0,},{182,52,27,163,133,178,5,},},
{0},{{134,141,17,134,229,2,0,},{130,43,26,153,171,75,5,},},{{241,56,17,241,228,2,0,},{162,38,25,169,90,0,0,},},{{136,171,18,136,235,2,0,},{182,44,27,163,133,178,5,},},
{{132,165,24,132,75,2,0,},{161,18,18,14,93,3,0,},},{{169,40,24,175,87,2,0,},},{{153,185,13,137,1,0,0,},{241,48,17,241,228,2,0,},},{{165,110,25,159,162,3,0,},
{162,16,25,169,90,0,0,},},{{14,41,24,175,187,2,0,},{162,18,25,169,90,0,0,},},{{205,172,18,136,163,2,0,},{164,120,25,159,202,2,0,},},{{153,193,13,137,1,0,0,},
{164,90,25,159,202,2,0,},{159,84,25,159,110,2,0,},},{{130,31,26,153,171,75,5,},{182,70,18,241,162,2,0,},},{{153,197,13,137,1,0,0,},{131,55,18,241,194,3,0,},
{163,18,24,169,4,3,0,},},{{131,51,27,163,177,179,5,},{14,33,27,163,217,74,5,},{14,27,26,153,211,74,5,},},{0},{0},{{133,157,25,132,225,3,0,},{163,44,23,160,128,3,0,},
{161,42,26,153,53,75,5,},},{{14,19,26,153,211,74,5,},{159,92,16,164,142,2,0,},},{{14,21,24,169,178,2,0,},},{{159,116,26,153,123,250,4,},},{{170,67,1,154,1,0,0,},
{182,58,25,182,110,2,0,},},{{137,135,27,163,239,107,6,},{169,28,26,153,123,74,5,},{163,38,17,14,83,3,0,},},{{154,65,10,146,1,0,0,},{132,157,26,153,123,34,12,},
{160,16,24,169,10,1,0,},},{{163,254,31,161,2,8,5,},{162,28,27,163,121,72,5,},},{{137,183,16,136,245,3,0,},{182,54,19,241,172,2,0,},},{{131,69,24,155,155,3,0,},
{163,32,18,14,93,3,0,},{161,38,23,160,128,3,0,},},{{164,110,27,163,217,250,4,},{159,96,27,163,133,250,4,},},{{165,100,16,164,182,3,0,},},{{160,126,25,160,153,1,0,},},
{{132,169,25,132,111,2,0,},{163,28,24,169,4,3,0,},},{{159,104,27,163,133,250,4,},},{{142,33,21,162,0,0,0,},{160,28,17,14,103,1,0,},},{{161,20,25,169,40,3,0,},},
{{137,193,16,136,245,3,0,},{169,42,17,14,153,2,0,},{163,20,24,169,4,3,0,},},{{205,170,24,205,74,2,0,},{159,116,17,164,152,2,0,},},{{130,43,24,169,138,3,0,},
{169,42,19,14,173,2,0,},},{{136,173,16,136,223,2,0,},{241,50,18,241,234,2,0,},},{{165,116,18,164,194,3,0,},},{0},{{142,9,21,162,0,0,0,},{241,54,17,241,228,2,0,},
{160,38,24,169,10,1,0,},},{{136,181,16,136,223,2,0,},{165,120,27,163,177,251,4,},{165,82,26,153,171,251,4,},},{{131,49,26,153,171,179,5,},{14,29,25,169,202,2,0,},},
{{169,38,26,153,123,74,5,},{164,82,25,159,202,2,0,},},{{153,183,13,137,1,0,0,},{134,157,27,163,217,34,12,},},{{136,185,26,153,211,106,6,},{182,64,16,241,142,2,0,},},
{{132,137,25,172,67,2,0,},{165,90,25,159,162,3,0,},},{{137,175,18,136,1,4,0,},{133,139,24,132,201,3,0,},{164,90,17,164,228,2,0,},},{{159,90,25,159,110,2,0,},},
{{136,193,26,153,211,106,6,},{182,56,16,241,142,2,0,},{182,44,26,153,123,178,5,},},{{163,42,27,163,63,75,5,},{161,32,24,169,4,3,0,},},{{138,131,23,160,0,0,0,},
{163,124,25,160,123,3,0,},{163,38,24,169,4,3,0,},},{{175,35,1,158,1,0,0,},{132,147,26,153,123,34,12,},{159,102,19,164,172,2,0,},},{{134,145,16,134,223,2,0,},
{130,25,24,169,138,3,0,},{160,26,23,160,170,1,0,},},};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {0};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (target_nfa_state >> 8) & 1;
    key.bytes[1] |= (dfa_state << 1) & 255;
    key.bytes[2] |= (dfa_symbol >> 0) & 31;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.nfa_state |= ((uint32_t)bytes[4] & 1) << 8;
    entry.actions |= ((uint32_t)bytes[4] & 255) >> 1;
    entry.actions |= ((uint32_t)bytes[5] & 7) << 7;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 3;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 15) << 5;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 3; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 3)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 163;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 26)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 66) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    free_token_runs(&run);
    return construct_finish(&construct_state, offset);
}
static size_t read_whitespace(const char *text, void *info) {
    switch (text[0]) {
    case 32:
        return 1;
    case 9:
        return 1;
    case 10:
        return 1;
    case 13:
        return 1;
    default:
        return 0;
    }
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        switch (text[1]) {
        case 108:
            if (text[2] == 105 && text[3] == 110 && text[4] == 101 && text[5] == 45 && text[6] == 99 && text[7] == 111 && text[8] == 109 && text[9] == 109 && text[10] == 101 && text[11] == 110 && text[12] == 116 && text[13] == 45 && text[14] == 116 && text[15] == 111 && text[16] == 107 && text[17] == 101 && text[18] == 110) {
                *end_token = false;
                *token = 20;
                return 19;
            } else {
                return 0;
            }
        case 111:
            if (text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
                *end_token = false;
                *token = 2;
                return 10;
            } else {
                return 0;
            }
        case 116:
            if (text[2] == 111 && text[3] == 107 && text[4] == 101 && text[5] == 110) {
                *end_token = false;
                *token = 22;
                return 6;
            } else {
                return 0;
            }
        case 119:
            if (text[2] == 104 && text[3] == 105 && text[4] == 116 && text[5] == 101 && text[6] == 115 && text[7] == 112 && text[8] == 97 && text[9] == 99 && text[10] == 101) {
                *end_token = false;
                *token = 23;
                return 11;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 21;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 8;
        case 2: return 10;
        case 3: return 11;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 12;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 12;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 12;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 12;
        case 1: return 12;
        case 2: return 12;
        case 3: return 13;
        case 4: return 7;
        case 5: return 13;
        case 6: return 13;
        case 7: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 13;
        case 1: return 9;
        default: break;
        }
        break;
    case 9:
        switch (slot) {
        case 0: return 13;
        default: break;
        }
        break;
    case 10:
        switch (slot) {
        case 0: return 12;
        case 1: return 13;
        default: break;
        }
        break;
    case 11:
        switch (slot) {
        case 0: return 13;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 4;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 8;
    case 8: return 2;
    case 9: return 1;
    case 10: return 2;
    case 11: return 1;
    case 12: return 0;
    case 13: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 7;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 12:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 13:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

