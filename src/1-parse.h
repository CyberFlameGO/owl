// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "owl-parser.h"

#ifndef _OWL_PARSER_H_
#define _OWL_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Explicitly create a tree with particular options.
struct owl_tree_options {
    // Exactly one of string or file should be set.
    const char *string;
    FILE *file;
};
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file was NULL.
    ERROR_INVALID_FILE,

    // The options passed to owl_tree_create_with_options weren't valid --
    // both file and string were specified at the same time or neither were.
    ERROR_INVALID_OPTIONS,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_IDENT = 1,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct owl_ref rule;
    struct owl_ref comment_token;
    struct owl_ref custom_token;
};

struct parsed_rule {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref body;
};

struct parsed_body {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
    struct owl_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct owl_ref fixity;
    struct owl_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref identifier;
    struct owl_ref exception;
    struct owl_ref rename;
    struct owl_ref string;
    struct owl_ref expr;
    struct owl_ref begin_token;
    struct owl_ref end_token;
    struct owl_ref operand;
};

struct parsed_comment_token {
    struct source_range range;
    struct owl_ref string;
    struct owl_ref comment_token_v1;
};

struct parsed_comment_token_v1 {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_custom_token {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_grammar parsed_grammar_get(struct owl_ref);
struct parsed_rule parsed_rule_get(struct owl_ref);
struct parsed_body parsed_body_get(struct owl_ref);
struct parsed_operators parsed_operators_get(struct owl_ref);
struct parsed_fixity parsed_fixity_get(struct owl_ref);
struct parsed_assoc parsed_assoc_get(struct owl_ref);
struct parsed_operator parsed_operator_get(struct owl_ref);
struct parsed_expr parsed_expr_get(struct owl_ref);
struct parsed_comment_token parsed_comment_token_get(struct owl_ref);
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref);
struct parsed_custom_token parsed_custom_token_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_identifier_token_offset;
    size_t next_string_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
            .custom_token.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 8;
    result.comment_token.empty = result.comment_token._offset == 0;
    result.custom_token._tree = ref._tree;
    result.custom_token._offset = read_tree(&offset, ref._tree);
    result.custom_token._type = 10;
    result.custom_token.empty = result.custom_token._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 11;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 11;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 12;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 12;
    result.end_token.empty = result.end_token._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_comment_token){
            .string.empty = true,
            .comment_token_v1.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    result.comment_token_v1._tree = ref._tree;
    result.comment_token_v1._offset = read_tree(&offset, ref._tree);
    result.comment_token_v1._type = 9;
    result.comment_token_v1.empty = result.comment_token_v1._offset == 0;
    return result;
}
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_comment_token_v1){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token_v1 result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_custom_token parsed_custom_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_custom_token){
            .identifier.empty = true,
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_custom_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 11;
    result.identifier.empty = result.identifier._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 12) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .string = string,
        .length = string_length,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 9: {
        write_tree(tree, slots[0]);
        break;
    }
    case 10: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 11: {
        size_t offset = tree->next_identifier_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_identifier_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 12: {
        size_t offset = tree->next_string_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_string_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_OPTIONS:
        fprintf(stderr, "invalid options\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        parsed_custom_token_print(tree, it.custom_token, "custom_token", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_comment_token_v1_print(tree, it.comment_token_v1, "comment_token_v1", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token_v1 it = parsed_comment_token_v1_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token_v1");
        if (strcmp("comment_token_v1", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_custom_token it = parsed_custom_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("custom_token");
        if (strcmp("custom_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, owl_tree_root_ref(tree), "grammar", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(owl_tree_root_ref(tree));
}
#define IGNORE_TOKEN_WRITE(...)
#define IGNORE_TOKEN_READ(...) (0)
#define CUSTOM_TOKEN_DATA(...)
#define IF_IDENTIFIER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define NUMBER_TOKEN_DATA(...)
#define IF_NUMBER_TOKEN(...) if (0) { /* no number tokens */  }
#define IF_STRING_TOKEN(cond, ...) if (cond) __VA_ARGS__
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        if (char_is_whitespace(c)) {
            whitespace++;
            offset++;
            continue;
        }
        uint32_t token = -1;
        CUSTOM_TOKEN_DATA(custom_data);
        NUMBER_TOKEN_DATA(number);
        bool is_token = false;
        bool end_token = false;
        bool custom_token = false;
        bool comment = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 4294967295U) comment = true;
        }
        if (IGNORE_TOKEN_READ(&token, &token_length, text + offset, &custom_data, tokenizer->info)) {
            is_token = true;
            custom_token = true;
            end_token = false;
            comment = false;
        }
        IF_NUMBER_TOKEN(char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1])), {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                token = 4294967295U;
            }
        }
        ) else IF_STRING_TOKEN(c == '\'' || c == '"', {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    token = 24;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        ) else IF_IDENTIFIER_TOKEN(char_starts_identifier(c), {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                token = 23;
            }
        }
        ) if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 4294967295U) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 23) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 4294967295U) {
            IGNORE_TOKEN_WRITE(offset, token_length, number, tokenizer->info);
        }
        else if (token == 24) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = text[content_offset + i];
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        else if (custom_token) {
            IGNORE_TOKEN_WRITE(offset, token_length, token, custom_data, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity = 0;
            int precedence = 0;
            do {
                int local = 0;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    size_t top_index;
    size_t capacity;
    int error;
};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[97])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_75(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    default: top->cont->error = 1; return;
    }
}
static void state_func_4(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 5; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_16(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 19; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_32(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 35; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_55(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 58; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_17(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 18; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_19(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 20; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_10(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 21; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_33(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 34; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_87(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 25;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_77(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 26;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_35(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 36; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_48(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 53; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_56(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 57; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_58(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 59; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 60; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 62; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 63; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_92(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 95; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_93(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 94; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_95(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 96; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_78(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 81; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_79(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 80; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_81(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 82; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_66(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 67; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_64(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 12: top->state = 65; return;
    case 14: top->state = 66; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 3: top->state = 37; return;
    case 4: top->state = 38; return;
    case 5: top->state = 39; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_39(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 6: top->state = 40; return;
    case 7: top->state = 41; return;
    case 8: top->state = 42; return;
    case 9: top->state = 43; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_63(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_14(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 6; return;
    case 24: top->state = 7; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_30(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 31; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_42(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 44; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_91(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 83; return;
    case 24: top->state = 84; return;
    case 25: top->state = 85; return;
    case 26: top->state = 86; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_67(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 68; return;
    case 24: top->state = 69; return;
    case 25: top->state = 70; return;
    case 26: top->state = 71; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_61(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 4; return;
    case 24: top->state = 61; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_21(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 22; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 23; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_53(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 22; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 54; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_70(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 72; return;
    case 17: top->state = 73; return;
    case 18: top->state = 74; return;
    case 19: top->state = 75; return;
    case 23: top->state = 68; return;
    case 24: top->state = 76; return;
    case 25: top->state = 70; return;
    case 26: top->state = 71; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_24(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 10; return;
    case 16: top->state = 27; return;
    case 17: top->state = 28; return;
    case 18: top->state = 29; return;
    case 19: top->state = 30; return;
    case 23: top->state = 31; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_57(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 48; return;
    case 16: top->state = 49; return;
    case 17: top->state = 50; return;
    case 18: top->state = 51; return;
    case 19: top->state = 52; return;
    case 23: top->state = 44; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_88(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 13: top->state = 87; return;
    case 16: top->state = 88; return;
    case 17: top->state = 89; return;
    case 18: top->state = 90; return;
    case 19: top->state = 91; return;
    case 23: top->state = 83; return;
    case 24: top->state = 84; return;
    case 25: top->state = 85; return;
    case 26: top->state = 86; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_76(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 15: top->state = 77; return;
    case 16: top->state = 72; return;
    case 17: top->state = 73; return;
    case 18: top->state = 74; return;
    case 19: top->state = 75; return;
    case 23: top->state = 68; return;
    case 24: top->state = 76; return;
    case 25: top->state = 70; return;
    case 26: top->state = 71; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_82(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 78; return;
    case 11: top->state = 79; return;
    case 16: top->state = 72; return;
    case 17: top->state = 73; return;
    case 18: top->state = 74; return;
    case 19: top->state = 75; return;
    case 23: top->state = 68; return;
    case 24: top->state = 76; return;
    case 25: top->state = 70; return;
    case 26: top->state = 71; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_31(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 10; return;
    case 10: top->state = 32; return;
    case 11: top->state = 33; return;
    case 16: top->state = 27; return;
    case 17: top->state = 28; return;
    case 18: top->state = 29; return;
    case 19: top->state = 30; return;
    case 23: top->state = 31; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_44(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 48; return;
    case 10: top->state = 55; return;
    case 11: top->state = 56; return;
    case 16: top->state = 49; return;
    case 17: top->state = 50; return;
    case 18: top->state = 51; return;
    case 19: top->state = 52; return;
    case 23: top->state = 44; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_96(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 92; return;
    case 11: top->state = 93; return;
    case 13: top->state = 87; return;
    case 16: top->state = 88; return;
    case 17: top->state = 89; return;
    case 18: top->state = 90; return;
    case 19: top->state = 91; return;
    case 23: top->state = 83; return;
    case 24: top->state = 84; return;
    case 25: top->state = 85; return;
    case 26: top->state = 86; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_23(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 5; return;
    case 1: top->state = 10; return;
    case 10: top->state = 32; return;
    case 11: top->state = 33; return;
    case 16: top->state = 27; return;
    case 17: top->state = 28; return;
    case 18: top->state = 29; return;
    case 19: top->state = 30; return;
    case 23: top->state = 31; return;
    case 24: top->state = 24; return;
    case 25: top->state = 25; return;
    case 26: top->state = 26; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_54(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 5; return;
    case 1: top->state = 48; return;
    case 10: top->state = 55; return;
    case 11: top->state = 56; return;
    case 16: top->state = 49; return;
    case 17: top->state = 50; return;
    case 18: top->state = 51; return;
    case 19: top->state = 52; return;
    case 23: top->state = 44; return;
    case 24: top->state = 45; return;
    case 25: top->state = 46; return;
    case 26: top->state = 47; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_11(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 10; return;
    case 16: top->state = 11; return;
    case 17: top->state = 12; return;
    case 18: top->state = 13; return;
    case 19: top->state = 14; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 15; return;
    case 24: top->state = 7; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_20(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 10; return;
    case 10: top->state = 16; return;
    case 11: top->state = 17; return;
    case 16: top->state = 11; return;
    case 17: top->state = 12; return;
    case 18: top->state = 13; return;
    case 19: top->state = 14; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 15; return;
    case 24: top->state = 7; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_15(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 5; return;
    case 1: top->state = 10; return;
    case 10: top->state = 16; return;
    case 11: top->state = 17; return;
    case 16: top->state = 11; return;
    case 17: top->state = 12; return;
    case 18: top->state = 13; return;
    case 19: top->state = 14; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 23: top->state = 15; return;
    case 24: top->state = 7; return;
    case 25: top->state = 8; return;
    case 26: top->state = 9; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void (*state_funcs[97])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_63, state_func_1, state_func_2, state_func_3,
    state_func_4, state_func_14, state_func_20, state_func_11,
    state_func_11, state_func_11, state_func_10, state_func_11,
    state_func_11, state_func_11, state_func_14, state_func_15,
    state_func_16, state_func_17, state_func_11, state_func_19,
    state_func_20, state_func_21, state_func_22, state_func_23,
    state_func_24, state_func_24, state_func_24, state_func_24,
    state_func_24, state_func_24, state_func_30, state_func_31,
    state_func_32, state_func_33, state_func_24, state_func_35,
    state_func_31, state_func_42, state_func_42, state_func_39,
    state_func_42, state_func_42, state_func_42, state_func_42,
    state_func_44, state_func_57, state_func_57, state_func_57,
    state_func_48, state_func_57, state_func_57, state_func_57,
    state_func_42, state_func_53, state_func_54, state_func_55,
    state_func_56, state_func_57, state_func_58, state_func_44,
    state_func_61, state_func_61, state_func_63, state_func_63,
    state_func_64, state_func_91, state_func_66, state_func_67,
    state_func_82, state_func_76, state_func_70, state_func_70,
    state_func_70, state_func_70, state_func_70, state_func_75,
    state_func_76, state_func_77, state_func_78, state_func_79,
    state_func_70, state_func_81, state_func_82, state_func_96,
    state_func_88, state_func_88, state_func_88, state_func_87,
    state_func_88, state_func_88, state_func_88, state_func_91,
    state_func_92, state_func_93, state_func_88, state_func_95,
    state_func_96,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    struct fill_run_continuation *cont = top->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        top = &cont->stack[cont->top_index];
    } else
        top++;
    top->cont = cont;
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 64;
    state_func_64(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

static void free_token_runs(struct owl_token_run **run) {
    while (*run) {
        struct owl_token_run *prev = (*run)->prev;
        free(*run);
        *run = prev;
    }
}
static void parse_string(struct owl_tree *tree, const char *string) {
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            free_token_runs(&token_run);
            return;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    switch (top.state) {
    case 0:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
    case 18:
    case 20:
    case 21:
    case 53:
    case 60:
    case 61:
    case 62:
    case 63:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_string(const char *string) {
    return owl_tree_create_with_options((struct owl_tree_options){ .string = string });
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    return owl_tree_create_with_options((struct owl_tree_options){ .file = file });
}
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options) {
    if (!options.file == !options.string)
        return owl_tree_create_with_error(ERROR_INVALID_OPTIONS);
    if (options.file) {
        char *str = 0;
        size_t len = 32;
        size_t off = 0;
        while (true) {
            len = len * 3 / 2;
            char *s = realloc(str, len);
            if (!s) {
                free(str);
                return 0;
            }
            str = s;
            off += fread(str + off, 1, len - off, options.file);
            if (off < len) {
                str[off] = '\0';
                break;
            }
        }
        options.string = str;
    }
    struct owl_tree *tree = owl_tree_create_empty();
    if (options.file)
        tree->owns_string = true;
    parse_string(tree, options.string);
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,4096,0,4096,4096,32768,32769,16385,0,4096,4096,32768,32769,32770,32769,16385,0,4096,4096,32768,32769,36864,40960,16384,0,4096,
4096,32768,32769,36864,40960,16385,0,4096,4096,32768,32769,36864,40960,16386,0,4096,4096,32768,32769,36864,40961,16387,0,4096,4096,32768,32769,36864,40962,0,
4096,4096,32768,32769,36864,40963,0,4096,4096,32768,32769,36864,45060,0,4096,4096,32768,32769,36864,45061,0,4096,4096,32768,32769,36864,45062,0,4096,4096,
32769,16384,0,4096,4096,32769,32769,16384,0,4096,4096,32770,16384,0,4096,4096,32770,16385,0,4096,16385,0,4096,32768,32769,16385,0,4096,32768,32769,
32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,36864,40960,16385,0,4096,32768,32769,36864,40960,16386,0,4096,32768,32769,36864,40961,
16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,4096,32768,32769,36864,45060,0,4096,32768,32769,36864,45061,0,4096,32768,32769,36864,
45062,0,4096,32769,16384,0,4096,32769,32769,16384,0,4096,32770,16384,0,4096,32770,16385,0,4096,32770,32769,16385,0,16384,0,16385,0,16389,0,
16390,0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,0,20480,8192,4096,32768,12289,0,20480,8192,4096,32768,12290,32768,12288,0,20480,
8192,4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,0,20480,8192,4096,32768,12290,32768,12291,0,20480,8192,4096,32769,16385,0,20480,
8192,16385,0,20480,8192,16389,0,20480,45063,24576,40960,16384,0,20480,45063,24576,40960,16385,0,20480,45063,24576,40960,16386,0,20480,45063,24576,40961,16387,
0,20480,45063,24576,40962,0,20480,45063,24576,40963,0,20480,45063,24576,45060,0,20480,45063,24576,45061,0,20480,45063,24576,45062,0,20480,45064,0,24576,
40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,0,24576,40962,0,24576,40963,0,24576,45060,0,24576,45061,0,24576,45062,0,
32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,16384,0,32768,32769,36864,40960,16385,0,32768,32769,36864,40960,16386,0,32768,32769,
36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,32768,32769,36864,45060,0,32768,32769,36864,45061,0,32768,32769,36864,45062,0,32769,
16384,0,32769,32769,16384,0,32770,16384,0,32770,16385,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,36864,40961,16387,0,36864,40962,
0,36864,40963,0,36864,45060,0,36864,45061,0,36864,45062,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,0,36868,40961,16387,0,36868,
40962,0,36868,40963,0,36868,45060,0,36868,45061,0,36868,45062,0,};
static const uint8_t action_table[1024][3][7] = {
{{182,154,12,209,192,67,1,},},{{159,49,9,158,204,1,0,},{157,170,11,157,21,1,0,},},{{230,144,0,216,0,0,0,},{181,151,12,209,89,67,1,},{168,146,12,209,152,64,1,},},
{{185,210,8,185,98,1,0,},{174,137,8,174,98,1,0,},{162,147,11,230,120,1,0,},},{{158,59,12,157,85,1,0,},{158,174,12,209,89,59,1,},},{{184,207,11,218,33,1,0,},
{161,164,8,181,60,1,0,},},{{196,61,11,168,0,0,0,},{159,38,13,220,195,59,1,},},{0},{{184,198,11,184,21,1,0,},{163,141,11,160,114,1,0,},},{{161,154,9,181,70,1,0,},},
{{183,8,12,160,188,1,0,},{181,161,11,213,81,1,0,},},{{191,148,0,183,0,0,0,},{174,6,13,220,92,65,1,},},{{158,168,11,157,73,1,0,},},{{163,9,13,220,143,65,1,},},
{{205,213,11,169,204,0,0,},{183,12,12,160,188,1,0,},},{{205,212,11,169,204,0,0,},{162,6,13,220,143,65,1,},},{{174,136,11,160,73,1,0,},{160,148,8,174,60,1,0,},},
{{199,136,11,160,204,0,0,},{163,5,13,220,143,65,1,},{161,21,12,161,39,1,0,},},{{186,204,12,209,223,113,1,},},{{228,64,7,229,0,0,0,},{159,172,8,158,201,1,0,},},
{{185,72,8,185,95,1,0,},{158,178,12,209,89,59,1,},},{{167,5,13,220,60,64,1,},{158,50,12,157,85,1,0,},},{{174,142,11,160,73,1,0,},{163,12,12,160,132,1,0,},},
{{192,181,11,157,204,0,0,},{160,143,12,209,45,65,1,},},{{185,68,8,185,95,1,0,},{162,142,12,209,138,65,1,},},{{182,155,8,181,201,1,0,},{163,146,12,209,138,65,1,},},
{{188,218,8,188,98,1,0,},{163,8,8,174,148,1,0,},},{{168,139,12,209,152,64,1,},{163,11,9,174,158,1,0,},},{{168,5,12,160,145,0,0,},},{{182,151,8,181,201,1,0,},
{158,175,8,158,98,1,0,},},{{184,204,11,184,21,1,0,},{157,171,12,209,45,59,1,},},{{157,45,13,220,50,59,1,},},{{198,164,11,161,204,0,0,},{184,67,13,220,50,113,1,},},
{{188,86,13,220,92,83,1,},{163,140,11,160,114,1,0,},{161,152,12,209,45,67,1,},},{{182,164,8,181,201,1,0,},},{{183,11,9,174,204,1,0,},},{{159,165,11,157,176,1,0,},},
{{174,135,8,174,98,1,0,},{169,218,11,169,21,1,0,},},{{183,137,8,174,201,1,0,},{163,60,12,211,173,1,0,},},{{186,70,13,220,226,113,1,},{163,146,11,160,114,1,0,},},
{0},{{184,72,12,184,39,1,0,},},{{197,139,10,167,0,0,0,},{184,67,12,184,39,1,0,},{163,6,13,220,143,65,1,},},{{185,196,11,184,73,1,0,},{159,41,12,157,188,1,0,},},
{{185,195,11,184,73,1,0,},},{{174,18,8,174,95,1,0,},{168,60,12,211,195,0,0,},},{{184,71,12,184,39,1,0,},{158,51,9,158,101,1,0,},},{{195,53,10,168,0,0,0,},
{190,90,9,188,235,1,0,},{169,89,13,220,50,83,1,},},{{191,159,0,182,0,0,0,},{183,18,12,160,188,1,0,},},{{182,28,9,181,204,1,0,},},{{190,216,8,188,232,1,0,},
{184,73,9,185,65,1,0,},},{{215,182,5,192,0,0,0,},{186,82,13,220,226,113,1,},{169,85,13,220,50,83,1,},},{{162,15,12,160,132,1,0,},{159,179,8,158,201,1,0,},},
{{162,141,11,160,114,1,0,},},{{157,187,8,158,60,1,0,},},{{181,154,12,209,89,67,1,},},{{207,82,12,186,210,0,0,},{182,29,9,181,204,1,0,},},{{185,71,9,185,101,1,0,},
{157,150,1,219,219,0,0,},},{{181,159,8,181,98,1,0,},{168,134,8,174,170,0,0,},},{{169,224,9,188,70,1,0,},{157,174,8,158,60,1,0,},},{{159,38,12,157,188,1,0,},},
{{194,181,11,168,204,0,0,},{185,210,11,184,73,1,0,},},{{158,57,8,158,95,1,0,},{158,172,8,158,98,1,0,},},{{167,13,8,174,67,0,0,},{163,11,13,220,143,65,1,},},
{{186,204,11,184,207,1,0,},{181,155,11,161,73,1,0,},},{{174,6,12,160,85,1,0,},},{{185,76,13,220,92,113,1,},{167,131,11,196,99,0,0,},},{{186,207,11,218,215,1,0,},
{186,72,12,184,219,1,0,},},{{157,177,12,209,45,59,1,},},{{162,6,12,160,132,1,0,},{160,135,11,160,21,1,0,},},{{186,202,11,184,207,1,0,},{167,20,12,160,45,0,0,},},
{{190,219,11,169,207,1,0,},{167,7,13,220,60,64,1,},},{{212,23,5,198,0,0,0,},{185,74,13,220,92,113,1,},},{{185,73,12,184,85,1,0,},},{{194,146,11,168,204,0,0,},},
{{190,217,12,209,223,83,1,},{169,218,8,188,60,1,0,},},{{183,6,8,174,198,1,0,},},{{174,145,11,217,81,1,0,},{159,178,12,209,192,59,1,},},{{174,140,8,174,98,1,0,},
{158,166,11,157,73,1,0,},},{{163,1,12,195,163,1,0,},{161,29,9,181,65,1,0,},},{{184,202,11,184,21,1,0,},},{{159,182,12,209,192,59,1,},},{{185,80,13,220,92,113,1,},
{185,70,12,184,85,1,0,},},{{188,84,13,220,92,83,1,},{161,29,13,220,50,67,1,},},{{190,214,8,188,232,1,0,},},{{195,63,10,168,0,0,0,},{157,45,12,157,39,1,0,},},
{{174,136,8,174,98,1,0,},},{{199,134,11,160,204,0,0,},{163,140,8,174,153,1,0,},{158,173,12,209,89,59,1,},},{{161,153,12,209,45,67,1,},},{{181,154,11,161,73,1,0,},},
{{174,140,12,209,89,65,1,},{162,1,12,195,163,1,0,},},{{163,136,8,174,153,1,0,},{158,169,12,209,89,59,1,},},{{163,12,9,174,158,1,0,},},{{183,15,8,174,198,1,0,},
{160,143,9,174,70,1,0,},},{{218,210,5,201,0,0,0,},{162,7,9,174,158,1,0,},},{{167,1,12,195,88,0,0,},},{{163,6,12,160,132,1,0,},},{{158,38,12,157,85,1,0,},},
{{162,11,9,174,158,1,0,},},{{168,145,11,217,138,0,0,},},{{184,71,13,220,50,113,1,},{158,51,8,158,95,1,0,},},{{195,15,10,168,0,0,0,},{169,89,12,169,39,1,0,},
{167,146,8,174,74,0,0,},},{{222,83,5,205,0,0,0,},{174,146,11,160,73,1,0,},},{{208,187,0,159,0,0,0,},{174,141,12,209,89,65,1,},},{{184,73,8,185,55,1,0,},
{181,36,12,161,85,1,0,},},{{197,128,10,167,0,0,0,},{186,199,12,209,223,113,1,},{169,85,12,169,39,1,0,},},{{159,179,11,157,176,1,0,},},{{209,222,6,190,0,0,0,},
{160,18,12,160,39,1,0,},},{{197,149,10,167,0,0,0,},{163,145,11,217,126,1,0,},},{{186,70,8,185,229,1,0,},},{{160,15,12,160,39,1,0,},{157,44,9,158,65,1,0,},},
{{185,198,8,185,98,1,0,},},{{174,15,8,174,95,1,0,},{167,143,12,209,53,64,1,},},{{190,211,12,209,223,83,1,},{167,142,12,209,53,64,1,},{157,174,9,158,70,1,0,},},
{{159,181,12,209,192,59,1,},},{{168,8,13,220,158,64,1,},},{{158,57,9,158,101,1,0,},},{{188,211,11,169,73,1,0,},{163,11,12,160,132,1,0,},{161,154,11,161,21,1,0,},},
{{183,14,13,220,195,65,1,},{159,185,12,209,192,59,1,},},{{188,88,9,188,101,1,0,},{160,6,8,174,55,1,0,},},{{185,76,12,184,85,1,0,},{168,140,12,209,152,64,1,},},
{{188,94,13,220,92,83,1,},{186,72,13,220,226,113,1,},},{{181,159,12,209,89,67,1,},{169,94,12,169,39,1,0,},},{{221,176,11,208,199,0,0,},{192,177,11,157,204,0,0,},
{190,84,8,188,229,1,0,},},{{167,20,13,220,60,64,1,},{158,182,12,209,89,59,1,},},{{182,159,12,209,192,67,1,},{167,7,12,160,45,0,0,},},{{220,204,7,207,0,0,0,},
{157,179,8,158,60,1,0,},},{{217,148,5,199,0,0,0,},{190,88,12,169,219,1,0,},},{{163,18,8,174,148,1,0,},},{{183,13,13,220,195,65,1,},{169,218,9,188,70,1,0,},},
{{190,224,12,209,223,83,1,},{169,84,9,188,65,1,0,},{159,44,8,158,198,1,0,},},{{185,202,12,209,89,113,1,},{168,18,12,160,145,0,0,},{159,178,11,157,176,1,0,},},
{{185,68,12,184,85,1,0,},},{{191,162,0,182,0,0,0,},{188,96,12,169,85,1,0,},{188,88,12,169,85,1,0,},},{0},{{160,12,9,174,65,1,0,},},{{185,70,13,220,92,113,1,},},
{{208,173,0,159,0,0,0,},{188,193,12,209,89,83,1,},{161,29,12,161,39,1,0,},},{{190,214,11,169,207,1,0,},{186,196,12,209,223,113,1,},},{{198,151,11,161,204,0,0,},
{168,135,8,174,170,0,0,},{162,18,13,220,143,65,1,},},{{168,148,8,174,170,0,0,},},{{190,96,9,188,235,1,0,},},{{207,68,12,186,210,0,0,},{197,135,10,167,0,0,0,},
{161,153,11,161,21,1,0,},},{{157,47,8,158,55,1,0,},},{{190,214,12,209,223,83,1,},},{{182,36,13,220,195,67,1,},},{{186,208,12,209,223,113,1,},{186,73,8,185,229,1,0,},
{181,34,8,181,95,1,0,},},{{233,150,2,219,2,0,0,},{201,204,11,184,204,0,0,},{159,43,13,220,195,59,1,},},{{162,148,11,160,114,1,0,},{162,7,8,174,148,1,0,},},
{{194,141,11,168,204,0,0,},{168,143,11,160,124,0,0,},},{{201,201,11,184,204,0,0,},{184,69,13,220,50,113,1,},},{{211,61,12,211,206,0,0,},{201,200,11,184,204,0,0,},
{157,37,13,220,50,59,1,},},{{162,11,8,174,148,1,0,},{159,175,12,209,192,59,1,},},{{167,134,12,209,53,64,1,},},{{182,158,11,161,176,1,0,},{157,167,4,233,255,0,0,},},
{{183,146,11,160,176,1,0,},{157,182,12,209,45,59,1,},},{{194,188,11,168,204,0,0,},},{{158,177,11,157,73,1,0,},},{{188,224,11,169,73,1,0,},{167,8,8,174,67,0,0,},},
{0},{{183,135,8,174,201,1,0,},{160,11,13,220,50,65,1,},},{{168,18,13,220,158,64,1,},},{{188,85,9,188,101,1,0,},{182,152,12,209,192,67,1,},{161,28,9,181,65,1,0,},},
{{195,9,10,168,0,0,0,},{186,197,8,185,232,1,0,},{159,49,12,157,188,1,0,},},{{195,62,10,168,0,0,0,},{160,15,13,220,50,65,1,},{157,44,8,158,55,1,0,},},
{{209,216,6,190,0,0,0,},{174,137,11,160,73,1,0,},},{0},{{169,224,11,169,21,1,0,},{169,83,8,188,55,1,0,},},{{192,170,11,157,204,0,0,},{169,211,9,188,70,1,0,},},
{{168,8,12,160,145,0,0,},},{{167,18,13,220,60,64,1,},},{{181,27,12,161,85,1,0,},{159,59,9,158,204,1,0,},},{{183,14,12,160,188,1,0,},{182,162,12,209,192,67,1,},},
{0},{{168,140,11,160,124,0,0,},{161,34,12,161,39,1,0,},},{{163,9,8,174,148,1,0,},},{{169,94,13,220,50,83,1,},{161,34,9,181,65,1,0,},},{{195,7,10,168,0,0,0,},},
{{163,135,11,160,114,1,0,},},{{182,159,11,161,176,1,0,},},{{169,88,8,188,55,1,0,},{157,179,9,158,70,1,0,},},{{223,224,5,205,0,0,0,},{201,210,11,184,204,0,0,},
{159,172,11,157,176,1,0,},},{{188,222,8,188,98,1,0,},{158,178,11,157,73,1,0,},},{{184,70,12,184,39,1,0,},{160,12,13,220,50,65,1,},},{{169,84,8,188,55,1,0,},
{162,9,9,174,158,1,0,},},{{174,14,12,160,85,1,0,},{160,8,8,174,55,1,0,},},{{185,68,13,220,92,113,1,},{160,11,8,174,55,1,0,},},{{184,82,8,185,55,1,0,},
{184,74,12,184,39,1,0,},{160,8,9,174,65,1,0,},},{{157,169,12,209,45,59,1,},},{{198,153,11,161,204,0,0,},{162,12,9,174,158,1,0,},{159,180,11,157,176,1,0,},},
{{185,209,11,231,77,1,0,},{182,25,12,161,188,1,0,},},{{167,136,12,209,53,64,1,},},{{192,182,11,157,204,0,0,},{167,20,9,174,81,0,0,},{161,24,12,161,39,1,0,},},
{{192,171,11,157,204,0,0,},{162,18,12,160,132,1,0,},},{{192,180,11,157,204,0,0,},{168,9,9,174,176,0,0,},},{{188,86,8,188,95,1,0,},{161,31,8,181,55,1,0,},},
{{184,204,8,185,60,1,0,},{183,8,13,220,195,65,1,},},{{192,179,11,157,204,0,0,},{157,47,9,158,65,1,0,},},{{167,12,8,174,67,0,0,},},{{161,27,8,181,55,1,0,},},
{{186,73,9,185,235,1,0,},{183,137,11,160,176,1,0,},{181,34,9,181,101,1,0,},},{{191,134,0,183,0,0,0,},{181,164,8,181,98,1,0,},{159,43,12,157,188,1,0,},},
{{174,5,12,160,85,1,0,},{159,46,13,220,195,59,1,},},{{190,94,9,188,235,1,0,},{163,134,11,160,114,1,0,},},{{191,155,0,182,0,0,0,},{184,69,12,184,39,1,0,},
{174,146,8,174,98,1,0,},},{{162,133,11,160,114,1,0,},{157,37,12,157,39,1,0,},},{{201,209,11,231,206,0,0,},{174,148,12,209,89,65,1,},{159,175,11,157,176,1,0,},},
{{158,181,12,209,89,59,1,},},{{192,166,11,157,204,0,0,},{184,208,12,209,45,113,1,},},{{167,7,8,174,67,0,0,},},{{162,9,12,160,132,1,0,},{160,9,13,220,50,65,1,},},
{{182,28,12,161,188,1,0,},{158,177,12,209,89,59,1,},},{{188,89,8,188,95,1,0,},},{{157,59,9,158,65,1,0,},},{{198,154,11,161,204,0,0,},{174,11,9,174,101,1,0,},
{160,13,13,220,50,65,1,},},{{157,57,9,158,65,1,0,},},{{188,85,8,188,95,1,0,},{161,28,8,181,55,1,0,},},{{186,80,9,185,235,1,0,},{182,159,8,181,201,1,0,},
{159,49,13,220,195,59,1,},},{{181,151,8,181,98,1,0,},{157,185,11,157,21,1,0,},},{{158,46,9,158,101,1,0,},},{{216,15,5,199,0,0,0,},{163,143,12,209,138,65,1,},},
{{169,83,9,188,65,1,0,},{157,174,11,157,21,1,0,},},{{183,18,13,220,195,65,1,},},{{185,67,12,184,85,1,0,},},{{167,18,12,160,45,0,0,},{158,172,11,157,73,1,0,},},
{{181,27,13,220,92,67,1,},{159,59,8,158,198,1,0,},},{0},{{174,6,9,174,101,1,0,},},{{161,34,13,220,50,67,1,},},{{185,204,8,185,98,1,0,},{163,9,9,174,158,1,0,},},
{{162,134,11,160,114,1,0,},{160,7,12,160,39,1,0,},},{{194,191,11,168,204,0,0,},{160,20,13,220,50,65,1,},},{{185,201,12,209,89,113,1,},},{{190,219,12,209,223,83,1,},
{185,200,12,209,89,113,1,},},{{205,217,11,169,204,0,0,},{186,204,8,185,232,1,0,},},{0},{{167,133,11,160,21,0,0,},{161,151,9,181,70,1,0,},},{{184,70,13,220,50,113,1,},
{169,212,8,188,60,1,0,},},{{191,137,0,183,0,0,0,},{183,6,13,220,195,65,1,},},{{184,68,9,185,65,1,0,},},{{174,140,11,160,73,1,0,},{168,148,12,209,152,64,1,},},
{{185,208,12,209,89,113,1,},{184,74,13,220,50,113,1,},},{{169,86,12,169,39,1,0,},},{{157,184,11,215,33,1,0,},},{{182,25,13,220,195,67,1,},{181,151,11,161,73,1,0,},
{168,7,13,220,158,64,1,},},{{182,151,12,209,192,67,1,},{158,175,12,209,89,59,1,},},{{157,173,11,157,21,1,0,},},{{174,8,8,174,95,1,0,},{160,14,12,160,39,1,0,},},
{{168,9,8,174,164,0,0,},},{{188,86,9,188,101,1,0,},{161,31,9,181,65,1,0,},{158,173,11,157,73,1,0,},},{{161,153,9,181,70,1,0,},},{{174,14,13,220,92,65,1,},
{160,145,11,217,33,1,0,},},{{167,12,9,174,81,0,0,},{158,184,11,215,81,1,0,},},{{161,27,9,181,65,1,0,},{160,12,8,174,55,1,0,},},{{181,28,13,220,92,67,1,},
{168,13,13,220,158,64,1,},},{{183,15,13,220,195,65,1,},{181,164,11,161,73,1,0,},{162,255,15,162,0,68,1,},},{{174,5,13,220,92,65,1,},{158,166,12,209,89,59,1,},},
{{190,94,8,188,229,1,0,},{184,195,11,184,21,1,0,},{169,83,13,220,50,83,1,},},{0},{{205,216,11,169,204,0,0,},{162,133,12,209,138,65,1,},{161,27,12,161,39,1,0,},},
{{167,18,8,174,67,0,0,},},{{182,34,8,181,198,1,0,},},{{207,76,12,186,210,0,0,},{169,217,11,169,21,1,0,},},{{169,91,12,169,39,1,0,},{159,45,8,158,198,1,0,},},
{{185,201,8,185,98,1,0,},{162,9,13,220,143,65,1,},{160,9,12,160,39,1,0,},},{{174,141,11,160,73,1,0,},{169,91,13,220,50,83,1,},},{{184,73,13,220,50,113,1,},
{169,90,12,169,39,1,0,},{160,146,12,209,45,65,1,},},{{159,51,13,220,195,59,1,},},{{185,80,8,185,95,1,0,},{162,13,13,220,143,65,1,},{160,13,12,160,39,1,0,},},
{{188,219,11,169,73,1,0,},{186,199,8,185,232,1,0,},{182,26,8,181,198,1,0,},},{{185,70,8,185,95,1,0,},},{{181,21,13,220,92,67,1,},{157,170,12,209,45,59,1,},},
{0},{{167,9,9,174,81,0,0,},{158,46,8,158,95,1,0,},},{{161,36,13,220,50,67,1,},{161,30,12,161,39,1,0,},},{{181,25,13,220,92,67,1,},{157,174,12,209,45,59,1,},},
{{159,181,11,157,176,1,0,},{157,50,13,220,50,59,1,},},{{185,67,13,220,92,113,1,},{158,187,8,158,98,1,0,},},{{188,83,12,169,85,1,0,},{161,26,12,161,39,1,0,},
{160,134,8,174,60,1,0,},},{{207,69,12,186,210,0,0,},{183,136,8,174,201,1,0,},{163,7,9,174,158,1,0,},},{{181,157,12,209,89,67,1,},{167,6,12,160,45,0,0,},},
{{215,172,5,192,0,0,0,},{174,6,8,174,95,1,0,},},{{185,76,9,185,101,1,0,},{158,168,12,209,89,59,1,},},{{207,73,12,186,210,0,0,},{182,155,11,161,176,1,0,},
{157,49,9,158,65,1,0,},},{{182,156,11,161,176,1,0,},{160,7,13,220,50,65,1,},},{{181,25,8,181,95,1,0,},{157,57,12,157,39,1,0,},},{{190,216,12,209,223,83,1,},
{167,20,8,174,67,0,0,},},{{184,68,13,220,50,113,1,},{167,7,9,174,81,0,0,},},{{157,179,11,157,21,1,0,},},{{184,72,8,185,55,1,0,},},{{182,29,8,181,198,1,0,},},
{{190,217,8,188,232,1,0,},{169,218,12,209,45,83,1,},},{{188,224,12,209,89,83,1,},{183,6,12,160,188,1,0,},},{{174,18,12,160,85,1,0,},{159,178,8,158,201,1,0,},},
{{182,27,13,220,195,67,1,},{163,18,9,174,158,1,0,},},{{188,90,12,169,85,1,0,},},{{169,193,12,209,45,83,1,},{162,176,11,208,108,1,0,},},{{159,182,8,158,201,1,0,},},
{{168,176,11,208,117,0,0,},},{{190,86,13,220,226,83,1,},{186,74,13,220,226,113,1,},},{{209,217,6,190,0,0,0,},{207,70,12,186,210,0,0,},},{{174,8,9,174,101,1,0,},
{160,14,13,220,50,65,1,},},{{198,162,11,161,204,0,0,},},{{158,173,8,158,98,1,0,},},{{161,153,8,181,60,1,0,},},{{186,80,13,220,226,113,1,},{182,30,12,161,188,1,0,},},
{{168,11,12,160,145,0,0,},{167,147,11,230,29,0,0,},},{{182,36,8,181,198,1,0,},{163,136,12,209,138,65,1,},},{{181,28,12,161,85,1,0,},},{{183,15,12,160,188,1,0,},
{181,158,11,161,73,1,0,},{160,4,0,194,215,0,0,},},{{168,15,12,160,145,0,0,},},{{182,34,13,220,195,67,1,},},{{169,223,11,227,27,1,0,},},{{157,178,11,157,21,1,0,},},
{{182,23,13,220,195,67,1,},{162,11,13,220,143,65,1,},},{{184,199,8,185,60,1,0,},{182,30,13,220,195,67,1,},{158,38,13,220,92,59,1,},},{0},{{159,45,9,158,204,1,0,},},
{{196,53,11,168,0,0,0,},{174,11,13,220,92,65,1,},},{{174,141,8,174,98,1,0,},{162,12,8,174,148,1,0,},},{{188,224,8,188,98,1,0,},{184,73,12,184,39,1,0,},},
{{162,143,8,174,153,1,0,},{159,51,12,157,188,1,0,},},{{185,197,11,184,73,1,0,},},{{191,140,0,183,0,0,0,},{188,219,12,209,89,83,1,},},{{182,152,11,161,176,1,0,},
{169,86,13,220,50,83,1,},{167,139,8,174,74,0,0,},},{{186,197,11,184,207,1,0,},{183,5,13,220,195,65,1,},{161,31,13,220,50,67,1,},},{{174,9,12,160,85,1,0,},
{160,15,0,194,215,0,0,},},{{181,162,8,181,98,1,0,},{158,187,11,157,73,1,0,},},{{190,85,9,188,235,1,0,},{161,30,13,220,50,67,1,},},{{169,224,12,209,45,83,1,},
{157,59,13,220,50,59,1,},},{{208,174,0,159,0,0,0,},{195,60,10,168,0,0,0,},{161,26,8,181,55,1,0,},},{{163,13,8,174,148,1,0,},{158,44,12,157,85,1,0,},},
{{197,181,10,167,0,0,0,},{188,83,13,220,92,83,1,},{161,26,13,220,50,67,1,},},{0},{{159,185,8,158,201,1,0,},},{0},{{185,76,8,185,95,1,0,},{168,140,8,174,170,0,0,},},
{{169,222,11,169,21,1,0,},{157,49,8,158,55,1,0,},},{{159,40,12,157,188,1,0,},},{{167,13,12,160,45,0,0,},},{{217,143,5,199,0,0,0,},{163,135,12,209,138,65,1,},
{158,182,8,158,98,1,0,},},{{163,176,11,208,108,1,0,},{162,143,12,209,138,65,1,},},{{159,44,12,157,188,1,0,},},{0},{{163,8,9,174,158,1,0,},{158,178,8,158,98,1,0,},},
{{163,148,11,160,114,1,0,},{160,139,9,174,70,1,0,},},{{184,210,8,185,60,1,0,},{169,84,13,220,50,83,1,},},{{174,12,12,160,85,1,0,},{167,5,12,160,45,0,0,},},
{{182,27,12,161,188,1,0,},{162,134,12,209,138,65,1,},},{{216,6,5,199,0,0,0,},{188,90,13,220,92,83,1,},{163,7,12,160,132,1,0,},},{{186,198,11,184,207,1,0,},
{182,152,8,181,201,1,0,},{169,193,11,169,21,1,0,},},{{162,12,12,160,132,1,0,},{159,182,11,157,176,1,0,},},{{185,70,9,185,101,1,0,},{161,151,11,161,21,1,0,},},
{{190,86,12,169,219,1,0,},},{{181,24,9,181,101,1,0,},{157,173,9,158,70,1,0,},},{{162,18,9,174,158,1,0,},{160,18,8,174,55,1,0,},},{{183,139,12,209,192,65,1,},},
{{161,138,11,191,13,1,0,},},{{185,199,12,209,89,113,1,},},{{185,198,12,209,89,113,1,},{159,37,12,157,188,1,0,},},{{191,151,0,182,0,0,0,},{174,7,12,160,85,1,0,},
{168,11,13,220,158,64,1,},},{{182,36,9,181,204,1,0,},{159,174,12,209,192,59,1,},},{{195,0,10,168,0,0,0,},{186,73,12,184,219,1,0,},{181,34,12,161,85,1,0,},},
{0},{{168,15,13,220,158,64,1,},},{{190,193,11,169,207,1,0,},{182,34,12,161,188,1,0,},{163,134,8,174,153,1,0,},},{{184,69,9,185,65,1,0,},},{{162,60,12,211,173,1,0,},
{157,178,8,158,60,1,0,},},{{159,175,8,158,201,1,0,},},{{188,223,11,227,77,1,0,},{158,179,12,209,89,59,1,},{157,39,3,233,231,0,0,},},{{169,217,9,188,70,1,0,},},
{{190,84,12,169,219,1,0,},{157,182,8,158,60,1,0,},},{{196,15,11,168,0,0,0,},{157,187,9,158,70,1,0,},},{{207,67,12,226,210,0,0,},},{{186,71,9,185,235,1,0,},
{169,213,9,188,70,1,0,},{157,185,9,158,70,1,0,},},{{183,7,13,220,195,65,1,},{160,139,8,174,60,1,0,},},{{194,128,11,168,204,0,0,},{182,31,8,181,198,1,0,},},
{{186,82,8,185,229,1,0,},},{{167,139,11,160,21,0,0,},{161,28,13,220,50,67,1,},},{{183,148,12,209,192,65,1,},{160,143,8,174,60,1,0,},{157,57,13,220,50,59,1,},},
{{185,82,13,220,92,113,1,},{174,9,13,220,92,65,1,},},{{208,177,0,159,0,0,0,},{183,146,12,209,192,65,1,},{168,6,13,220,158,64,1,},},{{195,8,10,168,0,0,0,},},
{{190,211,11,169,207,1,0,},{169,83,12,169,39,1,0,},},{0},{{196,18,11,168,0,0,0,},{158,44,13,220,92,59,1,},},{{199,147,11,230,206,0,0,},{167,141,12,209,53,64,1,},},
{{186,74,9,185,235,1,0,},{181,27,8,181,95,1,0,},{159,59,13,220,195,59,1,},},{{160,5,12,160,39,1,0,},},{{199,148,11,160,204,0,0,},{190,96,13,220,226,83,1,},},
{{186,200,8,185,232,1,0,},},{{181,31,8,181,95,1,0,},{169,222,8,188,60,1,0,},},{{162,134,8,174,153,1,0,},{159,40,13,220,195,59,1,},},{0},{{194,190,11,168,204,0,0,},
{158,182,11,157,73,1,0,},},{{157,166,12,209,45,59,1,},},{{159,44,13,220,195,59,1,},},{0},{{188,222,12,209,89,83,1,},{161,151,12,209,45,67,1,},},{{199,142,11,160,204,0,0,},
{184,70,8,185,55,1,0,},{163,148,8,174,153,1,0,},},{{185,80,12,184,85,1,0,},{169,84,12,169,39,1,0,},},{{174,12,13,220,92,65,1,},{168,131,11,196,191,0,0,},},
{{184,200,11,184,21,1,0,},{183,20,8,174,198,1,0,},},{{184,74,8,185,55,1,0,},{167,138,11,191,7,0,0,},},{{205,223,11,227,206,0,0,},{199,133,11,160,204,0,0,},},
{{167,9,13,220,60,64,1,},{160,12,12,160,39,1,0,},},{{199,135,11,160,204,0,0,},{161,157,9,181,70,1,0,},},{{186,68,8,185,229,1,0,},{184,76,13,220,50,113,1,},
{167,11,13,220,60,64,1,},},{{181,24,8,181,95,1,0,},{157,173,8,158,60,1,0,},},{{167,13,9,174,81,0,0,},{162,18,8,174,148,1,0,},},{{168,9,13,220,158,64,1,},
{162,142,11,160,114,1,0,},},{{191,164,0,182,0,0,0,},{162,143,11,160,114,1,0,},},{{188,214,11,169,73,1,0,},{162,136,11,160,114,1,0,},},{{192,175,11,157,204,0,0,},
{168,141,12,209,152,64,1,},{159,37,13,220,195,59,1,},},{{188,212,11,169,73,1,0,},{158,43,13,220,92,59,1,},},{{158,185,12,209,89,59,1,},},{{186,73,13,220,226,113,1,},
{181,34,13,220,92,67,1,},{167,145,11,217,37,0,0,},},{{221,138,11,191,109,0,0,},{174,133,11,160,73,1,0,},{162,135,12,209,138,65,1,},},{{208,182,0,159,0,0,0,},},
{{190,193,12,209,223,83,1,},{184,66,12,228,17,1,0,},{167,146,11,160,21,0,0,},},{{197,141,10,167,0,0,0,},{184,69,8,185,55,1,0,},{182,162,8,181,201,1,0,},},
{{160,6,13,220,50,65,1,},{157,178,9,158,70,1,0,},},{{167,6,9,174,81,0,0,},{161,151,8,181,60,1,0,},},{0},{{190,218,12,209,223,83,1,},{169,217,8,188,60,1,0,},},
{{183,136,11,160,176,1,0,},{157,182,9,158,70,1,0,},},{{198,158,11,161,204,0,0,},{174,15,13,220,92,65,1,},{160,9,9,174,65,1,0,},},{{199,146,11,160,204,0,0,},
{184,201,11,184,21,1,0,},},{{186,71,8,185,229,1,0,},{169,213,8,188,60,1,0,},},{{183,140,11,160,176,1,0,},{157,168,12,209,45,59,1,},},{{162,13,8,174,148,1,0,},
{160,13,9,174,65,1,0,},},{{182,26,13,220,195,67,1,},},{{188,85,12,169,85,1,0,},{161,28,12,161,39,1,0,},},{{188,84,12,169,85,1,0,},{157,172,12,209,45,59,1,},},
{{188,85,13,220,92,83,1,},{160,11,12,160,39,1,0,},},{{192,185,11,157,204,0,0,},{167,9,12,160,45,0,0,},{158,46,13,220,92,59,1,},},{{229,191,15,229,0,68,1,},
{163,143,8,174,153,1,0,},{158,59,8,158,95,1,0,},},{{207,71,12,186,210,0,0,},{160,6,9,174,65,1,0,},},{{192,172,11,157,204,0,0,},{188,89,9,188,101,1,0,},},
{{197,134,10,167,0,0,0,},{167,15,9,174,81,0,0,},{161,152,11,161,21,1,0,},},{{163,139,8,174,153,1,0,},{158,170,12,209,89,59,1,},},{{190,84,9,188,235,1,0,},
{181,27,9,181,101,1,0,},{159,59,12,157,188,1,0,},},{{190,85,8,188,229,1,0,},{159,42,13,220,195,59,1,},},{{190,86,9,188,235,1,0,},{161,162,8,181,60,1,0,},},
{{181,153,8,181,98,1,0,},{157,185,12,209,45,59,1,},},{{209,224,6,190,0,0,0,},{181,31,9,181,101,1,0,},{169,222,9,188,70,1,0,},},{{160,146,8,174,60,1,0,},
{160,7,8,174,55,1,0,},},{{168,14,12,160,145,0,0,},{160,20,9,174,65,1,0,},},{{184,200,8,185,60,1,0,},{183,12,13,220,195,65,1,},},{{159,174,8,158,201,1,0,},
{157,51,13,220,50,59,1,},},{{162,138,11,191,104,1,0,},{159,46,9,158,204,1,0,},},{{198,159,11,161,204,0,0,},{158,52,12,157,85,1,0,},},{{174,146,12,209,89,65,1,},},
{{190,217,11,169,207,1,0,},{184,70,9,185,65,1,0,},},{{185,74,8,185,95,1,0,},{168,146,8,174,170,0,0,},{162,136,12,209,138,65,1,},},{{168,20,9,174,176,0,0,},
{162,14,13,220,143,65,1,},},{{209,213,6,190,0,0,0,},{188,216,8,188,98,1,0,},},{{231,206,0,224,0,0,0,},{184,74,9,185,65,1,0,},{183,7,12,160,188,1,0,},},
{{168,148,11,160,124,0,0,},{157,169,11,157,21,1,0,},},{{182,153,8,181,201,1,0,},},{{188,212,8,188,98,1,0,},{161,157,8,181,60,1,0,},},{{219,53,1,221,2,0,0,},
{184,76,12,184,39,1,0,},{163,142,12,209,138,65,1,},},{{159,52,12,157,188,1,0,},},{{196,20,11,168,0,0,0,},{174,8,12,160,85,1,0,},},{{182,158,12,209,192,67,1,},
{168,9,12,160,145,0,0,},},{{181,31,13,220,92,67,1,},},{{181,26,12,161,85,1,0,},{157,175,12,209,45,59,1,},},{{181,29,13,220,92,67,1,},},{{158,43,12,157,85,1,0,},},
{{158,169,11,157,73,1,0,},},{{183,143,11,160,176,1,0,},{181,36,13,220,92,67,1,},{181,30,12,161,85,1,0,},},{{194,143,11,168,204,0,0,},{168,141,11,160,124,0,0,},
{162,20,12,160,132,1,0,},},{{183,20,13,220,195,65,1,},{168,134,11,160,124,0,0,},},{{190,94,12,169,219,1,0,},{168,135,11,160,124,0,0,},},{{199,139,11,160,204,0,0,},
{184,208,11,184,21,1,0,},},{{174,20,8,174,95,1,0,},{162,139,11,160,114,1,0,},},{{167,6,8,174,67,0,0,},},{{184,199,11,184,21,1,0,},{167,11,8,174,67,0,0,},},
{{190,218,11,169,207,1,0,},{157,52,13,220,50,59,1,},},{{191,136,0,183,0,0,0,},{159,45,12,157,188,1,0,},},{{192,178,11,157,204,0,0,},{174,15,12,160,85,1,0,},
{160,9,8,174,55,1,0,},},{{188,217,12,209,89,83,1,},{185,200,8,185,98,1,0,},},{{191,157,0,182,0,0,0,},{186,210,11,184,207,1,0,},{169,213,11,169,21,1,0,},},
{{159,51,9,158,204,1,0,},{157,168,11,157,21,1,0,},},{{162,13,9,174,158,1,0,},{160,13,8,174,55,1,0,},},{{182,26,12,161,188,1,0,},{169,212,12,209,45,83,1,},},
{{186,69,12,184,219,1,0,},{181,149,11,161,73,1,0,},{159,177,8,158,201,1,0,},},{{181,23,12,161,85,1,0,},},{0},{{158,187,12,209,89,59,1,},{158,46,12,157,85,1,0,},},
{{190,85,12,169,219,1,0,},{161,36,9,181,65,1,0,},},{{214,54,5,192,0,0,0,},{161,152,9,181,70,1,0,},},{{197,189,10,167,0,0,0,},{168,136,8,174,170,0,0,},},
{{219,21,1,221,2,0,0,},{197,188,10,167,0,0,0,},{160,20,12,160,39,1,0,},},{{188,83,8,188,95,1,0,},{158,170,11,157,73,1,0,},},{{183,136,12,209,192,65,1,},
{159,168,12,209,192,59,1,},},{{201,199,11,184,204,0,0,},{181,157,8,181,98,1,0,},{159,42,12,157,188,1,0,},},{{214,44,5,192,0,0,0,},{161,162,9,181,70,1,0,},},
{{191,141,0,183,0,0,0,},{163,137,12,209,138,65,1,},},{{184,209,11,231,27,1,0,},{157,49,13,220,50,59,1,},},{{160,146,9,174,70,1,0,},{160,7,9,174,65,1,0,},},
{{160,20,8,174,55,1,0,},},{{184,196,11,184,21,1,0,},{163,133,12,209,138,65,1,},},{{186,76,12,184,219,1,0,},{159,174,11,157,176,1,0,},},{{157,181,12,209,45,59,1,},},
{{184,82,9,185,65,1,0,},{158,52,13,220,92,59,1,},},{{167,133,12,209,53,64,1,},{158,37,12,157,85,1,0,},},{{205,224,11,169,204,0,0,},{169,212,11,169,21,1,0,},},
{{185,74,9,185,101,1,0,},{160,136,12,209,45,65,1,},},{{185,196,8,185,98,1,0,},{168,20,8,174,164,0,0,},{162,14,12,160,132,1,0,},},{{182,27,9,181,204,1,0,},
{182,25,8,181,198,1,0,},{160,5,13,220,50,65,1,},},{{188,90,8,188,95,1,0,},{182,26,9,181,204,1,0,},},{{186,198,8,185,232,1,0,},{183,145,11,217,184,1,0,},
{169,86,9,188,65,1,0,},},{{168,133,12,209,152,64,1,},},{{182,23,9,181,204,1,0,},{158,47,9,158,101,1,0,},},{{163,142,11,160,114,1,0,},{157,43,12,157,39,1,0,},},
{{186,198,12,209,223,113,1,},{159,52,13,220,195,59,1,},},{{174,8,13,220,92,65,1,},},{{190,212,8,188,232,1,0,},{188,214,12,209,89,83,1,},{161,159,12,209,45,67,1,},},
{{195,61,10,168,0,0,0,},{185,69,13,220,92,113,1,},{161,25,13,220,50,67,1,},},{{181,26,13,220,92,67,1,},{159,46,12,157,188,1,0,},},{{201,198,11,184,204,0,0,},
{159,184,11,215,184,1,0,},},{{174,7,9,174,101,1,0,},{168,11,8,174,164,0,0,},},{{232,183,0,214,0,0,0,},{183,9,8,174,198,1,0,},},{{181,30,13,220,92,67,1,},
{174,148,11,160,73,1,0,},},{{162,20,13,220,143,65,1,},},{{211,131,11,196,204,0,0,},{168,15,8,174,164,0,0,},},{{182,34,9,181,204,1,0,},},{0},{{174,20,9,174,101,1,0,},},
{{190,212,12,209,223,83,1,},},{{220,197,7,207,0,0,0,},{184,82,12,184,39,1,0,},{184,199,12,209,45,113,1,},},{{157,52,12,157,39,1,0,},},{{181,25,12,161,85,1,0,},
{157,182,11,157,21,1,0,},},{{182,156,8,181,201,1,0,},{158,49,8,158,95,1,0,},},{{195,13,10,168,0,0,0,},{190,88,8,188,229,1,0,},{188,96,13,220,92,83,1,},},
{{186,210,8,185,232,1,0,},},{{169,224,8,188,60,1,0,},{159,51,8,158,198,1,0,},},{{185,82,8,185,95,1,0,},{181,28,9,181,101,1,0,},},{{188,213,11,169,73,1,0,},
{161,156,11,161,21,1,0,},},{{186,69,13,220,226,113,1,},{183,133,11,160,176,1,0,},},{{181,23,13,220,92,67,1,},{160,143,11,160,21,1,0,},},{{185,199,8,185,98,1,0,},
{174,9,8,174,95,1,0,},{174,134,11,160,73,1,0,},},{{168,6,8,174,164,0,0,},},{{190,85,13,220,226,83,1,},{185,207,11,218,81,1,0,},{161,36,8,181,55,1,0,},},
{{159,166,12,209,192,59,1,},},{{168,136,11,160,124,0,0,},},{{158,185,8,158,98,1,0,},{158,44,8,158,95,1,0,},},{{167,141,11,160,21,0,0,},{161,26,9,181,65,1,0,},},
{{205,214,11,169,204,0,0,},{185,202,11,184,73,1,0,},},{{214,59,5,192,0,0,0,},{185,201,11,184,73,1,0,},},{{182,163,11,225,180,1,0,},{168,12,13,220,158,64,1,},},
{{195,18,10,168,0,0,0,},{186,200,11,184,207,1,0,},{181,163,11,225,77,1,0,},},{{190,221,11,223,215,1,0,},{157,49,12,157,39,1,0,},},{{211,60,12,211,206,0,0,},},
{{167,148,12,209,53,64,1,},{158,54,13,220,92,59,1,},},{{184,71,9,185,65,1,0,},{161,149,12,209,45,67,1,},},{{186,76,13,220,226,113,1,},{184,68,8,185,55,1,0,},},
{{157,181,11,157,21,1,0,},},{{185,200,11,184,73,1,0,},{174,147,11,230,77,1,0,},},{{182,29,13,220,195,67,1,},{158,37,13,220,92,59,1,},},{{183,134,8,174,201,1,0,},},
{{174,7,13,220,92,65,1,},{159,50,13,220,195,59,1,},},{{196,8,11,168,0,0,0,},{174,12,8,174,95,1,0,},},{{184,200,12,209,45,113,1,},{182,27,8,181,198,1,0,},
{163,18,12,160,132,1,0,},},{{197,148,10,167,0,0,0,},{188,90,9,188,101,1,0,},},{{160,140,11,160,21,1,0,},{159,54,13,220,195,59,1,},},{{160,54,0,194,215,0,0,},
{158,50,13,220,92,59,1,},},{{182,23,8,181,198,1,0,},{167,8,9,174,81,0,0,},{158,47,8,158,95,1,0,},},{{157,43,13,220,50,59,1,},},{{181,24,13,220,92,67,1,},
{163,143,11,160,114,1,0,},},{{194,139,11,168,204,0,0,},{168,137,11,160,124,0,0,},{162,8,8,174,148,1,0,},},{{168,13,12,160,145,0,0,},{167,14,12,160,45,0,0,},},
{{163,136,11,160,114,1,0,},{161,25,12,161,39,1,0,},},{{208,178,0,159,0,0,0,},{163,139,11,160,114,1,0,},{158,57,12,157,85,1,0,},},{{163,138,11,191,104,1,0,},},
{{168,11,9,174,176,0,0,},},{{186,201,11,184,207,1,0,},{181,162,11,161,73,1,0,},{161,27,13,220,50,67,1,},},{{207,72,12,186,210,0,0,},{159,171,11,157,176,1,0,},},
{{184,195,12,209,45,113,1,},},{{168,15,9,174,176,0,0,},},{{163,134,12,209,138,65,1,},{161,23,9,181,65,1,0,},},{{159,169,12,209,192,59,1,},},{{192,165,11,157,204,0,0,},
{159,47,13,220,195,59,1,},},{{213,151,5,198,0,0,0,},{169,90,13,220,50,83,1,},},{{184,82,13,220,50,113,1,},{158,179,8,158,98,1,0,},},{{169,88,13,220,50,83,1,},
{163,18,13,220,143,65,1,},},{{183,13,8,174,198,1,0,},{174,143,11,160,73,1,0,},},{{158,49,9,158,101,1,0,},},{{185,69,8,185,95,1,0,},{184,201,8,185,60,1,0,},},
{{186,71,13,220,226,113,1,},{163,147,11,230,120,1,0,},},{{183,7,9,174,204,1,0,},{160,139,12,209,45,65,1,},},{{196,11,11,168,0,0,0,},{188,212,12,209,89,83,1,},},
{{226,66,12,228,208,0,0,},{188,213,12,209,89,83,1,},{162,139,12,209,138,65,1,},},{{184,210,12,209,45,113,1,},},{{183,148,8,174,201,1,0,},{157,172,9,158,70,1,0,},},
{{185,82,9,185,101,1,0,},{174,9,9,174,101,1,0,},{160,134,9,174,70,1,0,},},{{168,6,9,174,176,0,0,},{160,135,9,174,70,1,0,},},{{190,83,13,220,226,83,1,},
{169,96,9,188,65,1,0,},{157,46,8,158,55,1,0,},},{{198,163,11,225,206,0,0,},{159,53,12,157,188,1,0,},},{0},{{163,13,13,220,143,65,1,},{158,44,9,158,101,1,0,},},
{{167,141,8,174,74,0,0,},},{{159,57,12,157,188,1,0,},{159,170,11,157,176,1,0,},},{{186,208,11,184,207,1,0,},{174,134,12,209,89,65,1,},},{{168,12,12,160,145,0,0,},
{161,162,11,161,21,1,0,},},{{186,200,12,209,223,113,1,},},{{181,31,12,161,85,1,0,},{169,222,12,209,45,83,1,},},{{160,146,11,160,21,1,0,},},{{163,7,8,174,148,1,0,},
{158,54,12,157,85,1,0,},},{{186,67,13,220,226,113,1,},{182,31,13,220,195,67,1,},},{{157,51,8,158,55,1,0,},},{{159,44,9,158,204,1,0,},},{{194,189,11,168,204,0,0,},},
{{195,12,10,168,0,0,0,},{190,89,12,169,219,1,0,},{169,90,8,188,55,1,0,},},{{190,96,12,169,219,1,0,},{183,134,11,160,176,1,0,},{169,212,9,188,70,1,0,},},
{{168,146,11,160,124,0,0,},{159,50,12,157,188,1,0,},},{{186,74,12,184,219,1,0,},{174,12,9,174,101,1,0,},},{0},{{168,18,8,174,164,0,0,},{157,41,13,220,50,59,1,},},
{{162,140,11,160,114,1,0,},{159,54,12,157,188,1,0,},},{{182,153,11,161,176,1,0,},},{{188,65,13,220,92,83,1,},},{{186,68,12,184,219,1,0,},{184,76,9,185,65,1,0,},},
{{205,211,11,169,204,0,0,},{181,24,12,161,85,1,0,},{157,173,12,209,45,59,1,},},{{186,82,12,184,219,1,0,},},{{163,12,8,174,148,1,0,},{158,45,12,157,85,1,0,},},
{{185,210,12,209,89,113,1,},},{{183,139,8,174,201,1,0,},{157,175,11,157,21,1,0,},},{{196,62,11,168,0,0,0,},{183,146,8,174,201,1,0,},},{{161,161,11,213,33,1,0,},
{158,41,12,157,85,1,0,},},{{186,201,8,185,232,1,0,},{181,156,11,161,73,1,0,},{168,6,12,160,145,0,0,},},{{183,143,8,174,201,1,0,},{182,23,12,161,188,1,0,},
{174,7,8,174,95,1,0,},},{{225,160,0,212,0,0,0,},{162,135,8,174,153,1,0,},{160,147,11,230,27,1,0,},},{0},{{184,80,13,220,50,113,1,},},{{174,11,12,160,85,1,0,},
{160,134,11,160,21,1,0,},},{{162,139,8,174,153,1,0,},{159,47,12,157,188,1,0,},},{{191,153,0,182,0,0,0,},{163,141,8,174,153,1,0,},{160,23,0,194,215,0,0,},},
{{158,179,11,157,73,1,0,},{157,39,4,233,247,0,0,},},{{190,218,8,188,232,1,0,},{186,67,12,184,219,1,0,},{169,217,12,209,45,83,1,},},{{168,147,11,230,131,0,0,},},
{{174,13,12,160,85,1,0,},},{0},{{186,210,12,209,223,113,1,},{186,71,12,184,219,1,0,},{169,213,12,209,45,83,1,},},{{183,7,8,174,198,1,0,},},{{182,154,11,161,176,1,0,},},
{{182,24,12,161,188,1,0,},{161,156,9,181,70,1,0,},},{{159,177,11,157,176,1,0,},},{{157,57,8,158,55,1,0,},{157,172,8,158,60,1,0,},},{{192,168,11,157,204,0,0,},
{157,22,2,219,225,0,0,},},{{182,36,12,161,188,1,0,},{163,15,13,220,143,65,1,},},{{190,83,12,169,219,1,0,},{169,211,11,169,21,1,0,},{157,46,9,158,65,1,0,},},
{{183,9,9,174,204,1,0,},{159,41,13,220,195,59,1,},},{{186,196,8,185,232,1,0,},{183,8,8,174,198,1,0,},},{{201,208,11,184,204,0,0,},{167,15,13,220,60,64,1,},},
{{163,139,12,209,138,65,1,},},{{183,142,12,209,192,65,1,},{167,13,13,220,60,64,1,},{159,57,13,220,195,59,1,},},{{167,12,12,160,45,0,0,},},{{185,204,11,184,73,1,0,},
{161,162,12,209,45,67,1,},},{{163,137,11,160,114,1,0,},},{{168,141,8,174,170,0,0,},},{0},{{157,51,12,157,39,1,0,},},{{182,31,12,161,188,1,0,},{167,135,12,209,53,64,1,},},
{{169,216,8,188,60,1,0,},{157,51,9,158,65,1,0,},},{{201,197,11,184,204,0,0,},},{{188,94,8,188,95,1,0,},{161,23,8,181,55,1,0,},},{{190,89,13,220,226,83,1,},
{169,90,9,188,65,1,0,},},{{190,211,8,188,232,1,0,},{160,133,12,209,45,65,1,},},{{185,74,12,184,85,1,0,},{162,136,8,174,153,1,0,},{160,136,9,174,70,1,0,},},
{{198,155,11,161,204,0,0,},{168,20,13,220,158,64,1,},{157,59,12,157,39,1,0,},},{{191,143,0,183,0,0,0,},{188,216,12,209,89,83,1,},{159,169,11,157,176,1,0,},},
{{157,41,12,157,39,1,0,},},{{162,140,8,174,153,1,0,},{160,140,9,174,70,1,0,},},{{182,153,12,209,192,67,1,},{169,216,9,188,70,1,0,},},{{188,65,12,169,85,1,0,},
{161,157,12,209,45,67,1,},{159,173,11,157,176,1,0,},},{{186,68,13,220,226,113,1,},{184,76,8,185,55,1,0,},},{{168,7,8,174,164,0,0,},},{{224,68,5,201,0,0,0,},},
{{190,212,11,169,207,1,0,},{182,21,13,220,195,67,1,},{158,45,13,220,92,59,1,},},{0},{{183,139,11,160,176,1,0,},{181,26,8,181,95,1,0,},{157,175,8,158,60,1,0,},},
{{167,140,8,174,74,0,0,},},{{161,155,11,161,21,1,0,},{158,41,13,220,92,59,1,},},{0},{{181,36,9,181,101,1,0,},},{{174,133,12,209,89,65,1,},{162,135,11,160,114,1,0,},},
{{159,185,11,157,176,1,0,},},{{190,84,13,220,226,83,1,},{184,80,12,184,39,1,0,},{184,197,12,209,45,113,1,},},{{183,141,12,209,192,65,1,},{157,50,12,157,39,1,0,},},
{{174,20,12,160,85,1,0,},},{{218,196,5,201,0,0,0,},{181,153,12,209,89,67,1,},{157,185,8,158,60,1,0,},},{{208,185,0,159,0,0,0,},{190,88,9,188,235,1,0,},
{181,152,12,209,89,67,1,},},{{190,89,8,188,229,1,0,},{157,54,12,157,39,1,0,},},{{185,73,9,185,101,1,0,},{162,137,12,209,138,65,1,},},{{174,13,13,220,92,65,1,},
{169,96,8,188,55,1,0,},},{{188,217,8,188,98,1,0,},{181,156,8,181,98,1,0,},},{0},{{190,94,13,220,226,83,1,},{185,69,9,185,101,1,0,},{162,141,12,209,138,65,1,},},
{{207,74,12,186,210,0,0,},},{{188,213,8,188,98,1,0,},{182,24,13,220,195,67,1,},{161,156,8,181,60,1,0,},},{{186,69,8,185,229,1,0,},{159,177,12,209,192,59,1,},},
{{181,23,8,181,95,1,0,},{157,172,11,157,21,1,0,},},{{213,159,5,198,0,0,0,},{185,199,11,184,73,1,0,},},{{190,213,11,169,207,1,0,},{163,15,12,160,132,1,0,},},
{{205,193,11,169,204,0,0,},{183,6,9,174,204,1,0,},{169,211,8,188,60,1,0,},},{0},{{196,63,11,168,0,0,0,},{168,136,12,209,152,64,1,},},{{167,15,12,160,45,0,0,},
{158,185,11,157,73,1,0,},},{{196,21,11,168,0,0,0,},{181,155,12,209,89,67,1,},},{{160,133,11,160,21,1,0,},},{0},{0},{{163,137,8,174,153,1,0,},},{{196,0,11,168,0,0,0,},
{160,135,12,209,45,65,1,},},{{194,140,11,168,204,0,0,},{184,196,8,185,60,1,0,},{168,142,11,160,124,0,0,},},{{197,140,10,167,0,0,0,},{192,187,11,157,204,0,0,},
{184,197,8,185,60,1,0,},},{{190,91,13,220,226,83,1,},{167,135,11,160,21,0,0,},},{{186,76,8,185,229,1,0,},{169,216,11,169,21,1,0,},},{{183,20,9,174,204,1,0,},},
{{188,94,9,188,101,1,0,},{182,157,11,161,176,1,0,},{158,165,11,157,73,1,0,},},{{184,198,12,209,45,113,1,},{163,20,12,160,132,1,0,},},{{191,156,0,182,0,0,0,},},
{{174,142,12,209,89,65,1,},{160,136,8,174,60,1,0,},},{{168,20,12,160,145,0,0,},{167,11,12,160,45,0,0,},},{{184,202,12,209,45,113,1,},{162,140,12,209,138,65,1,},},
{{169,65,13,220,50,83,1,},{163,13,12,160,132,1,0,},},{{192,174,11,157,204,0,0,},{160,140,8,174,60,1,0,},},{{185,198,11,184,73,1,0,},{167,15,8,174,67,0,0,},},
{{167,8,12,160,45,0,0,},{158,47,13,220,92,59,1,},},{{181,152,11,161,73,1,0,},{162,137,8,174,153,1,0,},},{{168,7,9,174,176,0,0,},{162,146,12,209,138,65,1,},},
{{168,137,8,174,170,0,0,},{160,139,11,160,21,1,0,},},{{188,214,8,188,98,1,0,},{158,186,11,232,77,1,0,},},{{192,169,11,157,204,0,0,},{161,25,9,181,65,1,0,},},
{{181,26,9,181,101,1,0,},{157,175,9,158,70,1,0,},},{{182,161,11,213,184,1,0,},},{{182,162,11,161,176,1,0,},{161,155,8,181,60,1,0,},},{{183,9,12,160,188,1,0,},
{167,148,8,174,74,0,0,},},{{181,36,8,181,95,1,0,},{159,171,12,209,192,59,1,},},{{162,20,9,174,158,1,0,},},{{183,137,12,209,192,65,1,},},{{163,61,12,211,173,1,0,},},
{{198,152,11,161,204,0,0,},{157,165,12,209,45,59,1,},},{{174,20,13,220,92,65,1,},{169,216,12,209,45,83,1,},},{{183,141,8,174,201,1,0,},{158,53,12,157,85,1,0,},},
{{186,195,11,184,207,1,0,},{183,140,8,174,201,1,0,},},{{198,156,11,161,204,0,0,},{185,197,8,185,98,1,0,},{157,54,13,220,50,59,1,},},{{185,73,8,185,95,1,0,},
{174,143,8,174,98,1,0,},{160,137,12,209,45,65,1,},},{{167,60,12,211,104,0,0,},{158,49,12,157,85,1,0,},},{{188,96,9,188,101,1,0,},{188,217,11,169,73,1,0,},
{174,18,9,174,101,1,0,},},{{162,11,12,160,132,1,0,},},{{174,139,8,174,98,1,0,},{160,141,12,209,45,65,1,},},{0},{{167,11,9,174,81,0,0,},},{{186,69,9,185,235,1,0,},
{163,135,8,174,153,1,0,},},{{191,146,0,183,0,0,0,},{183,148,11,160,176,1,0,},{181,23,9,181,101,1,0,},},{{167,137,8,174,74,0,0,},{158,59,9,158,101,1,0,},},
{{190,213,8,188,232,1,0,},{161,158,12,209,45,67,1,},},{{157,187,11,157,21,1,0,},},{{190,86,8,188,229,1,0,},},{{185,195,12,209,89,113,1,},{181,153,11,161,73,1,0,},},
{{188,211,12,209,89,83,1,},{186,80,8,185,229,1,0,},{161,154,12,209,45,67,1,},},{{186,202,12,209,223,113,1,},{159,187,8,158,201,1,0,},},{{196,6,11,168,0,0,0,},
{190,90,12,169,219,1,0,},{181,29,12,161,85,1,0,},},{{181,157,11,161,73,1,0,},},{{168,12,9,174,176,0,0,},{158,40,12,157,85,1,0,},},{{159,46,8,158,198,1,0,},},
{{186,195,12,209,223,113,1,},{160,18,13,220,50,65,1,},},{0},{{163,7,13,220,143,65,1,},{158,54,9,158,101,1,0,},},{{190,91,12,169,219,1,0,},{169,64,6,229,212,0,0,},},
{{186,76,9,185,235,1,0,},{157,166,11,157,21,1,0,},},{{185,72,13,220,92,113,1,},},{{182,157,8,181,201,1,0,},{158,50,9,158,101,1,0,},},{{205,219,11,169,204,0,0,},
{163,20,13,220,143,65,1,},},{{183,134,12,209,192,65,1,},},{{160,136,11,160,21,1,0,},{159,50,9,158,204,1,0,},},{{197,146,10,167,0,0,0,},{185,73,13,220,92,113,1,},
{184,72,9,185,65,1,0,},},{0},{{186,70,12,184,219,1,0,},{169,65,12,169,39,1,0,},},{{169,86,8,188,55,1,0,},{159,54,9,158,204,1,0,},},{{194,135,11,168,204,0,0,},
{168,133,11,160,124,0,0,},},{{167,8,13,220,60,64,1,},{158,47,12,157,85,1,0,},},{{157,186,11,232,27,1,0,},},{{185,82,12,184,85,1,0,},{160,142,12,209,45,65,1,},},
{{162,131,11,196,170,1,0,},},{{161,159,9,181,70,1,0,},},{{182,149,11,161,176,1,0,},{161,25,8,181,55,1,0,},},{{223,211,5,205,0,0,0,},{168,134,12,209,152,64,1,},},
{{168,135,12,209,152,64,1,},{158,171,11,157,73,1,0,},},{{197,137,10,167,0,0,0,},{161,155,9,181,70,1,0,},},{{181,156,12,209,89,67,1,},{181,21,12,161,85,1,0,},},
{{169,221,11,223,33,1,0,},},{{168,143,12,209,152,64,1,},},{{190,222,8,188,232,1,0,},},{{163,13,9,174,158,1,0,},},{{168,142,12,209,152,64,1,},{157,165,11,157,21,1,0,},},
{{208,175,0,159,0,0,0,},{159,47,9,158,204,1,0,},},{{158,53,13,220,92,59,1,},},{{205,218,11,169,204,0,0,},},{{183,18,9,174,204,1,0,},{169,219,12,209,45,83,1,},
{159,173,8,158,201,1,0,},},{{160,137,11,160,21,1,0,},},{{158,49,13,220,92,59,1,},},{{190,88,13,220,226,83,1,},{184,201,12,209,45,113,1,},{184,68,12,184,39,1,0,},},
{{162,15,9,174,158,1,0,},},{{185,208,11,184,73,1,0,},{174,139,11,160,73,1,0,},{162,20,8,174,148,1,0,},},{{182,154,8,181,201,1,0,},},{{167,176,11,208,13,0,0,},
{161,152,8,181,60,1,0,},},{{182,164,12,209,192,67,1,},{157,42,12,157,39,1,0,},},{{185,71,12,184,85,1,0,},{174,137,12,209,89,65,1,},},{{158,174,8,158,98,1,0,},},
{{186,68,9,185,235,1,0,},{161,164,12,209,45,67,1,},},{{190,83,9,188,235,1,0,},{169,96,13,220,50,83,1,},{157,46,12,157,39,1,0,},},{{208,179,0,159,0,0,0,},
{159,166,11,157,176,1,0,},},{{168,1,12,195,182,0,0,},},{{197,136,10,167,0,0,0,},},{{174,15,9,174,101,1,0,},{159,187,11,157,176,1,0,},},{{159,57,8,158,198,1,0,},},
{{174,134,8,174,98,1,0,},{168,13,8,174,164,0,0,},},{{168,12,8,174,164,0,0,},{158,40,13,220,92,59,1,},},{{183,12,8,174,198,1,0,},{157,177,9,158,70,1,0,},},
{{162,6,9,174,158,1,0,},{157,178,12,209,45,59,1,},},{{160,148,12,209,45,65,1,},},{{184,80,8,185,55,1,0,},{158,54,8,158,95,1,0,},},{{182,31,9,181,204,1,0,},
{161,149,11,161,21,1,0,},},{{212,36,5,198,0,0,0,},{188,94,12,169,85,1,0,},{159,172,12,209,192,59,1,},},{{191,139,0,183,0,0,0,},{185,72,12,184,85,1,0,},
{182,25,9,181,204,1,0,},},{{158,50,8,158,95,1,0,},},{{163,131,11,196,170,1,0,},{157,187,12,209,45,59,1,},},{{190,96,8,188,229,1,0,},{181,154,8,181,98,1,0,},},
{{159,50,8,158,198,1,0,},},{{182,155,12,209,192,67,1,},{163,146,8,174,153,1,0,},},{{188,218,12,209,89,83,1,},{169,88,9,188,65,1,0,},},{{183,13,12,160,188,1,0,},},
{{159,54,8,158,198,1,0,},},{{185,69,12,184,85,1,0,},},{{162,61,12,211,173,1,0,},},{{209,218,6,190,0,0,0,},{157,45,9,158,65,1,0,},},{0},{{198,149,11,161,204,0,0,},},
{{158,45,8,158,95,1,0,},},{{201,196,11,184,204,0,0,},{183,5,12,160,188,1,0,},{159,186,11,232,180,1,0,},},{{196,7,11,168,0,0,0,},},{{174,135,12,209,89,65,1,},
{167,140,11,160,21,0,0,},},{{209,211,6,190,0,0,0,},{163,8,12,160,132,1,0,},},{{195,21,10,168,0,0,0,},{186,201,12,209,223,113,1,},{181,162,12,209,89,67,1,},},
{{183,143,12,209,192,65,1,},},{0},{{190,222,11,169,207,1,0,},{182,156,12,209,192,67,1,},{163,6,9,174,158,1,0,},},{{209,214,6,190,0,0,0,},{184,80,9,185,65,1,0,},
{182,157,12,209,192,67,1,},},{{183,141,11,160,176,1,0,},{162,5,13,220,143,65,1,},},{{159,47,8,158,198,1,0,},},{{197,143,10,167,0,0,0,},{184,71,8,185,55,1,0,},
{158,51,13,220,92,59,1,},},{{190,90,13,220,226,83,1,},{169,89,9,188,65,1,0,},{157,180,11,157,21,1,0,},},{{183,18,8,174,198,1,0,},{181,28,8,181,95,1,0,},},
{{162,137,11,160,114,1,0,},},{{185,80,9,185,101,1,0,},{174,13,8,174,95,1,0,},},{{186,82,9,185,235,1,0,},{182,149,12,209,192,67,1,},{169,85,9,188,65,1,0,},},
{{162,15,8,174,148,1,0,},{159,179,12,209,192,59,1,},},{{217,134,5,199,0,0,0,},{194,149,11,168,204,0,0,},},{{188,91,12,169,85,1,0,},{174,136,12,209,89,65,1,},},
{{182,24,8,181,198,1,0,},{167,9,8,174,67,0,0,},},{{194,148,11,168,204,0,0,},{181,149,12,209,89,67,1,},{157,42,13,220,50,59,1,},},{{186,74,8,185,229,1,0,},
{185,71,13,220,92,113,1,},},{{158,174,11,157,73,1,0,},},{{163,15,9,174,158,1,0,},{161,164,11,161,21,1,0,},},{{190,83,8,188,229,1,0,},{169,96,12,169,39,1,0,},
{157,46,13,220,50,59,1,},},{{191,154,0,182,0,0,0,},},{{215,187,5,192,0,0,0,},{161,24,9,181,65,1,0,},{158,172,12,209,89,59,1,},},{{169,214,12,209,45,83,1,},
{158,42,13,220,92,59,1,},},{{183,8,9,174,204,1,0,},{161,159,11,161,21,1,0,},},{{159,57,9,158,204,1,0,},},{{161,157,11,161,21,1,0,},},{{190,223,11,227,211,1,0,},
{186,72,8,185,229,1,0,},},{{183,12,9,174,204,1,0,},{181,159,11,161,73,1,0,},{157,177,8,158,60,1,0,},},{{167,146,12,209,53,64,1,},{162,6,8,174,148,1,0,},},
{{197,191,10,167,0,0,0,},{160,148,11,160,21,1,0,},},{{197,190,10,167,0,0,0,},{191,152,0,182,0,0,0,},{163,148,12,209,138,65,1,},},{{184,196,12,209,45,113,1,},
{167,135,8,174,74,0,0,},{163,133,11,160,114,1,0,},},{0},{{194,134,11,168,204,0,0,},},{{168,2,12,197,186,0,0,},{161,23,12,161,39,1,0,},},{{190,89,9,188,235,1,0,},
{174,11,8,174,95,1,0,},{167,139,12,209,53,64,1,},},{{162,12,13,220,143,65,1,},},{{163,141,12,209,138,65,1,},{162,13,12,160,132,1,0,},},{{167,61,12,211,104,0,0,},
{163,140,12,209,138,65,1,},},{{167,143,8,174,74,0,0,},},{{186,209,11,231,211,1,0,},{169,214,11,169,21,1,0,},{162,8,9,174,158,1,0,},},{{162,9,8,174,148,1,0,},},
{{188,84,9,188,101,1,0,},{182,151,11,161,176,1,0,},{158,175,11,157,73,1,0,},},{{195,6,10,168,0,0,0,},{186,196,11,184,207,1,0,},},{{201,202,11,184,204,0,0,},
{181,152,8,181,98,1,0,},{157,45,8,158,55,1,0,},},{{162,5,12,160,132,1,0,},},{{192,173,11,157,204,0,0,},{188,88,13,220,92,83,1,},{160,6,12,160,39,1,0,},},
{{163,12,13,220,143,65,1,},{158,45,9,158,101,1,0,},},{{183,11,12,160,188,1,0,},},{{161,24,13,220,50,67,1,},{159,165,12,209,192,59,1,},},{{174,135,11,160,73,1,0,},
{167,140,12,209,53,64,1,},},{{163,8,13,220,143,65,1,},},{{183,9,13,220,195,65,1,},{162,145,11,217,126,1,0,},},{{168,13,9,174,176,0,0,},{162,7,13,220,143,65,1,},},
{{216,20,5,199,0,0,0,},{183,11,13,220,195,65,1,},},{{163,6,8,174,148,1,0,},},{{183,13,9,174,204,1,0,},{159,45,13,220,195,59,1,},},{{160,134,12,209,45,65,1,},
{157,50,8,158,55,1,0,},},{{213,164,5,198,0,0,0,},{183,15,9,174,204,1,0,},},{{158,51,12,157,85,1,0,},{157,167,3,233,239,0,0,},},{{188,96,8,188,95,1,0,},
{169,89,8,188,55,1,0,},},{{157,54,8,158,55,1,0,},},{{174,18,13,220,92,65,1,},{160,137,9,174,70,1,0,},},{{174,13,9,174,101,1,0,},},{{195,11,10,168,0,0,0,},
{169,85,8,188,55,1,0,},{159,53,13,220,195,59,1,},},{{196,9,11,168,0,0,0,},{188,216,11,169,73,1,0,},{157,40,13,220,50,59,1,},},{{162,141,8,174,153,1,0,},
{160,141,9,174,70,1,0,},},{{188,222,11,169,73,1,0,},{188,91,13,220,92,83,1,},},{{182,24,9,181,204,1,0,},{161,156,12,209,45,67,1,},},{{183,20,12,160,188,1,0,},
{157,44,13,220,50,59,1,},},{{188,221,11,223,81,1,0,},{157,59,8,158,55,1,0,},},{{212,31,5,198,0,0,0,},{208,172,0,159,0,0,0,},{163,2,12,197,166,1,0,},},
{{163,15,8,174,148,1,0,},{161,158,11,161,21,1,0,},},{{207,80,12,186,210,0,0,},{186,208,8,185,232,1,0,},{169,211,12,209,45,83,1,},},{{168,8,9,174,176,0,0,},},
{{199,141,11,160,204,0,0,},{161,24,8,181,55,1,0,},{158,57,13,220,92,59,1,},},{{163,11,8,174,148,1,0,},{158,42,12,157,85,1,0,},},{{195,20,10,168,0,0,0,},
{181,155,8,181,98,1,0,},},{{183,142,11,160,176,1,0,},{181,29,9,181,101,1,0,},},{{194,136,11,168,204,0,0,},{168,138,11,191,112,0,0,},},{{186,72,9,185,235,1,0,},},
{{169,94,8,188,55,1,0,},{157,177,11,157,21,1,0,},},{{160,135,8,174,60,1,0,},},{{168,61,12,211,195,0,0,},},{{167,148,11,160,21,0,0,},},{{157,179,12,209,45,59,1,},
{157,38,12,157,39,1,0,},},{{196,12,11,168,0,0,0,},{157,53,13,220,50,59,1,},},{{190,224,11,169,207,1,0,},{158,180,11,157,73,1,0,},},{{168,18,9,174,176,0,0,},
{161,23,13,220,50,67,1,},},{{184,198,8,185,60,1,0,},{163,20,8,174,148,1,0,},},{{185,202,8,185,98,1,0,},{162,8,12,160,132,1,0,},{160,8,13,220,50,65,1,},},
{0},{{199,140,11,160,204,0,0,},{188,88,8,188,95,1,0,},{168,255,15,162,2,68,1,},},{{184,202,8,185,60,1,0,},{161,159,8,181,60,1,0,},},{{186,70,9,185,235,1,0,},
{169,214,8,188,60,1,0,},},{{160,140,12,209,45,65,1,},},{{188,84,8,188,95,1,0,},{167,136,11,160,21,0,0,},{161,29,8,181,55,1,0,},},{{183,147,11,230,180,1,0,},
{163,14,13,220,143,65,1,},},{{159,180,12,209,192,59,1,},},{{162,146,8,174,153,1,0,},{160,142,11,160,21,1,0,},},{{222,96,5,205,0,0,0,},{168,137,12,209,152,64,1,},},
{{168,7,12,160,145,0,0,},},{{196,60,11,168,0,0,0,},{157,47,12,157,39,1,0,},},{{192,186,11,232,206,0,0,},{167,137,11,160,21,0,0,},},{{194,137,11,168,204,0,0,},
{168,139,11,160,124,0,0,},{158,171,12,209,89,59,1,},},{{161,155,12,209,45,67,1,},},{{181,158,12,209,89,67,1,},{157,176,11,208,7,1,0,},},{{188,83,9,188,101,1,0,},
{162,7,12,160,132,1,0,},},{{168,14,13,220,158,64,1,},},{{190,65,12,169,219,1,0,},{167,143,11,160,21,0,0,},{160,15,8,174,55,1,0,},},{{184,197,11,184,21,1,0,},
{167,142,11,160,21,0,0,},},{{157,50,9,158,65,1,0,},},{{167,134,8,174,74,0,0,},{158,181,11,157,73,1,0,},},{0},{0},{{169,219,11,169,21,1,0,},{157,54,9,158,65,1,0,},},
{{174,143,12,209,89,65,1,},{160,137,8,174,60,1,0,},},{{199,143,11,160,204,0,0,},{188,89,13,220,92,83,1,},{162,148,8,174,153,1,0,},},{{186,199,11,184,207,1,0,},},
{{183,135,12,209,192,65,1,},{160,11,9,174,65,1,0,},{157,40,12,157,39,1,0,},},{{174,139,12,209,89,65,1,},{160,141,8,174,60,1,0,},},{0},{{186,197,12,209,223,113,1,},
{159,49,8,158,198,1,0,},},{{160,15,9,174,65,1,0,},{157,44,12,157,39,1,0,},},{{183,11,8,174,198,1,0,},},{{167,137,12,209,53,64,1,},{158,59,13,220,92,59,1,},},
{{190,213,12,209,223,83,1,},{185,71,8,185,95,1,0,},{161,164,9,181,70,1,0,},},{{167,12,13,220,60,64,1,},},{{224,82,5,201,0,0,0,},{168,8,8,174,164,0,0,},
{162,2,12,197,166,1,0,},},{{167,18,9,174,81,0,0,},{167,14,13,220,60,64,1,},},{{188,211,8,188,98,1,0,},{161,154,8,181,60,1,0,},},{{186,202,8,185,232,1,0,},
{159,187,12,209,192,59,1,},},{{181,29,8,181,95,1,0,},{159,170,12,209,192,59,1,},},{{161,34,8,181,55,1,0,},},{{163,9,12,160,132,1,0,},},{{191,135,0,183,0,0,0,},
{184,208,8,185,60,1,0,},{169,94,9,188,65,1,0,},},{{160,18,9,174,65,1,0,},{159,168,11,157,176,1,0,},},{{167,6,13,220,60,64,1,},{160,148,9,174,70,1,0,},},
{{163,5,12,160,132,1,0,},{161,21,13,220,50,67,1,},},{{201,195,11,184,204,0,0,},{169,88,12,169,39,1,0,},{157,38,13,220,50,59,1,},},{{157,53,12,157,39,1,0,},},
{{185,72,9,185,101,1,0,},{158,180,12,209,89,59,1,},},{{181,25,9,181,101,1,0,},{158,165,12,209,89,59,1,},},{{163,20,9,174,158,1,0,},},{{198,157,11,161,204,0,0,},
{162,8,13,220,143,65,1,},{160,8,12,160,39,1,0,},},{{185,68,9,185,101,1,0,},{163,255,15,162,1,68,1,},},{{184,72,13,220,50,113,1,},{183,140,12,209,192,65,1,},},
{{188,218,11,169,73,1,0,},{185,197,12,209,89,113,1,},},{{185,196,12,209,89,113,1,},{169,214,9,188,70,1,0,},},{{168,5,13,220,158,64,1,},{167,255,15,162,4,68,1,},},
{{188,193,11,169,73,1,0,},{167,136,8,174,74,0,0,},},{{184,204,12,209,45,113,1,},{163,14,12,160,132,1,0,},{157,171,11,157,21,1,0,},},{0},{{183,133,12,209,192,65,1,},
{162,146,11,160,114,1,0,},},{{188,86,12,169,85,1,0,},{161,31,12,161,39,1,0,},},{0},{{185,204,12,209,89,113,1,},{157,47,13,220,50,59,1,},},{{190,224,8,188,232,1,0,},},
{{168,139,8,174,170,0,0,},},{{182,164,11,161,176,1,0,},{167,2,12,197,93,0,0,},},{{209,212,6,190,0,0,0,},{182,28,13,220,195,67,1,},{181,164,12,209,89,67,1,},},
{{182,29,12,161,188,1,0,},{162,148,12,209,138,65,1,},},{{186,80,12,184,219,1,0,},{168,143,8,174,170,0,0,},},{{190,222,12,209,223,83,1,},{190,65,13,220,226,83,1,},
{161,163,11,225,27,1,0,},},{{190,90,8,188,229,1,0,},},{{196,13,11,168,0,0,0,},{174,148,8,174,98,1,0,},},{{167,134,11,160,21,0,0,},},{{199,137,11,160,204,0,0,},
{184,210,11,184,21,1,0,},},{{185,208,8,185,98,1,0,},{157,180,12,209,45,59,1,},},{{182,21,12,161,188,1,0,},{159,173,12,209,192,59,1,},},{{182,28,8,181,198,1,0,},
{158,177,8,158,98,1,0,},},{{190,216,11,169,207,1,0,},{188,89,12,169,85,1,0,},{161,36,12,161,39,1,0,},},{{205,222,11,169,204,0,0,},},{{183,135,11,160,176,1,0,},
{162,15,13,220,143,65,1,},},{{227,220,0,222,0,0,0,},{160,141,11,160,21,1,0,},},};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {0};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (dfa_state >> 0) & 127;
    key.bytes[1] |= (dfa_symbol << 7) & 255;
    key.bytes[2] |= (dfa_symbol >> 1) & 15;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.actions |= ((uint32_t)bytes[4] & 255) << 0;
    entry.actions |= ((uint32_t)bytes[5] & 1) << 8;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 1;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 1) << 7;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 3; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 3)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 163;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 25)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 64) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    free_token_runs(&run);
    return construct_finish(&construct_state, offset);
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        switch (text[1]) {
        case 108:
            if (text[2] == 105 && text[3] == 110 && text[4] == 101 && text[5] == 45 && text[6] == 99 && text[7] == 111 && text[8] == 109 && text[9] == 109 && text[10] == 101 && text[11] == 110 && text[12] == 116 && text[13] == 45 && text[14] == 116 && text[15] == 111 && text[16] == 107 && text[17] == 101 && text[18] == 110) {
                *end_token = false;
                *token = 20;
                return 19;
            } else {
                return 0;
            }
        case 111:
            if (text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
                *end_token = false;
                *token = 2;
                return 10;
            } else {
                return 0;
            }
        case 116:
            if (text[2] == 111 && text[3] == 107 && text[4] == 101 && text[5] == 110) {
                *end_token = false;
                *token = 22;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 21;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 8;
        case 2: return 10;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 11;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 11;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 11;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 11;
        case 1: return 11;
        case 2: return 11;
        case 3: return 12;
        case 4: return 7;
        case 5: return 12;
        case 6: return 12;
        case 7: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 12;
        case 1: return 9;
        default: break;
        }
        break;
    case 9:
        switch (slot) {
        case 0: return 12;
        default: break;
        }
        break;
    case 10:
        switch (slot) {
        case 0: return 11;
        case 1: return 12;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 3;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 8;
    case 8: return 2;
    case 9: return 1;
    case 10: return 2;
    case 11: return 0;
    case 12: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 7;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 12:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

