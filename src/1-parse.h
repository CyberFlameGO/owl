// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "owl-parser.h"

#ifndef _OWL_PARSER_H_
#define _OWL_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Explicitly create a tree with particular options.
struct owl_tree_options {
    // Exactly one of string or file should be set.
    const char *string;
    FILE *file;
};
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file was NULL.
    ERROR_INVALID_FILE,

    // The options passed to owl_tree_create_with_options weren't valid --
    // both file and string were specified at the same time or neither were.
    ERROR_INVALID_OPTIONS,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_EXACT = 1,
    PARSED_IDENT,
    PARSED_RANGE,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_AT_LEAST,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_REPETITION,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct owl_ref rule;
    struct owl_ref comment_token;
    struct owl_ref custom_token;
    struct owl_ref whitespace;
};

struct parsed_rule {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref body;
};

struct parsed_body {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
    struct owl_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct owl_ref fixity;
    struct owl_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref identifier;
    struct owl_ref exception;
    struct owl_ref rename;
    struct owl_ref string;
    struct owl_ref expr;
    struct owl_ref begin_token;
    struct owl_ref end_token;
    struct owl_ref repetition;
    struct owl_ref operand;
};

struct parsed_repetition {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref begin;
    struct owl_ref end;
};

struct parsed_comment_token {
    struct source_range range;
    struct owl_ref string;
    struct owl_ref comment_token_v1;
};

struct parsed_comment_token_v1 {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_custom_token {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref string;
};

struct parsed_whitespace {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_integer {
    struct source_range range;
    uint64_t integer;
};

struct parsed_grammar parsed_grammar_get(struct owl_ref);
struct parsed_rule parsed_rule_get(struct owl_ref);
struct parsed_body parsed_body_get(struct owl_ref);
struct parsed_operators parsed_operators_get(struct owl_ref);
struct parsed_fixity parsed_fixity_get(struct owl_ref);
struct parsed_assoc parsed_assoc_get(struct owl_ref);
struct parsed_operator parsed_operator_get(struct owl_ref);
struct parsed_expr parsed_expr_get(struct owl_ref);
struct parsed_repetition parsed_repetition_get(struct owl_ref);
struct parsed_comment_token parsed_comment_token_get(struct owl_ref);
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref);
struct parsed_custom_token parsed_custom_token_get(struct owl_ref);
struct parsed_whitespace parsed_whitespace_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);
struct parsed_integer parsed_integer_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_identifier_token_offset;
    size_t next_string_token_offset;
    size_t next_integer_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
            .custom_token.empty = true,
            .whitespace.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 9;
    result.comment_token.empty = result.comment_token._offset == 0;
    result.custom_token._tree = ref._tree;
    result.custom_token._offset = read_tree(&offset, ref._tree);
    result.custom_token._type = 11;
    result.custom_token.empty = result.custom_token._offset == 0;
    result.whitespace._tree = ref._tree;
    result.whitespace._offset = read_tree(&offset, ref._tree);
    result.whitespace._type = 12;
    result.whitespace.empty = result.whitespace._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 13;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 13;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 13;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .repetition.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 13;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 13;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 13;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 14;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 14;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 14;
    result.end_token.empty = result.end_token._offset == 0;
    result.repetition._tree = ref._tree;
    result.repetition._offset = read_tree(&offset, ref._tree);
    result.repetition._type = 8;
    result.repetition.empty = result.repetition._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_repetition parsed_repetition_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_repetition){
            .begin.empty = true,
            .end.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_repetition result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.begin._tree = ref._tree;
    result.begin._offset = read_tree(&offset, ref._tree);
    result.begin._type = 15;
    result.begin.empty = result.begin._offset == 0;
    result.end._tree = ref._tree;
    result.end._offset = read_tree(&offset, ref._tree);
    result.end._type = 15;
    result.end.empty = result.end._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_comment_token){
            .string.empty = true,
            .comment_token_v1.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 14;
    result.string.empty = result.string._offset == 0;
    result.comment_token_v1._tree = ref._tree;
    result.comment_token_v1._offset = read_tree(&offset, ref._tree);
    result.comment_token_v1._type = 10;
    result.comment_token_v1.empty = result.comment_token_v1._offset == 0;
    return result;
}
struct parsed_comment_token_v1 parsed_comment_token_v1_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_comment_token_v1){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token_v1 result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 14;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_custom_token parsed_custom_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_custom_token){
            .identifier.empty = true,
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_custom_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 13;
    result.identifier.empty = result.identifier._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 14;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_whitespace parsed_whitespace_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 12) {
        return (struct parsed_whitespace){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_whitespace result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 14;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 13) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 14) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .string = string,
        .length = string_length,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_integer parsed_integer_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 15) {
        return (struct parsed_integer){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_integer result = {
        .integer = read_tree(&token_offset, ref._tree),
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_REPETITION);
            break;
        case 8:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 9:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        write_tree(tree, slots[8]);
        break;
    }
    case 8: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_EXACT);
            break;
        case 1:
            write_tree(tree, PARSED_AT_LEAST);
            break;
        case 2:
            write_tree(tree, PARSED_RANGE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 9: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 10: {
        write_tree(tree, slots[0]);
        break;
    }
    case 11: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 12: {
        write_tree(tree, slots[0]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 13: {
        size_t offset = tree->next_identifier_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_identifier_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 14: {
        size_t offset = tree->next_string_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_string_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 15: {
        size_t offset = tree->next_integer_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_integer_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_OPTIONS:
        fprintf(stderr, "invalid options\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_repetition_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_whitespace_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_integer_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        parsed_custom_token_print(tree, it.custom_token, "custom_token", indent + 1);
        parsed_whitespace_print(tree, it.whitespace, "whitespace", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_REPETITION:
            printf(" : REPETITION");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_repetition_print(tree, it.repetition, "repetition", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_repetition_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_repetition it = parsed_repetition_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("repetition");
        if (strcmp("repetition", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_EXACT:
            printf(" : EXACT");
            break;
        case PARSED_AT_LEAST:
            printf(" : AT_LEAST");
            break;
        case PARSED_RANGE:
            printf(" : RANGE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_integer_print(tree, it.begin, "begin", indent + 1);
        parsed_integer_print(tree, it.end, "end", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_comment_token_v1_print(tree, it.comment_token_v1, "comment_token_v1", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_v1_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token_v1 it = parsed_comment_token_v1_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token_v1");
        if (strcmp("comment_token_v1", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_custom_token it = parsed_custom_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("custom_token");
        if (strcmp("custom_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_whitespace_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_whitespace it = parsed_whitespace_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("whitespace");
        if (strcmp("whitespace", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_integer_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_integer it = parsed_integer_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("integer");
        if (strcmp("integer", slot_name))
            printf("@%s", slot_name);
        printf(" - %" PRIu64, it.integer);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, owl_tree_root_ref(tree), "grammar", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(owl_tree_root_ref(tree));
}
#define ESCAPE_CHAR(c, info) ((c) == 'b' ? '\b' : (c) == 'f' ? '\f' : (c) == 'n' ? '\n' : (c) == 'r' ? '\r' : (c) == 't' ? '\t' : (c))
#define IGNORE_TOKEN_WRITE(...)
#define IGNORE_TOKEN_READ(...) (0)
#define CUSTOM_TOKEN_DATA(...)
#define IF_IDENTIFIER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define INTEGER_TOKEN_DATA(name) uint64_t name
#define IF_INTEGER_TOKEN(cond, ...) if (cond) __VA_ARGS__
#define NUMBER_TOKEN_DATA(...)
#define IF_NUMBER_TOKEN(...) if (0) { /* no number tokens */  }
#define IF_STRING_TOKEN(cond, ...) if (cond) __VA_ARGS__
static size_t read_whitespace(const char *text, void *info);
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void write_integer_token(size_t offset, size_t length, uint64_t integer, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_integer_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    write_tree(tree, integer);
    tree->next_integer_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool char_ends_identifier(char c) {
    return c != '-';
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        size_t whitespace_length = read_whitespace(text + offset, tokenizer->info);
        if (whitespace_length > 0) {
            whitespace += whitespace_length;
            offset += whitespace_length;
            continue;
        }
        uint32_t token = -1;
        CUSTOM_TOKEN_DATA(custom_data);
        uint64_t integer = 0;
        NUMBER_TOKEN_DATA(number);
        bool is_token = false;
        bool end_token = false;
        bool custom_token = false;
        bool comment = false;
        bool custom_whitespace = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 4294967295U) comment = true;
        }
        if (IGNORE_TOKEN_READ(&token, &token_length, text + offset, &custom_whitespace, &custom_data, tokenizer->info)) {
            is_token = true;
            custom_token = true;
            end_token = false;
            comment = false;
        }
        IF_INTEGER_TOKEN(char_is_numeric(c), {
            size_t integer_offset = offset;
            integer = 0;
            bool overflow = false;
            while (char_is_numeric(text[integer_offset])) {
                uint64_t last = integer;
                integer *= 10;
                integer += text[integer_offset] - '0';
                if (integer < last) {
                    overflow = true;
                    break;
                }
                integer_offset++;
            }
            if (!overflow && integer_offset - offset > token_length) {
                token_length = integer_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 29;
            }
        }
        ) IF_NUMBER_TOKEN(char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1])), {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 4294967295U;
            }
        }
        ) else IF_STRING_TOKEN(c == '\'' || c == '"', {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    custom_whitespace = false;
                    token = 28;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        ) else IF_IDENTIFIER_TOKEN(char_starts_identifier(c), {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            while (!char_ends_identifier(text[identifier_offset - 1])) identifier_offset--;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                custom_whitespace = false;
                token = 27;
            }
        }
        ) if (custom_whitespace) {
            whitespace += token_length;
            offset += token_length;
            continue;
        }
        else if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 4294967295U) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 27) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 29) {
            write_integer_token(offset, token_length, integer, tokenizer->info);
        }
        else if (token == 4294967295U) {
            IGNORE_TOKEN_WRITE(offset, token_length, number, tokenizer->info);
        }
        else if (token == 28) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = ESCAPE_CHAR(text[content_offset + i], tokenizer->info);
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        else if (custom_token) {
            IGNORE_TOKEN_WRITE(offset, token_length, token, custom_data, tokenizer->info);
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity = 0;
            int precedence = 0;
            do {
                int local = 0;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    size_t top_index;
    size_t capacity;
    int error;
};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[129])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_105(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    default: top->cont->error = 1; return;
    }
}
static void state_func_5(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_118(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 30;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_108(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 32;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_18(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 21; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_73(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 31;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_35(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 38; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_59(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 62; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_19(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 20; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_21(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 22; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_11(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 23; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_36(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 37; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_38(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 39; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_51(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 57; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_60(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 61; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_62(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 63; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 65; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 28: top->state = 67; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 28: top->state = 68; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_124(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 127; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_125(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 126; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_127(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 128; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_92(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 95; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_89(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 73; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_93(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 94; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_95(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 96; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_82(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 85; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_87(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 88; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_90(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 29: top->state = 91; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_109(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 112; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_110(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 111; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_112(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 113; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_71(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 28: top->state = 97; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_24(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 3: top->state = 40; return;
    case 4: top->state = 41; return;
    case 5: top->state = 42; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_85(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 17: top->state = 86; return;
    case 19: top->state = 87; return;
    case 21: top->state = 73; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_76(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 17: top->state = 89; return;
    case 19: top->state = 90; return;
    case 21: top->state = 73; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_69(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(7 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 12: top->state = 70; return;
    case 14: top->state = 71; return;
    case 20: top->state = 72; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_42(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 6: top->state = 43; return;
    case 7: top->state = 44; return;
    case 8: top->state = 45; return;
    case 9: top->state = 46; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_6(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 7; return;
    case 28: top->state = 8; return;
    case 30: top->state = 9; return;
    case 32: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_32(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 33; return;
    case 28: top->state = 26; return;
    case 30: top->state = 27; return;
    case 32: top->state = 28; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_40(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 47; return;
    case 28: top->state = 48; return;
    case 30: top->state = 49; return;
    case 32: top->state = 50; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_70(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 114; return;
    case 28: top->state = 115; return;
    case 30: top->state = 116; return;
    case 32: top->state = 117; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_83(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 74; return;
    case 28: top->state = 75; return;
    case 30: top->state = 77; return;
    case 32: top->state = 78; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_97(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 27: top->state = 98; return;
    case 28: top->state = 99; return;
    case 30: top->state = 100; return;
    case 32: top->state = 101; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_67(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 5; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_64(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 5; return;
    case 28: top->state = 64; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_65(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 5; return;
    case 28: top->state = 66; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_72(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 21: top->state = 73; return;
    case 27: top->state = 74; return;
    case 28: top->state = 75; return;
    case 29: top->state = 76; return;
    case 30: top->state = 77; return;
    case 32: top->state = 78; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_23(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 24; return;
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 25; return;
    case 28: top->state = 26; return;
    case 30: top->state = 27; return;
    case 32: top->state = 28; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_57(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 24; return;
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 58; return;
    case 28: top->state = 48; return;
    case 30: top->state = 49; return;
    case 32: top->state = 50; return;
    default:
        bracket_entry_state(run, top, token_index, 5);
        return;
    }
}
static void state_func_107(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 102; return;
    case 17: top->state = 103; return;
    case 18: top->state = 104; return;
    case 22: top->state = 105; return;
    case 27: top->state = 98; return;
    case 28: top->state = 106; return;
    case 30: top->state = 100; return;
    case 31: top->state = 107; return;
    case 32: top->state = 101; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_30(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 16: top->state = 29; return;
    case 17: top->state = 30; return;
    case 18: top->state = 31; return;
    case 22: top->state = 32; return;
    case 27: top->state = 33; return;
    case 28: top->state = 26; return;
    case 30: top->state = 27; return;
    case 31: top->state = 34; return;
    case 32: top->state = 28; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_48(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 51; return;
    case 16: top->state = 52; return;
    case 17: top->state = 53; return;
    case 18: top->state = 54; return;
    case 22: top->state = 55; return;
    case 27: top->state = 47; return;
    case 28: top->state = 48; return;
    case 30: top->state = 49; return;
    case 31: top->state = 56; return;
    case 32: top->state = 50; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_115(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 13: top->state = 118; return;
    case 16: top->state = 119; return;
    case 17: top->state = 120; return;
    case 18: top->state = 121; return;
    case 22: top->state = 122; return;
    case 27: top->state = 114; return;
    case 28: top->state = 115; return;
    case 30: top->state = 116; return;
    case 31: top->state = 123; return;
    case 32: top->state = 117; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_99(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 15: top->state = 108; return;
    case 16: top->state = 102; return;
    case 17: top->state = 103; return;
    case 18: top->state = 104; return;
    case 22: top->state = 105; return;
    case 27: top->state = 98; return;
    case 28: top->state = 106; return;
    case 30: top->state = 100; return;
    case 31: top->state = 107; return;
    case 32: top->state = 101; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_75(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 79; return;
    case 17: top->state = 80; return;
    case 18: top->state = 81; return;
    case 19: top->state = 82; return;
    case 21: top->state = 73; return;
    case 22: top->state = 83; return;
    case 27: top->state = 74; return;
    case 28: top->state = 75; return;
    case 30: top->state = 77; return;
    case 31: top->state = 84; return;
    case 32: top->state = 78; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_98(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(4 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 109; return;
    case 11: top->state = 110; return;
    case 16: top->state = 102; return;
    case 17: top->state = 103; return;
    case 18: top->state = 104; return;
    case 22: top->state = 105; return;
    case 27: top->state = 98; return;
    case 28: top->state = 106; return;
    case 30: top->state = 100; return;
    case 31: top->state = 107; return;
    case 32: top->state = 101; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_39(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 10: top->state = 35; return;
    case 11: top->state = 36; return;
    case 16: top->state = 29; return;
    case 17: top->state = 30; return;
    case 18: top->state = 31; return;
    case 22: top->state = 32; return;
    case 27: top->state = 33; return;
    case 28: top->state = 26; return;
    case 30: top->state = 27; return;
    case 31: top->state = 34; return;
    case 32: top->state = 28; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_47(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 51; return;
    case 10: top->state = 59; return;
    case 11: top->state = 60; return;
    case 16: top->state = 52; return;
    case 17: top->state = 53; return;
    case 18: top->state = 54; return;
    case 22: top->state = 55; return;
    case 27: top->state = 47; return;
    case 28: top->state = 48; return;
    case 30: top->state = 49; return;
    case 31: top->state = 56; return;
    case 32: top->state = 50; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_128(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 124; return;
    case 11: top->state = 125; return;
    case 13: top->state = 118; return;
    case 16: top->state = 119; return;
    case 17: top->state = 120; return;
    case 18: top->state = 121; return;
    case 22: top->state = 122; return;
    case 27: top->state = 114; return;
    case 28: top->state = 115; return;
    case 30: top->state = 116; return;
    case 31: top->state = 123; return;
    case 32: top->state = 117; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_25(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 11; return;
    case 10: top->state = 35; return;
    case 11: top->state = 36; return;
    case 16: top->state = 29; return;
    case 17: top->state = 30; return;
    case 18: top->state = 31; return;
    case 22: top->state = 32; return;
    case 27: top->state = 33; return;
    case 28: top->state = 26; return;
    case 30: top->state = 27; return;
    case 31: top->state = 34; return;
    case 32: top->state = 28; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_58(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 51; return;
    case 10: top->state = 59; return;
    case 11: top->state = 60; return;
    case 16: top->state = 52; return;
    case 17: top->state = 53; return;
    case 18: top->state = 54; return;
    case 22: top->state = 55; return;
    case 27: top->state = 47; return;
    case 28: top->state = 48; return;
    case 30: top->state = 49; return;
    case 31: top->state = 56; return;
    case 32: top->state = 50; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_74(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 92; return;
    case 11: top->state = 93; return;
    case 16: top->state = 79; return;
    case 17: top->state = 80; return;
    case 18: top->state = 81; return;
    case 19: top->state = 82; return;
    case 21: top->state = 73; return;
    case 22: top->state = 83; return;
    case 27: top->state = 74; return;
    case 28: top->state = 75; return;
    case 30: top->state = 77; return;
    case 31: top->state = 84; return;
    case 32: top->state = 78; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_14(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 22: top->state = 15; return;
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 16; return;
    case 28: top->state = 8; return;
    case 30: top->state = 9; return;
    case 31: top->state = 17; return;
    case 32: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 11; return;
    case 10: top->state = 18; return;
    case 11: top->state = 19; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 22: top->state = 15; return;
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 16; return;
    case 28: top->state = 8; return;
    case 30: top->state = 9; return;
    case 31: top->state = 17; return;
    case 32: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void state_func_16(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 6; return;
    case 1: top->state = 11; return;
    case 10: top->state = 18; return;
    case 11: top->state = 19; return;
    case 16: top->state = 12; return;
    case 17: top->state = 13; return;
    case 18: top->state = 14; return;
    case 22: top->state = 15; return;
    case 23: top->state = 1; return;
    case 24: top->state = 2; return;
    case 25: top->state = 3; return;
    case 26: top->state = 4; return;
    case 27: top->state = 16; return;
    case 28: top->state = 8; return;
    case 30: top->state = 9; return;
    case 31: top->state = 17; return;
    case 32: top->state = 10; return;
    default:
        bracket_entry_state(run, top, token_index, 7);
        return;
    }
}
static void (*state_funcs[129])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_67, state_func_1, state_func_2, state_func_3,
    state_func_64, state_func_5, state_func_6, state_func_22,
    state_func_14, state_func_14, state_func_14, state_func_11,
    state_func_14, state_func_14, state_func_14, state_func_6,
    state_func_16, state_func_14, state_func_18, state_func_19,
    state_func_14, state_func_21, state_func_22, state_func_23,
    state_func_24, state_func_25, state_func_30, state_func_30,
    state_func_30, state_func_30, state_func_30, state_func_30,
    state_func_32, state_func_39, state_func_30, state_func_35,
    state_func_36, state_func_30, state_func_38, state_func_39,
    state_func_40, state_func_40, state_func_42, state_func_40,
    state_func_40, state_func_40, state_func_40, state_func_47,
    state_func_48, state_func_48, state_func_48, state_func_51,
    state_func_48, state_func_48, state_func_48, state_func_40,
    state_func_48, state_func_57, state_func_58, state_func_59,
    state_func_60, state_func_48, state_func_62, state_func_47,
    state_func_64, state_func_65, state_func_65, state_func_67,
    state_func_67, state_func_69, state_func_70, state_func_71,
    state_func_72, state_func_73, state_func_74, state_func_75,
    state_func_76, state_func_75, state_func_75, state_func_75,
    state_func_75, state_func_75, state_func_82, state_func_83,
    state_func_75, state_func_85, state_func_89, state_func_87,
    state_func_89, state_func_89, state_func_90, state_func_89,
    state_func_92, state_func_93, state_func_75, state_func_95,
    state_func_74, state_func_97, state_func_98, state_func_99,
    state_func_107, state_func_107, state_func_107, state_func_107,
    state_func_107, state_func_105, state_func_99, state_func_107,
    state_func_108, state_func_109, state_func_110, state_func_107,
    state_func_112, state_func_98, state_func_128, state_func_115,
    state_func_115, state_func_115, state_func_118, state_func_115,
    state_func_115, state_func_115, state_func_70, state_func_115,
    state_func_124, state_func_125, state_func_115, state_func_127,
    state_func_128,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    struct fill_run_continuation *cont = top->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        top = &cont->stack[cont->top_index];
    } else
        top++;
    top->cont = cont;
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 69;
    state_func_69(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

static void free_token_runs(struct owl_token_run **run) {
    while (*run) {
        struct owl_token_run *prev = (*run)->prev;
        free(*run);
        *run = prev;
    }
}
static void parse_string(struct owl_tree *tree, const char *string) {
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            free_token_runs(&token_run);
            return;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    switch (top.state) {
    case 0:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 20:
    case 22:
    case 23:
    case 57:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_string(const char *string) {
    return owl_tree_create_with_options((struct owl_tree_options){ .string = string });
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    return owl_tree_create_with_options((struct owl_tree_options){ .file = file });
}
struct owl_tree *owl_tree_create_with_options(struct owl_tree_options options) {
    if (!options.file == !options.string)
        return owl_tree_create_with_error(ERROR_INVALID_OPTIONS);
    if (options.file) {
        char *str = 0;
        size_t len = 32;
        size_t off = 0;
        while (true) {
            len = len * 3 / 2;
            char *s = realloc(str, len);
            if (!s) {
                free(str);
                return 0;
            }
            str = s;
            off += fread(str + off, 1, len - off, options.file);
            if (off < len) {
                str[off] = '\0';
                break;
            }
        }
        options.string = str;
    }
    struct owl_tree *tree = owl_tree_create_empty();
    if (options.file)
        tree->owns_string = true;
    parse_string(tree, options.string);
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,4096,0,4096,4096,32768,32769,16385,0,4096,4096,32768,32769,32770,32769,16385,0,4096,4096,32768,32769,36864,40960,16384,0,4096,
4096,32768,32769,36864,40960,16385,0,4096,4096,32768,32769,36864,40960,16386,0,4096,4096,32768,32769,36864,40961,16387,0,4096,4096,32768,32769,36864,40962,0,
4096,4096,32768,32769,36864,40963,0,4096,4096,32768,32769,36864,45060,0,4096,4096,32768,32769,36864,45061,0,4096,4096,32768,32769,36864,45062,0,4096,4096,
32768,32769,36864,45063,0,4096,4096,32769,16384,0,4096,4096,32769,32769,16384,0,4096,4096,32770,16384,0,4096,4096,32770,16385,0,4096,4096,32771,0,
4096,4096,32771,16384,0,4096,16385,0,4096,32768,32769,16385,0,4096,32768,32769,32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,
36864,40960,16385,0,4096,32768,32769,36864,40960,16386,0,4096,32768,32769,36864,40961,16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,
4096,32768,32769,36864,45060,0,4096,32768,32769,36864,45061,0,4096,32768,32769,36864,45062,0,4096,32768,32769,36864,45063,0,4096,32769,16384,0,4096,32769,
32769,16384,0,4096,32770,16384,0,4096,32770,16385,0,4096,32770,32769,16385,0,4096,32771,0,4096,32771,16384,0,16384,0,16385,0,16389,0,16390,
0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,0,20480,8192,4096,32768,12289,0,20480,8192,4096,32768,12290,32768,12288,0,20480,8192,
4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,0,20480,8192,4096,32768,12290,32768,12291,0,20480,8192,4096,32769,16385,0,20480,8192,
16385,0,20480,8192,16389,0,20480,45064,24576,40960,16384,0,20480,45064,24576,40960,16385,0,20480,45064,24576,40960,16386,0,20480,45064,24576,40961,16387,0,
20480,45064,24576,40962,0,20480,45064,24576,40963,0,20480,45064,24576,45060,0,20480,45064,24576,45061,0,20480,45064,24576,45062,0,20480,45064,24576,45063,0,
20480,45065,0,24576,40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,0,24576,40962,0,24576,40963,0,24576,45060,0,24576,45061,
0,24576,45062,0,24576,45063,0,32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,16384,0,32768,32769,36864,40960,16385,0,32768,
32769,36864,40960,16386,0,32768,32769,36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,32768,32769,36864,45060,0,32768,32769,36864,45061,
0,32768,32769,36864,45062,0,32768,32769,36864,45063,0,32769,16384,0,32769,32769,16384,0,32770,16384,0,32770,16385,0,32771,0,32771,16384,0,32775,
12288,16384,0,32775,12289,0,32775,12290,16385,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,36864,40961,16387,0,36864,40962,0,36864,
40963,0,36864,45060,0,36864,45061,0,36864,45062,0,36864,45063,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,0,36868,40961,16387,0,
36868,40962,0,36868,40963,0,36868,45060,0,36868,45061,0,36868,45062,0,36868,45063,0,};
static const uint8_t action_table[1024][4][7] = {
{{1,47,46,207,0,0,0,},{232,206,60,14,57,236,6,},{212,114,56,206,238,2,0,},},{{10,235,54,216,210,1,0,},{1,45,46,207,0,0,0,},{220,20,60,14,245,171,6,},
{207,114,52,207,196,1,0,},},{{250,168,34,251,74,4,0,},{218,14,60,14,247,170,6,},{212,110,64,31,253,114,6,},},{{18,117,20,2,1,0,0,},{11,149,54,215,210,1,0,},
{253,0,63,5,21,235,7,},},{{14,229,26,252,0,0,0,},{253,246,54,216,214,2,0,},{232,226,56,221,48,4,0,},{206,112,62,5,199,162,6,},},{{220,20,36,218,12,4,0,},
{216,238,62,5,199,234,7,},},{{252,238,56,216,48,4,0,},{250,148,54,215,24,4,0,},{215,150,54,215,100,2,0,},},{{3,9,50,207,0,0,0,},{217,62,64,31,251,179,6,},
{213,32,54,213,100,2,0,},{209,32,62,5,177,208,6,},},{{253,140,60,14,247,194,6,},{226,208,62,5,21,19,7,},{220,18,56,213,236,3,0,},{218,26,60,14,247,170,6,},},
{{15,169,38,250,4,0,0,},{219,78,64,31,253,178,6,},{212,104,32,212,2,3,0,},{208,12,60,14,95,171,6,},},{{216,246,32,253,168,2,0,},},{{251,192,34,251,8,3,0,},
{212,108,64,31,253,114,6,},{210,16,32,218,114,3,0,},},{{215,150,34,251,178,2,0,},{206,106,44,212,208,2,0,},},{{250,156,64,31,63,188,6,},{215,158,64,31,159,186,6,},
{210,44,32,218,114,3,0,},},{0},{{1,33,46,207,0,0,0,},{213,14,32,218,168,2,0,},{208,132,56,20,175,3,0,},},{{217,52,60,14,245,179,6,},{212,104,34,212,8,3,0,},},
{{253,234,56,216,238,2,0,},{212,100,60,14,247,114,6,},{206,92,64,31,159,114,6,},},{{31,199,30,12,1,0,0,},{1,27,46,207,0,0,0,},{252,0,55,216,24,4,0,},},
{{1,9,46,207,0,0,0,},{209,26,52,207,232,0,0,},},{{226,224,54,48,223,2,0,},{218,34,60,14,247,170,6,},{211,104,36,212,12,4,0,},},{{232,196,60,14,57,236,6,},
{226,194,54,221,214,2,0,},{213,26,64,31,159,170,6,},},{{252,252,34,253,74,4,0,},{218,14,36,218,14,3,0,},},{{253,238,64,31,253,194,6,},{209,30,56,213,90,0,0,},},
{{219,58,62,5,21,219,6,},{206,84,18,35,57,2,0,},},{{8,207,54,221,210,1,0,},{232,200,56,221,48,4,0,},{226,206,34,226,8,3,0,},{208,30,54,213,46,3,0,},},
{{253,240,36,253,14,3,0,},{232,204,34,226,74,4,0,},{206,122,64,31,159,114,6,},},{{221,226,36,226,188,2,0,},{218,44,60,14,247,170,6,},{215,154,64,31,159,186,6,},},
{{11,155,54,215,210,1,0,},{226,202,36,226,14,3,0,},{213,16,64,31,159,170,6,},},{{14,231,26,252,0,0,0,},{226,214,34,226,8,3,0,},{221,226,32,226,168,2,0,},
{212,116,36,212,14,3,0,},},{{215,168,64,31,159,186,6,},{207,22,54,254,0,1,0,},},{{252,232,60,14,57,196,6,},{220,14,34,218,6,4,0,},{219,52,62,5,21,219,6,},},
{{250,150,32,251,68,4,0,},{215,148,32,251,168,2,0,},{209,24,56,213,90,0,0,},},{{25,229,22,10,1,0,0,},{252,232,64,31,63,196,6,},},{{214,60,62,5,199,218,6,},
{208,14,56,213,82,3,0,},},{{218,20,36,218,14,3,0,},},{{250,158,32,251,68,4,0,},{215,156,32,251,168,2,0,},{209,12,60,14,107,168,6,},},{{253,252,62,5,21,235,7,},
{219,72,54,19,231,2,0,},{213,14,44,218,208,2,0,},},{{250,154,64,31,63,188,6,},{213,12,64,31,159,170,6,},{210,46,52,207,180,3,0,},},{{218,28,36,218,14,3,0,},
{210,102,54,13,35,3,0,},{207,26,64,31,93,169,6,},},{{250,154,60,14,57,188,6,},{209,38,54,21,75,0,0,},},{{219,64,54,214,214,2,0,},{217,50,56,214,236,3,0,},},
{{251,166,54,215,214,2,0,},{219,66,34,219,8,3,0,},{214,52,54,214,100,2,0,},{210,20,62,5,145,211,6,},},{{1,25,46,207,0,0,0,},{218,24,56,213,238,2,0,},
{211,122,32,212,0,4,0,},{206,104,64,31,159,114,6,},},{{17,95,22,2,1,0,0,},{15,163,38,250,4,0,0,},{213,20,60,14,149,170,6,},},{{219,58,60,14,247,178,6,},
{206,100,32,212,168,2,0,},{206,94,34,212,178,2,0,},},{{232,198,56,221,48,4,0,},{212,122,60,14,247,114,6,},},{{10,231,54,216,210,1,0,},{210,28,36,218,134,3,0,},},
{{7,75,54,214,210,1,0,},{213,24,56,213,136,2,0,},},{{252,238,54,216,24,4,0,},{217,54,36,219,12,4,0,},},{{232,202,60,14,57,236,6,},{217,52,32,219,0,4,0,},
{208,34,36,218,134,3,0,},},{{10,239,54,216,210,1,0,},{220,16,60,14,245,171,6,},{213,34,44,218,208,2,0,},},{{6,17,54,213,210,1,0,},{215,188,56,215,136,2,0,},
{213,28,36,218,188,2,0,},},{{6,19,54,213,210,1,0,},{218,12,64,31,253,170,6,},{215,162,36,251,188,2,0,},},{{4,137,54,207,210,1,0,},{253,242,54,216,214,2,0,},
{250,166,60,14,57,188,6,},{206,116,62,5,199,162,6,},},{{250,168,64,31,63,188,6,},{216,234,62,5,199,234,7,},{210,6,54,3,169,3,0,},},{{252,234,32,253,68,4,0,},
{207,20,64,31,93,169,6,},{207,16,52,207,196,1,0,},},{{253,242,64,31,253,194,6,},{250,188,56,215,48,4,0,},{208,38,54,21,71,3,0,},},{{226,212,62,5,21,19,7,},
{217,68,64,31,251,179,6,},{212,126,32,212,2,3,0,},},{{214,62,62,5,199,218,6,},{208,34,54,213,46,3,0,},},{{253,228,36,253,14,3,0,},{252,238,60,14,57,196,6,},},
{{48,219,2,24,1,0,0,},{226,222,34,226,8,3,0,},{217,74,64,31,251,179,6,},},{{232,222,64,31,63,236,6,},{226,208,34,226,8,3,0,},{214,76,54,34,113,2,0,},},
{{210,32,56,213,82,3,0,},},{{216,246,36,253,188,2,0,},{213,32,64,31,159,170,6,},},{{13,105,2,211,0,0,0,},{219,74,36,219,14,3,0,},{211,90,60,14,245,115,6,},},
{{219,60,36,219,14,3,0,},{211,88,56,206,236,3,0,},{206,106,32,212,168,2,0,},},{{252,140,64,31,63,196,6,},{214,68,44,219,208,2,0,},{210,44,60,14,95,171,6,},},
{{46,153,38,45,1,0,0,},},{{211,120,54,17,229,3,0,},{211,82,60,14,245,115,6,},},{{251,160,32,251,2,3,0,},{218,26,64,31,253,170,6,},{211,80,56,206,236,3,0,},},
{{226,198,54,221,214,2,0,},{220,12,56,213,236,3,0,},{211,86,60,14,245,115,6,},},{{253,232,64,31,253,194,6,},{220,14,36,218,12,4,0,},{213,44,44,218,208,2,0,},},
{{221,220,54,32,125,2,0,},{211,112,54,206,212,3,0,},},{{255,8,56,255,210,1,0,},{219,52,60,14,247,178,6,},{206,98,56,206,136,2,0,},},{{8,203,54,221,210,1,0,},
{220,20,56,213,236,3,0,},{208,26,54,213,46,3,0,},},{{252,0,35,253,74,4,0,},{251,144,60,14,247,186,6,},{218,14,32,218,2,3,0,},},{{211,108,34,212,6,4,0,},
{209,30,60,14,107,168,6,},},{{11,159,54,215,210,1,0,},{251,148,60,14,247,186,6,},{206,84,14,35,25,2,0,},},{{220,28,56,213,236,3,0,},{206,122,34,212,178,2,0,},},
{{12,227,56,232,222,1,0,},{251,168,60,14,247,186,6,},{216,228,62,5,199,234,7,},{212,112,34,212,8,3,0,},},{{252,244,60,14,57,196,6,},{218,44,56,213,238,2,0,},
{211,100,34,212,6,4,0,},},{{253,244,64,31,253,194,6,},},{{226,214,62,5,21,19,7,},{211,126,60,14,245,115,6,},},{{251,160,60,14,247,186,6,},{207,40,52,207,196,1,0,},},
{{252,232,56,216,48,4,0,},{226,200,36,226,14,3,0,},{211,114,60,14,245,115,6,},},{{253,246,34,253,8,3,0,},{226,202,32,226,2,3,0,},{211,112,56,206,236,3,0,},},
{{232,212,56,221,48,4,0,},{219,76,54,34,223,2,0,},{208,44,32,218,114,3,0,},},{{0,115,48,209,0,0,0,},{254,68,2,217,0,0,0,},{208,14,60,14,95,171,6,},},
{{213,34,64,31,159,170,6,},{211,106,60,14,245,115,6,},{209,46,52,207,232,0,0,},},{{251,188,60,14,247,186,6,},{215,156,44,251,208,2,0,},{209,34,54,213,42,0,0,},},
{{4,35,54,207,210,1,0,},{214,56,32,219,168,2,0,},{214,52,44,219,208,2,0,},{211,110,60,14,245,115,6,},},{{226,198,56,221,238,2,0,},{220,44,54,213,212,3,0,},
{216,244,54,216,100,2,0,},},{{252,228,36,253,80,4,0,},{218,28,32,218,2,3,0,},{211,98,60,14,245,115,6,},},{0},{{252,228,32,253,68,4,0,},{218,24,64,31,253,170,6,},
{206,104,56,206,136,2,0,},},{{0,131,48,209,0,0,0,},{232,194,64,31,63,236,6,},{210,130,52,207,180,3,0,},{210,24,62,5,145,211,6,},},{{221,214,36,226,188,2,0,},
{211,122,36,212,12,4,0,},{210,26,62,5,145,211,6,},},{{7,79,54,214,210,1,0,},{220,28,34,218,6,4,0,},{209,24,36,218,162,0,0,},},{{253,232,54,216,214,2,0,},
{212,92,64,31,253,114,6,},{206,94,62,5,199,162,6,},},{{8,197,54,221,210,1,0,},{232,198,60,14,57,236,6,},{212,122,56,206,238,2,0,},{208,20,54,213,46,3,0,},},
{{221,196,54,221,100,2,0,},{210,28,32,218,114,3,0,},},{{221,194,54,221,100,2,0,},{209,28,56,213,90,0,0,},},{{217,46,56,214,236,3,0,},{215,154,56,215,136,2,0,},},
{{232,202,56,221,48,4,0,},{208,24,34,218,124,3,0,},{206,48,6,28,241,1,0,},},{{220,16,56,213,236,3,0,},{216,230,62,5,199,234,7,},{207,34,52,207,196,1,0,},},
{{218,34,32,218,2,3,0,},{215,156,36,251,188,2,0,},{209,16,60,14,107,168,6,},},{{232,206,34,226,74,4,0,},{207,34,64,31,93,169,6,},},{{254,60,2,217,0,0,0,},
{221,214,54,221,100,2,0,},{209,128,56,255,240,0,0,},},{{221,212,54,221,100,2,0,},{207,20,34,218,116,1,0,},},{{252,234,60,14,57,196,6,},{217,78,34,219,6,4,0,},},
{{253,0,55,216,214,2,0,},{221,208,54,221,100,2,0,},{221,202,36,226,188,2,0,},},{{4,21,54,207,210,1,0,},{253,246,62,5,21,235,7,},{206,112,54,206,100,2,0,},},
{{208,8,56,255,184,3,0,},{207,28,34,218,116,1,0,},},{{7,47,54,214,210,1,0,},{221,206,34,226,178,2,0,},{211,98,34,212,6,4,0,},{209,44,32,218,134,0,0,},},
{{1,41,46,207,0,0,0,},{214,62,54,214,100,2,0,},},{{219,78,34,219,8,3,0,},{219,60,32,219,2,3,0,},{217,60,36,219,12,4,0,},},{{251,168,54,215,214,2,0,},
{218,28,64,31,253,170,6,},{214,58,54,214,100,2,0,},{210,32,60,14,95,171,6,},},{{209,14,34,218,148,0,0,},},{{217,60,34,219,6,4,0,},{211,124,54,36,221,3,0,},},
{{217,68,60,14,245,179,6,},{210,40,62,5,145,211,6,},{206,106,36,212,188,2,0,},},{{252,234,34,253,74,4,0,},{214,54,34,219,178,2,0,},{210,20,64,31,105,171,6,},},
{{219,56,64,31,253,178,6,},{210,40,34,218,124,3,0,},{208,18,36,218,134,3,0,},},{{217,52,34,219,6,4,0,},{214,46,54,214,100,2,0,},{211,116,54,206,212,3,0,},},
{{219,56,60,14,247,178,6,},{214,50,36,219,188,2,0,},{209,44,52,207,232,0,0,},},{{251,188,34,251,8,3,0,},{251,154,60,14,247,186,6,},{212,94,54,206,214,2,0,},
{210,34,62,5,145,211,6,},},{{14,241,26,252,0,0,0,},{213,18,54,213,100,2,0,},},{{250,166,54,215,24,4,0,},{216,240,60,14,149,194,6,},{209,26,60,14,107,168,6,},},
{{255,8,52,207,0,0,0,},{219,52,56,214,238,2,0,},{206,98,60,14,149,114,6,},},{{23,67,20,7,1,0,0,},{251,150,56,215,238,2,0,},{217,78,60,14,245,179,6,},
{208,132,52,207,180,3,0,},},{{220,30,64,31,251,171,6,},{220,18,60,14,245,171,6,},{207,32,32,218,104,1,0,},},{{22,45,20,6,1,0,0,},{213,26,44,218,208,2,0,},
{206,88,64,31,159,114,6,},},{{206,96,54,206,100,2,0,},},{{212,112,64,31,253,114,6,},{208,32,56,213,82,3,0,},},{{217,68,56,214,236,3,0,},{206,100,54,206,100,2,0,},},
{{217,66,60,14,245,179,6,},{216,0,61,14,149,194,6,},},{{13,123,2,211,0,0,0,},{226,214,64,31,253,234,6,},{214,72,54,19,125,2,0,},{212,122,64,31,253,114,6,},},
{{251,192,54,215,214,2,0,},{214,74,54,214,100,2,0,},{212,116,60,14,247,114,6,},},{{16,181,58,46,205,3,0,},{216,232,54,216,100,2,0,},{207,40,56,213,66,1,0,},},
{{15,189,38,250,4,0,0,},{250,150,62,5,87,220,7,},{215,148,62,5,199,218,7,},},{{3,47,50,207,0,0,0,},{217,74,34,219,6,4,0,},{209,8,56,255,240,0,0,},},
{{232,212,60,14,57,236,6,},{208,44,36,218,134,3,0,},},{{18,127,20,2,1,0,0,},{216,240,54,216,100,2,0,},{210,34,56,213,82,3,0,},{208,14,32,218,114,3,0,},},
{{32,227,22,8,1,0,0,},{5,189,42,250,0,0,0,},},{{255,40,52,207,0,0,0,},{210,34,36,218,134,3,0,},},{{45,145,58,41,211,1,0,},{252,252,36,253,80,4,0,},
{214,56,36,219,188,2,0,},{213,40,34,218,178,2,0,},},{{255,44,52,207,0,0,0,},{207,26,34,218,116,1,0,},},{{252,228,56,216,48,4,0,},{218,28,60,14,247,170,6,},
{216,244,64,31,159,194,6,},{215,168,34,251,178,2,0,},},{{253,230,54,216,214,2,0,},{217,62,54,214,212,3,0,},{211,126,34,212,6,4,0,},},{{14,247,26,252,0,0,0,},
{253,228,54,216,214,2,0,},{219,62,56,214,238,2,0,},{206,104,60,14,149,114,6,},},{{232,194,60,14,57,236,6,},{212,100,34,212,8,3,0,},{208,16,54,213,46,3,0,},},
{{14,243,26,252,0,0,0,},{250,188,36,251,80,4,0,},{226,208,56,221,238,2,0,},},{{21,15,22,6,1,0,0,},{212,90,64,31,253,114,6,},{209,24,32,218,134,0,0,},},
{{226,196,64,31,253,234,6,},{219,58,36,219,14,3,0,},{206,100,56,206,136,2,0,},},{{226,214,36,226,14,3,0,},{206,96,34,212,178,2,0,},},{{26,149,20,11,1,0,0,},
{220,28,64,31,251,171,6,},{207,12,54,213,24,1,0,},},{{5,155,42,250,0,0,0,},{221,222,62,5,199,18,7,},{206,86,64,31,159,114,6,},},{{253,244,54,216,214,2,0,},
{219,50,36,219,14,3,0,},{217,46,60,14,245,179,6,},},{{232,202,36,226,80,4,0,},{208,24,62,5,145,211,6,},},{{208,28,32,218,114,3,0,},{207,34,56,213,66,1,0,},},
{{40,139,40,38,1,0,0,},{213,28,44,218,208,2,0,},{211,80,60,14,245,115,6,},{209,16,56,213,90,0,0,},},{{26,193,20,11,1,0,0,},{255,18,52,207,0,0,0,},
{220,14,54,213,212,3,0,},{206,82,54,206,100,2,0,},},{{253,242,62,5,21,235,7,},{232,224,54,48,33,4,0,},{206,116,54,206,100,2,0,},},{{31,213,30,12,1,0,0,},
{27,149,22,11,1,0,0,},{226,226,34,226,8,3,0,},{207,20,62,5,141,209,6,},},{{252,234,56,216,48,4,0,},{250,168,62,5,87,220,7,},{216,234,64,31,159,194,6,},},
{{221,202,32,226,168,2,0,},{206,116,64,31,159,114,6,},},{{2,101,54,206,210,1,0,},{232,214,56,221,48,4,0,},{216,238,32,253,168,2,0,},},{{210,14,62,5,145,211,6,},
{208,8,52,207,180,3,0,},},{{209,44,36,218,162,0,0,},},{{220,30,54,213,212,3,0,},{209,32,34,218,148,0,0,},},{{6,21,54,213,210,1,0,},{252,238,64,31,63,196,6,},
{217,56,36,219,12,4,0,},{213,28,32,218,168,2,0,},},{{20,133,56,20,215,1,0,},{216,140,56,216,136,2,0,},{213,26,36,218,188,2,0,},},{{252,140,54,216,24,4,0,},
{220,34,64,31,251,171,6,},{207,32,36,218,128,1,0,},},{{215,154,44,251,208,2,0,},{213,10,0,4,233,1,0,},},{{6,13,54,213,210,1,0,},{217,68,32,219,0,4,0,},
{206,106,56,206,136,2,0,},},{{220,34,62,5,19,212,6,},{214,68,36,219,188,2,0,},{210,22,54,254,26,3,0,},},{{12,195,56,47,223,1,0,},{210,18,36,218,134,3,0,},
{208,18,32,218,114,3,0,},},{{232,198,54,221,24,4,0,},{219,46,56,214,238,2,0,},},{{251,144,64,31,253,186,6,},{220,40,54,213,212,3,0,},},{{251,188,62,5,21,219,7,},
{251,154,32,251,2,3,0,},{220,42,54,37,221,3,0,},{208,128,52,207,180,3,0,},},{{12,203,56,232,222,1,0,},{220,18,64,31,251,171,6,},},{{5,169,42,250,0,0,0,},
{252,0,65,31,63,196,6,},{211,112,62,5,19,164,6,},{209,26,56,213,90,0,0,},},{{232,196,34,226,74,4,0,},{206,126,44,212,208,2,0,},},{{219,58,32,219,2,3,0,},
{208,26,62,5,145,211,6,},},{{214,60,34,219,178,2,0,},{207,14,34,218,116,1,0,},},{{211,86,56,206,236,3,0,},},{{221,196,32,226,168,2,0,},{219,60,60,14,247,178,6,},
{211,104,32,212,0,4,0,},},{{253,240,62,5,21,235,7,},{232,204,56,221,48,4,0,},{216,228,32,253,168,2,0,},{212,112,60,14,247,114,6,},},{{10,1,55,216,210,1,0,},
{221,226,34,226,178,2,0,},{216,230,44,253,208,2,0,},{207,132,56,20,179,1,0,},},{{216,232,64,31,159,194,6,},{215,168,62,5,199,218,7,},},{{255,28,52,207,0,0,0,},
{206,114,64,31,159,114,6,},},{{232,208,60,14,57,236,6,},{226,214,54,221,214,2,0,},{217,50,60,14,245,179,6,},},{{10,233,54,216,210,1,0,},{208,40,34,218,124,3,0,},
{207,40,60,14,81,169,6,},},{{254,54,2,217,0,0,0,},{221,204,54,221,100,2,0,},{211,96,54,206,212,3,0,},},{{209,8,52,207,232,0,0,},},{{232,212,32,226,68,4,0,},
{214,78,62,5,199,218,6,},{207,18,64,31,93,169,6,},},{{214,74,44,219,208,2,0,},{208,14,36,218,134,3,0,},{207,136,52,207,196,1,0,},},{{215,144,54,215,100,2,0,},
{212,86,54,206,214,2,0,},},{{7,55,54,214,210,1,0,},{226,222,36,226,14,3,0,},{217,58,54,214,212,3,0,},{212,80,54,206,214,2,0,},},{{219,68,62,5,21,219,6,},
{212,82,54,206,214,2,0,},{206,108,60,14,149,114,6,},},{{250,166,64,31,63,188,6,},{220,44,62,5,19,212,6,},},{{250,154,54,215,24,4,0,},{218,28,56,213,238,2,0,},
{213,12,54,213,100,2,0,},},{0},{{212,98,54,206,214,2,0,},{210,20,36,218,134,3,0,},},{{232,194,56,221,48,4,0,},{210,16,54,213,46,3,0,},{206,100,34,212,178,2,0,},},
{{250,188,32,251,68,4,0,},{213,16,34,218,178,2,0,},{210,132,56,20,175,3,0,},},{{253,228,64,31,253,194,6,},{209,24,60,14,107,168,6,},{207,254,127,208,4,128,6,},},
{{255,14,52,207,0,0,0,},{253,232,62,5,21,235,7,},{217,54,32,219,0,4,0,},{206,94,54,206,100,2,0,},},{{219,54,34,219,8,3,0,},{215,186,54,27,125,2,0,},
{208,20,62,5,145,211,6,},},{{213,24,34,218,178,2,0,},},{{215,190,54,44,113,2,0,},},{{36,119,2,18,1,0,0,},{215,188,54,215,100,2,0,},{206,86,54,206,100,2,0,},},
{{232,202,32,226,68,4,0,},{220,28,54,213,212,3,0,},{207,12,64,31,93,169,6,},},{{216,230,54,216,100,2,0,},{207,34,60,14,81,169,6,},},{{215,192,56,215,136,2,0,},
{211,80,64,31,251,115,6,},},{{226,204,36,226,14,3,0,},{214,64,64,31,159,178,6,},},{{253,0,65,31,253,194,6,},{226,200,54,221,214,2,0,},{207,44,64,31,93,169,6,},},
{{27,193,22,11,1,0,0,},{252,246,54,216,24,4,0,},{215,168,54,215,100,2,0,},},{{5,183,42,16,1,0,0,},{207,16,32,218,104,1,0,},},{{253,246,32,253,2,3,0,},
{226,212,36,226,14,3,0,},},{{232,214,60,14,57,236,6,},{216,238,36,253,188,2,0,},{207,28,64,31,93,169,6,},},{{13,97,2,211,0,0,0,},{220,12,60,14,245,171,6,},
{216,242,34,253,178,2,0,},{208,102,54,13,35,3,0,},},{{209,44,56,213,90,0,0,},},{{216,140,64,31,159,194,6,},{211,126,36,212,12,4,0,},},{{213,32,0,4,233,1,0,},
{206,110,64,31,159,114,6,},},{{216,140,60,14,149,194,6,},{207,24,54,213,24,1,0,},},{{10,141,54,216,210,1,0,},{252,230,56,216,48,4,0,},{218,30,60,14,247,170,6,},
{211,94,62,5,19,164,6,},},{{254,18,2,220,0,0,0,},{217,64,54,214,212,3,0,},},{{226,206,64,31,253,234,6,},{217,68,36,219,12,4,0,},{206,106,60,14,149,114,6,},},
{{232,226,34,226,74,4,0,},{214,68,32,219,168,2,0,},},{{217,52,64,31,251,179,6,},{211,104,64,31,251,115,6,},},{{226,200,64,31,253,234,6,},{211,94,60,14,245,115,6,},},
{{253,230,62,5,21,235,7,},{214,50,44,219,208,2,0,},{212,96,34,212,8,3,0,},},{{251,154,36,251,14,3,0,},{226,226,54,221,214,2,0,},},{{220,26,36,218,12,4,0,},
{213,44,56,213,136,2,0,},{213,18,62,5,199,210,6,},},{{206,98,34,212,178,2,0,},},{{206,88,54,206,100,2,0,},},{{0,137,48,209,0,0,0,},{210,136,52,207,180,3,0,},
{207,14,64,31,93,169,6,},},{{220,18,36,218,12,4,0,},{207,32,56,213,66,1,0,},{207,14,62,5,141,209,6,},},{{250,162,34,251,74,4,0,},{215,160,34,251,178,2,0,},
{211,108,54,206,212,3,0,},},{{226,208,54,221,214,2,0,},{221,196,36,226,188,2,0,},{209,18,34,218,148,0,0,},},{{2,91,54,206,210,1,0,},{232,204,60,14,57,236,6,},
{216,228,36,253,188,2,0,},{208,32,64,31,105,171,6,},},{{207,132,52,207,196,1,0,},{207,44,60,14,81,169,6,},},{{12,197,56,232,222,1,0,},{250,192,32,251,68,4,0,},
{221,200,54,221,100,2,0,},{211,100,54,206,212,3,0,},},{{218,40,54,213,214,2,0,},},{{251,192,62,5,21,219,7,},{232,208,56,221,48,4,0,},{208,254,127,208,0,128,6,},},
{{220,14,56,213,236,3,0,},{218,44,54,213,214,2,0,},},{{250,150,54,215,24,4,0,},{215,148,54,215,100,2,0,},{211,116,62,5,19,164,6,},},{{19,51,22,7,1,0,0,},
{220,40,34,218,6,4,0,},{211,106,62,5,19,164,6,},},{{23,51,20,7,1,0,0,},{232,212,36,226,80,4,0,},{210,0,52,207,180,3,0,},{208,44,60,14,95,171,6,},},
{{216,240,62,5,199,234,7,},{214,74,32,219,168,2,0,},{210,12,54,213,46,3,0,},},{{250,158,54,215,24,4,0,},{215,156,54,215,100,2,0,},{211,108,62,5,19,164,6,},},
{{226,222,32,226,2,3,0,},{217,78,54,214,212,3,0,},{210,30,64,31,105,171,6,},},{{214,56,44,219,208,2,0,},{206,108,56,206,136,2,0,},},{{252,228,34,253,74,4,0,},
{220,44,34,218,6,4,0,},},{{252,230,34,253,74,4,0,},{220,32,36,218,12,4,0,},{211,100,62,5,19,164,6,},},{{217,62,62,5,19,220,6,},{210,26,60,14,95,171,6,},},
{{0,17,48,209,0,0,0,},{253,228,62,5,21,235,7,},{210,20,32,218,114,3,0,},{208,28,60,14,95,171,6,},},{{0,135,48,209,0,0,0,},{216,252,34,253,178,2,0,},
{208,16,62,5,145,211,6,},},{{250,188,60,14,57,188,6,},{217,54,64,31,251,179,6,},{213,16,62,5,199,210,6,},},{{211,88,60,14,245,115,6,},{207,34,54,213,24,1,0,},},
{{219,54,64,31,253,178,6,},{212,88,56,206,238,2,0,},{208,20,60,14,95,171,6,},},{{220,24,54,213,212,3,0,},{217,60,64,31,251,179,6,},{210,28,62,5,145,211,6,},},
{{1,17,46,207,0,0,0,},{215,162,64,31,159,186,6,},{210,24,64,31,105,171,6,},},{{28,47,4,29,5,0,0,},{221,222,54,221,100,2,0,},{211,114,54,206,212,3,0,},
{209,28,52,207,232,0,0,},},{{219,50,60,14,247,178,6,},{215,156,34,251,178,2,0,},},{{12,215,56,232,222,1,0,},{221,200,36,226,188,2,0,},{208,34,52,207,180,3,0,},
{208,24,54,213,46,3,0,},},{{252,242,54,216,24,4,0,},{221,214,56,221,136,2,0,},{218,12,60,14,247,170,6,},},{{221,198,54,221,100,2,0,},{209,20,52,207,232,0,0,},
{209,16,64,31,121,168,6,},},{{226,204,32,226,2,3,0,},{217,78,36,219,12,4,0,},{210,4,56,0,161,3,0,},},{{8,209,54,221,210,1,0,},{250,156,54,215,24,4,0,},},
{{220,20,32,218,0,4,0,},{207,20,54,213,24,1,0,},},{{250,168,54,215,24,4,0,},{207,16,36,218,128,1,0,},},{{253,246,36,253,14,3,0,},{252,228,60,14,57,196,6,},
{226,212,32,226,2,3,0,},{206,112,44,212,208,2,0,},},{{24,227,20,8,1,0,0,},{254,24,2,220,0,0,0,},{216,232,62,5,199,234,7,},{211,100,36,212,12,4,0,},},
{{25,1,23,10,1,0,0,},{216,242,62,5,199,234,7,},{207,28,54,213,24,1,0,},},{{250,148,34,251,74,4,0,},{211,98,62,5,19,164,6,},{209,44,60,14,107,168,6,},},
{{213,32,34,218,178,2,0,},},{{0,47,48,209,0,0,0,},{210,32,34,218,124,3,0,},{206,110,60,14,149,114,6,},},{{218,18,34,218,8,3,0,},{210,40,32,218,114,3,0,},},
{{218,30,56,213,238,2,0,},{215,158,34,251,178,2,0,},{213,24,64,31,159,170,6,},},{{39,139,28,38,1,0,0,},{255,34,52,207,0,0,0,},{215,188,34,251,178,2,0,},
{210,44,56,213,82,3,0,},},{{4,33,54,207,210,1,0,},{252,246,56,216,48,4,0,},{209,20,64,31,121,168,6,},},{{218,26,34,218,8,3,0,},{208,18,62,5,145,211,6,},},
{{213,14,62,5,199,210,6,},{210,34,60,14,95,171,6,},},{{252,252,60,14,57,196,6,},{216,246,62,5,199,234,7,},{211,94,56,206,236,3,0,},},{{253,230,34,253,8,3,0,},
{251,158,54,215,214,2,0,},{212,96,62,5,21,163,6,},{212,86,64,31,253,114,6,},},{{2,87,54,206,210,1,0,},{251,188,54,215,214,2,0,},{212,94,34,212,8,3,0,},
{208,32,60,14,95,171,6,},},{{220,26,32,218,0,4,0,},{213,44,60,14,149,170,6,},{208,34,64,31,105,171,6,},},{{219,52,34,219,8,3,0,},},{{253,238,34,253,8,3,0,},
{206,126,36,212,188,2,0,},},{{252,252,64,31,63,196,6,},{210,26,34,218,124,3,0,},},{{252,252,54,216,24,4,0,},{220,18,32,218,0,4,0,},{207,32,60,14,81,169,6,},},
{{252,140,60,14,57,196,6,},{213,26,32,218,168,2,0,},},{{217,66,62,5,19,220,6,},{206,122,56,206,136,2,0,},},{{6,31,54,213,210,1,0,},{253,240,54,216,214,2,0,},},
{{252,240,34,253,74,4,0,},{218,32,62,5,21,211,6,},{207,44,56,213,66,1,0,},},{{6,43,54,37,215,1,0,},{250,192,36,251,80,4,0,},},{{15,159,38,250,4,0,0,},
{232,198,64,31,63,236,6,},{226,202,56,221,238,2,0,},},{{208,40,60,14,95,171,6,},{207,40,34,218,116,1,0,},},{{252,232,34,253,74,4,0,},{251,154,54,215,214,2,0,},
{220,14,60,14,245,171,6,},{207,18,54,213,24,1,0,},},{{15,193,38,250,4,0,0,},{221,204,62,5,199,18,7,},{220,32,64,31,251,171,6,},{211,96,62,5,19,164,6,},},
{{221,204,64,31,159,234,6,},{217,74,54,214,212,3,0,},{211,96,64,31,251,115,6,},},{{214,78,54,214,100,2,0,},},{{6,25,54,213,210,1,0,},{212,106,32,212,2,3,0,},
{210,34,52,207,180,3,0,},},{{6,27,54,213,210,1,0,},{216,240,32,253,168,2,0,},},{{6,29,54,213,210,1,0,},{217,58,62,5,19,220,6,},{210,34,64,31,105,171,6,},},
{{206,108,36,212,188,2,0,},},{{207,26,62,5,141,209,6,},},{{250,154,62,5,87,220,7,},{220,32,32,218,0,4,0,},{212,100,36,212,14,3,0,},},{{206,104,34,212,178,2,0,},},
{{216,252,64,31,159,194,6,},{214,52,36,219,188,2,0,},{212,98,62,5,21,163,6,},},{{251,162,54,215,214,2,0,},{251,156,64,31,253,186,6,},{210,16,62,5,145,211,6,},},
{{217,66,64,31,251,179,6,},{216,0,65,31,159,194,6,},},{{213,20,32,218,168,2,0,},{209,24,52,207,232,0,0,},},{{6,15,54,213,210,1,0,},{219,54,60,14,247,178,6,},
{211,112,34,212,6,4,0,},{206,96,56,206,136,2,0,},},{{4,133,54,207,210,1,0,},{218,44,34,218,8,3,0,},{212,106,56,206,238,2,0,},},{{4,135,54,207,210,1,0,},
{208,24,64,31,105,171,6,},},{{11,191,54,44,215,1,0,},{4,129,54,207,210,1,0,},{251,190,54,44,223,2,0,},},{{11,157,54,215,210,1,0,},{221,222,64,31,159,234,6,},
{211,114,64,31,251,115,6,},},{{220,28,62,5,19,212,6,},{212,126,36,212,14,3,0,},{210,24,54,213,46,3,0,},},{{218,12,56,213,238,2,0,},{209,16,34,218,148,0,0,},},
{{209,20,56,213,90,0,0,},},{{226,204,60,14,247,234,6,},{212,114,54,206,214,2,0,},},{{253,242,34,253,8,3,0,},{253,240,64,31,253,194,6,},},{{252,246,62,5,87,236,7,},
{219,62,64,31,253,178,6,},{213,20,54,213,100,2,0,},},{{218,26,32,218,2,3,0,},{209,40,60,14,107,168,6,},},{{221,206,64,31,159,234,6,},{211,98,64,31,251,115,6,},
{206,112,32,212,168,2,0,},},{{216,242,64,31,159,194,6,},{216,238,44,253,208,2,0,},},{{24,197,20,8,1,0,0,},{210,14,34,218,124,3,0,},},{{252,238,32,253,68,4,0,},
{210,18,32,218,114,3,0,},},{{217,56,62,5,19,220,6,},{210,32,64,31,105,171,6,},{208,20,32,218,114,3,0,},},{{214,58,44,219,208,2,0,},{206,110,56,206,136,2,0,},},
{{5,153,42,16,1,0,0,},{216,246,54,216,100,2,0,},{207,24,62,5,141,209,6,},},{{252,230,32,253,68,4,0,},{250,156,62,5,87,220,7,},{215,158,62,5,199,218,7,},},
{{30,229,20,10,1,0,0,},{219,74,56,214,238,2,0,},},{{255,0,52,207,0,0,0,},{221,208,64,31,159,234,6,},{212,108,62,5,21,163,6,},},{{251,158,64,31,253,186,6,},
{210,40,60,14,95,171,6,},{210,18,62,5,145,211,6,},},{{221,212,32,226,168,2,0,},{214,50,56,214,136,2,0,},{213,40,60,14,149,170,6,},},{{226,196,36,226,14,3,0,},
{211,94,36,212,12,4,0,},},{{212,90,56,206,238,2,0,},{211,108,32,212,0,4,0,},},{{253,234,32,253,2,3,0,},{226,198,34,226,8,3,0,},{208,22,54,254,26,3,0,},},
{{213,44,64,31,159,170,6,},{211,112,32,212,0,4,0,},},{{219,56,34,219,8,3,0,},{214,60,60,14,149,178,6,},},{{211,108,64,31,251,115,6,},{206,126,32,212,168,2,0,},},
{{12,209,56,232,222,1,0,},{0,129,48,209,0,0,0,},{217,60,62,5,19,220,6,},{208,26,34,218,124,3,0,},},{{216,228,34,253,178,2,0,},{207,14,54,213,24,1,0,},},
{{211,82,56,206,236,3,0,},{209,18,60,14,107,168,6,},},{{29,103,54,13,187,1,0,},{14,253,26,252,0,0,0,},{206,122,60,14,149,114,6,},},{{254,62,2,217,0,0,0,},
{232,200,64,31,63,236,6,},{216,228,44,253,208,2,0,},{210,40,52,207,180,3,0,},},{{252,240,62,5,87,236,7,},{207,44,36,218,128,1,0,},},{{221,200,62,5,199,18,7,},
{218,44,36,218,14,3,0,},{210,44,52,207,180,3,0,},},{{226,202,60,14,247,234,6,},{206,80,54,206,100,2,0,},},{{221,226,64,31,159,234,6,},{208,40,56,213,82,3,0,},},
{{218,40,34,218,8,3,0,},},{{221,204,34,226,178,2,0,},{207,46,52,207,196,1,0,},},{{16,145,58,41,191,3,0,},{219,74,54,214,214,2,0,},},{{2,99,54,206,210,1,0,},
{208,44,52,207,180,3,0,},},{{250,154,32,251,68,4,0,},{218,20,54,213,214,2,0,},},{{250,158,62,5,87,220,7,},{213,34,60,14,149,170,6,},{209,34,36,218,162,0,0,},},
{{217,78,62,5,19,220,6,},{212,94,36,212,14,3,0,},},{{2,107,54,206,210,1,0,},{219,68,34,219,8,3,0,},{211,126,64,31,251,115,6,},{206,108,32,212,168,2,0,},},
{{214,66,56,214,136,2,0,},},{{214,68,60,14,149,178,6,},{214,56,64,31,159,178,6,},},{{43,171,38,42,1,0,0,},{219,62,34,219,8,3,0,},{211,92,56,206,236,3,0,},},
{{251,156,34,251,8,3,0,},{214,66,62,5,199,218,6,},{214,52,32,219,168,2,0,},},{{214,66,64,31,159,178,6,},{210,16,34,218,124,3,0,},},{{218,24,32,218,2,3,0,},
{213,16,54,213,100,2,0,},{211,122,56,206,236,3,0,},},{{213,20,36,218,188,2,0,},},{{251,148,34,251,8,3,0,},{219,54,56,214,238,2,0,},{212,88,64,31,253,114,6,},
{206,96,60,14,149,114,6,},},{{213,32,44,218,208,2,0,},{208,114,52,207,180,3,0,},},{{213,24,54,213,100,2,0,},{212,116,56,206,238,2,0,},},{{250,166,56,215,48,4,0,},
{207,128,52,207,196,1,0,},},{{252,242,34,253,74,4,0,},},{{4,17,54,207,210,1,0,},{232,206,64,31,63,236,6,},{207,34,34,218,116,1,0,},},{{250,160,56,215,48,4,0,},
{221,214,64,31,159,234,6,},{215,162,56,215,136,2,0,},},{{219,68,64,31,253,178,6,},{209,20,60,14,107,168,6,},},{{0,1,48,209,0,0,0,},{232,206,54,221,24,4,0,},
{226,204,56,221,238,2,0,},},{{226,200,34,226,8,3,0,},{212,122,36,212,14,3,0,},},{{212,100,56,206,238,2,0,},},{{209,40,56,213,90,0,0,},},{{206,112,36,212,188,2,0,},},
{{19,79,22,7,1,0,0,},{4,1,54,207,210,1,0,},{210,2,56,1,155,3,0,},},{{35,49,10,28,5,0,0,},{254,26,2,220,0,0,0,},{216,242,54,216,100,2,0,},
{207,28,62,5,141,209,6,},},{{252,238,36,253,80,4,0,},{221,206,54,221,100,2,0,},{209,32,64,31,121,168,6,},},{{253,140,54,216,214,2,0,},{212,104,64,31,253,114,6,},},
{{232,222,56,221,48,4,0,},{226,220,54,32,231,2,0,},{211,92,60,14,245,115,6,},},{{207,24,34,218,116,1,0,},},{{252,230,36,253,80,4,0,},{212,98,64,31,253,114,6,},
{209,14,54,213,42,0,0,},},{{11,169,54,215,210,1,0,},{221,208,34,226,178,2,0,},{219,74,60,14,247,178,6,},{217,60,54,214,212,3,0,},},{{8,225,54,48,215,1,0,},
{220,34,36,218,12,4,0,},{214,68,62,5,199,218,6,},},{{8,195,54,221,210,1,0,},{251,158,36,251,14,3,0,},{250,192,56,215,48,4,0,},{208,18,54,213,46,3,0,},},
{{232,226,32,226,68,4,0,},{215,154,54,215,100,2,0,},{213,14,54,213,100,2,0,},},{{11,161,54,215,210,1,0,},{0,33,48,209,0,0,0,},{217,52,54,214,212,3,0,},
{211,94,32,212,0,4,0,},},{{219,56,32,219,2,3,0,},{212,96,54,206,214,2,0,},{210,18,64,31,105,171,6,},},{{252,0,61,14,57,196,6,},{220,26,62,5,19,212,6,},
{211,90,64,31,251,115,6,},{206,126,54,206,100,2,0,},},{{251,148,56,215,238,2,0,},{209,26,34,218,148,0,0,},},{{208,28,36,218,134,3,0,},},{{212,120,54,17,231,2,0,},
{206,126,60,14,149,114,6,},},{{251,150,36,251,14,3,0,},{221,198,32,226,168,2,0,},{207,2,56,1,153,1,0,},},{{252,252,62,5,87,236,7,},{218,14,56,213,238,2,0,},
{207,32,52,207,196,1,0,},},{{221,196,62,5,199,18,7,},{211,104,62,5,19,164,6,},{209,18,56,213,90,0,0,},},{{232,206,56,221,48,4,0,},{226,206,60,14,247,234,6,},
{212,86,56,206,238,2,0,},},{{220,32,60,14,245,171,6,},{218,40,56,213,238,2,0,},},{{209,132,52,207,232,0,0,},{207,44,32,218,104,1,0,},},{{220,44,60,14,245,171,6,},
{218,44,32,218,2,3,0,},{208,40,64,31,105,171,6,},},{{251,192,32,251,2,3,0,},{219,46,54,214,214,2,0,},{211,116,60,14,245,115,6,},},{{12,205,56,232,222,1,0,},
{216,232,36,253,188,2,0,},{208,40,52,207,180,3,0,},},{{20,131,56,20,215,1,0,},{218,34,36,218,14,3,0,},{214,78,64,31,159,178,6,},{207,18,62,5,141,209,6,},},
{{254,14,2,220,0,0,0,},{253,252,54,216,214,2,0,},},{{253,250,54,25,231,2,0,},{217,74,62,5,19,220,6,},{214,54,44,219,208,2,0,},},{{220,40,36,218,12,4,0,},
{214,22,54,254,84,2,0,},{212,106,62,5,21,163,6,},},{{32,197,22,8,1,0,0,},{211,96,60,14,245,115,6,},},{{213,34,56,213,136,2,0,},{209,34,32,218,134,0,0,},},
{{6,45,54,213,210,1,0,},{214,62,44,219,208,2,0,},{208,14,64,31,105,171,6,},},{{0,45,48,209,0,0,0,},{217,66,36,219,12,4,0,},{214,56,56,214,136,2,0,},
{206,108,44,212,208,2,0,},},{{42,165,58,15,211,1,0,},{218,16,62,5,21,211,6,},{207,26,54,213,24,1,0,},},{{217,62,36,219,12,4,0,},},{{218,16,34,218,8,3,0,},},
{{251,156,62,5,21,219,7,},{214,66,34,219,178,2,0,},{214,52,60,14,149,178,6,},{210,16,64,31,105,171,6,},},{{254,44,2,220,0,0,0,},{216,252,62,5,199,234,7,},
{208,130,56,20,175,3,0,},{208,16,34,218,124,3,0,},},{{221,214,60,14,149,234,6,},{218,24,36,218,14,3,0,},{211,122,60,14,245,115,6,},},{{253,232,36,253,14,3,0,},
{252,246,64,31,63,196,6,},{206,94,44,212,208,2,0,},},{{226,196,60,14,247,234,6,},{212,92,56,206,238,2,0,},},{{208,134,52,207,180,3,0,},},{{21,45,22,6,1,0,0,},
{3,133,50,207,0,0,0,},{221,200,34,226,178,2,0,},},{{221,222,34,226,178,2,0,},{209,28,32,218,134,0,0,},},{{220,28,32,218,0,4,0,},{212,80,60,14,247,114,6,},
{206,48,8,28,253,1,0,},},{{212,114,64,31,253,114,6,},{208,28,62,5,145,211,6,},},{{250,160,60,14,57,188,6,},{218,34,54,213,214,2,0,},{213,28,62,5,199,210,6,},},
{{221,198,34,226,178,2,0,},{211,106,34,212,6,4,0,},{209,20,32,218,134,0,0,},},{{250,144,56,215,48,4,0,},{208,28,64,31,105,171,6,},},{{0,35,48,209,0,0,0,},
{209,40,64,31,121,168,6,},{206,116,34,212,178,2,0,},},{{5,145,42,40,1,0,0,},{252,230,62,5,87,236,7,},{218,42,54,37,223,2,0,},{207,16,62,5,141,209,6,},},
{{253,0,37,253,14,3,0,},{221,202,54,221,100,2,0,},{209,40,52,207,232,0,0,},},{{219,50,32,219,2,3,0,},{206,112,56,206,136,2,0,},},{{217,56,32,219,0,4,0,},
{210,14,64,31,105,171,6,},},{{214,62,34,219,178,2,0,},},{{213,32,60,14,149,170,6,},{209,32,52,207,232,0,0,},},{{219,78,60,14,247,178,6,},{217,56,54,214,212,3,0,},
{208,12,64,31,105,171,6,},},{{253,254,54,33,223,2,0,},{251,168,36,251,14,3,0,},{215,188,32,251,168,2,0,},{214,58,36,219,188,2,0,},},{{218,18,62,5,21,211,6,},
{215,162,60,14,149,186,6,},},{{215,158,54,215,100,2,0,},{208,40,62,5,145,211,6,},},{{252,242,62,5,87,236,7,},{219,74,64,31,253,178,6,},{212,108,32,212,2,3,0,},},
{{17,127,22,2,1,0,0,},{220,34,32,218,0,4,0,},{213,40,56,213,136,2,0,},},{{216,240,56,216,136,2,0,},{212,96,64,31,253,114,6,},{210,18,54,213,46,3,0,},},
{{215,188,36,251,188,2,0,},{208,32,62,5,145,211,6,},{207,20,52,207,196,1,0,},},{{213,14,64,31,159,170,6,},{208,34,62,5,145,211,6,},},{{214,64,54,214,100,2,0,},
{214,50,60,14,149,178,6,},{208,18,64,31,105,171,6,},},{{213,18,32,218,168,2,0,},{209,26,64,31,121,168,6,},},{{7,63,54,214,210,1,0,},{212,88,54,206,214,2,0,},},
{{251,154,64,31,253,186,6,},{219,52,54,214,214,2,0,},{212,90,54,206,214,2,0,},},{{232,196,54,221,24,4,0,},{214,68,34,219,178,2,0,},{206,126,56,206,136,2,0,},},
{{251,150,32,251,2,3,0,},{217,66,56,214,236,3,0,},{216,0,57,216,136,2,0,},},{{15,151,38,250,4,0,0,},{215,160,56,215,136,2,0,},{213,26,62,5,199,210,6,},
{209,128,52,207,232,0,0,},},{{23,79,20,7,1,0,0,},{213,30,64,31,159,170,6,},{209,18,52,207,232,0,0,},},{{255,16,52,207,0,0,0,},{232,200,34,226,74,4,0,},
{226,206,56,221,238,2,0,},{212,86,60,14,247,114,6,},},{0},{{252,240,54,216,24,4,0,},{221,196,64,31,159,234,6,},{209,132,56,20,223,0,0,},},{{251,154,56,215,238,2,0,},
{226,202,34,226,8,3,0,},},{{255,24,52,207,0,0,0,},{251,192,36,251,14,3,0,},{232,208,34,226,74,4,0,},},{{8,215,54,221,210,1,0,},{216,232,32,253,168,2,0,},
{208,6,54,3,169,3,0,},},{{252,232,54,216,24,4,0,},{226,226,56,221,238,2,0,},{207,18,34,218,116,1,0,},},{0},{{250,150,64,31,63,188,6,},{215,148,64,31,159,186,6,},
{212,124,54,36,223,2,0,},},{{220,40,32,218,0,4,0,},{212,126,54,206,214,2,0,},{208,14,54,213,46,3,0,},},{{218,20,62,5,21,211,6,},{207,30,54,213,24,1,0,},},
{{213,34,36,218,188,2,0,},{209,34,60,14,107,168,6,},},{{255,136,52,207,0,0,0,},{250,158,64,31,63,188,6,},{217,58,34,219,6,4,0,},},{{214,56,60,14,149,178,6,},
{212,110,54,206,214,2,0,},},{{5,159,42,250,0,0,0,},{220,32,62,5,19,212,6,},{207,102,54,13,11,1,0,},},{{3,41,50,207,0,0,0,},{226,212,60,14,247,234,6,},
{209,114,52,207,232,0,0,},},{{251,160,36,251,14,3,0,},{217,50,34,219,6,4,0,},{212,108,54,206,214,2,0,},},{{251,166,56,215,238,2,0,},{210,42,54,37,59,3,0,},
{208,16,64,31,105,171,6,},},{{251,162,34,251,8,3,0,},{212,104,54,206,214,2,0,},{208,130,52,207,180,3,0,},},{{3,33,50,207,0,0,0,},{212,106,54,206,214,2,0,},},
{{251,148,64,31,253,186,6,},{219,58,54,214,214,2,0,},{217,54,62,5,19,220,6,},},{{226,196,56,221,238,2,0,},{212,92,60,14,247,114,6,},{206,90,54,206,100,2,0,},},
{{226,194,56,221,238,2,0,},{214,50,32,219,168,2,0,},},{{215,166,60,14,149,186,6,},{213,24,62,5,199,210,6,},},{{250,192,54,215,24,4,0,},{226,198,64,31,253,234,6,},
{209,28,36,218,162,0,0,},},{{220,28,36,218,12,4,0,},{212,126,62,5,21,163,6,},{212,80,56,206,238,2,0,},},{{2,93,54,206,210,1,0,},{216,230,32,253,168,2,0,},},
{{213,28,34,218,178,2,0,},{211,106,64,31,251,115,6,},{209,16,54,213,42,0,0,},},{{252,242,64,31,63,196,6,},{215,192,44,251,208,2,0,},{209,20,36,218,162,0,0,},},
{{254,78,2,217,0,0,0,},{220,18,34,218,6,4,0,},{210,26,54,213,46,3,0,},},{{12,207,56,232,222,1,0,},{252,246,32,253,68,4,0,},{210,28,54,213,46,3,0,},},
{{250,168,32,251,68,4,0,},{210,30,54,213,46,3,0,},},{{253,0,33,253,2,3,0,},{218,16,54,213,214,2,0,},},{{250,148,64,31,63,188,6,},{215,150,64,31,159,186,6,},
{206,112,60,14,149,114,6,},},{{232,214,32,226,68,4,0,},{216,238,56,216,136,2,0,},{208,20,34,218,124,3,0,},},{{253,246,64,31,253,194,6,},{215,154,32,251,168,2,0,},},
{{16,153,34,45,199,3,0,},{213,32,56,213,136,2,0,},},{{226,208,60,14,247,234,6,},{219,78,56,214,238,2,0,},{217,76,54,34,221,3,0,},},{{253,140,64,31,253,194,6,},
{251,168,56,215,238,2,0,},{232,222,32,226,68,4,0,},{214,58,56,214,136,2,0,},},{{216,246,34,253,178,2,0,},{210,14,54,213,46,3,0,},},{{232,226,64,31,63,236,6,},
{218,32,54,213,214,2,0,},{209,14,62,5,177,208,6,},},{{217,68,54,214,212,3,0,},{212,108,36,212,14,3,0,},},{{253,252,32,253,2,3,0,},{214,54,60,14,149,178,6,},
{214,52,62,5,199,218,6,},},{{13,109,2,211,0,0,0,},{253,230,64,31,253,194,6,},{218,38,54,21,231,2,0,},{214,54,62,5,199,218,6,},},{{221,212,60,14,149,234,6,},
{213,40,32,218,168,2,0,},{211,116,64,31,251,115,6,},},{{217,52,62,5,19,220,6,},{214,58,62,5,199,218,6,},},{{226,198,60,14,247,234,6,},{212,94,56,206,238,2,0,},
{206,98,64,31,159,114,6,},},{{16,175,58,43,205,3,0,},{220,26,54,213,212,3,0,},{217,62,32,219,0,4,0,},{213,18,44,218,208,2,0,},},{{219,60,56,214,238,2,0,},},
{{206,98,54,206,100,2,0,},},{{255,20,52,207,0,0,0,},{250,162,64,31,63,188,6,},{215,160,64,31,159,186,6,},{212,82,60,14,247,114,6,},},{{12,213,56,232,222,1,0,},
{252,252,32,253,68,4,0,},{252,238,34,253,74,4,0,},{220,18,54,213,212,3,0,},},{{250,162,60,14,57,188,6,},{210,40,54,213,46,3,0,},{209,30,54,213,42,0,0,},},
{{252,240,64,31,63,196,6,},{211,104,54,206,212,3,0,},{206,84,16,35,41,2,0,},},{{226,206,36,226,14,3,0,},{215,188,44,251,208,2,0,},{208,32,54,213,46,3,0,},},
{{232,204,32,226,68,4,0,},{216,228,56,216,136,2,0,},{212,112,36,212,14,3,0,},},{{213,30,54,213,100,2,0,},{207,42,54,37,39,1,0,},},{{232,208,64,31,63,236,6,},},
{{11,151,54,215,210,1,0,},{212,116,34,212,8,3,0,},{206,114,56,206,136,2,0,},},{{250,192,64,31,63,188,6,},{216,232,60,14,149,194,6,},},{{221,212,36,226,188,2,0,},
{218,40,62,5,21,211,6,},},{{255,130,52,207,0,0,0,},{250,150,34,251,74,4,0,},{215,148,34,251,178,2,0,},},{{0,15,48,209,0,0,0,},{214,78,44,219,208,2,0,},
{209,44,64,31,121,168,6,},},{{216,240,44,253,208,2,0,},{210,34,34,218,124,3,0,},},{{250,144,54,215,24,4,0,},},{{250,158,34,251,74,4,0,},{218,20,64,31,253,170,6,},
{209,34,56,213,90,0,0,},},{{253,252,56,216,238,2,0,},{226,222,60,14,247,234,6,},{214,74,64,31,159,178,6,},{212,126,64,31,253,114,6,},},{{218,16,32,218,2,3,0,},
{216,0,37,253,188,2,0,},{210,8,56,255,184,3,0,},},{{250,154,36,251,80,4,0,},},{{214,74,62,5,199,218,6,},{211,126,56,206,236,3,0,},},{{10,253,54,216,210,1,0,},
{219,62,54,214,214,2,0,},{217,50,62,5,19,220,6,},},{{251,162,64,31,253,186,6,},{251,156,54,215,214,2,0,},{210,20,60,14,95,171,6,},},{{15,155,38,250,4,0,0,},
{250,160,54,215,24,4,0,},{216,252,54,216,100,2,0,},},{{17,117,22,2,1,0,0,},{250,162,54,215,24,4,0,},{213,20,62,5,199,210,6,},},{{226,226,32,226,2,3,0,},
{206,94,36,212,188,2,0,},},{{2,127,54,206,210,1,0,},{251,148,54,215,214,2,0,},{213,44,34,218,178,2,0,},{212,122,62,5,21,163,6,},},{{7,51,54,214,210,1,0,},
{252,242,32,253,68,4,0,},{220,24,34,218,6,4,0,},},{{13,113,2,211,0,0,0,},{252,254,54,33,33,4,0,},{212,80,64,31,253,114,6,},{209,40,34,218,148,0,0,},},
{{3,27,50,207,0,0,0,},{209,12,64,31,121,168,6,},},{{0,29,48,209,0,0,0,},{232,202,62,5,87,20,7,},{208,24,36,218,134,3,0,},},{{8,205,54,221,210,1,0,},
{220,16,34,218,6,4,0,},{216,230,36,253,188,2,0,},{208,28,54,213,46,3,0,},},{{250,160,36,251,80,4,0,},{212,122,34,212,8,3,0,},{209,130,56,20,223,0,0,},},
{{218,34,64,31,253,170,6,},{215,192,32,251,168,2,0,},{212,94,64,31,253,114,6,},},{{255,134,52,207,0,0,0,},{226,200,56,221,238,2,0,},{206,116,60,14,149,114,6,},},
{{252,246,36,253,80,4,0,},{220,20,62,5,19,212,6,},},{{250,168,36,251,80,4,0,},{232,204,36,226,80,4,0,},{207,16,54,213,24,1,0,},},{{18,95,20,2,1,0,0,},
{254,56,2,217,0,0,0,},{253,0,61,14,247,194,6,},},{{253,246,56,216,238,2,0,},{218,40,32,218,2,3,0,},{217,72,54,19,229,3,0,},},{{216,238,60,14,149,194,6,},
{214,74,36,219,188,2,0,},{214,62,64,31,159,178,6,},},{{252,238,62,5,87,236,7,},{226,212,64,31,253,234,6,},},{{218,18,64,31,253,170,6,},{209,32,60,14,107,168,6,},},
{{226,208,32,226,2,3,0,},{219,78,36,219,14,3,0,},},{{232,222,36,226,80,4,0,},{214,58,60,14,149,178,6,},{210,32,54,213,46,3,0,},},{{250,144,60,14,57,188,6,},
{218,18,54,213,214,2,0,},},{{221,208,60,14,149,234,6,},{219,74,34,219,8,3,0,},},{{232,226,62,5,87,20,7,},{206,106,34,212,178,2,0,},},{{0,19,48,209,0,0,0,},
{214,54,56,214,136,2,0,},{210,44,34,218,124,3,0,},},{{251,144,54,215,214,2,0,},{218,26,54,213,214,2,0,},{215,192,62,5,199,218,7,},},{{213,40,44,218,208,2,0,},
{213,14,34,218,178,2,0,},},{{219,66,56,214,238,2,0,},{214,50,34,219,178,2,0,},{206,102,54,13,73,2,0,},},{{0,27,48,209,0,0,0,},{219,52,64,31,253,178,6,},
{212,94,60,14,247,114,6,},{210,28,34,218,124,3,0,},},{0},{{220,24,62,5,19,212,6,},{209,26,54,213,42,0,0,},},{{252,228,64,31,63,196,6,},{212,100,64,31,253,114,6,},
{206,92,60,14,149,114,6,},},{{253,238,54,216,214,2,0,},{232,196,62,5,87,20,7,},{212,82,56,206,238,2,0,},},{{251,160,54,215,214,2,0,},{232,206,62,5,87,20,7,},
{218,14,34,218,8,3,0,},},{{232,200,62,5,87,20,7,},{213,26,54,213,100,2,0,},{211,108,36,212,12,4,0,},},{{218,32,64,31,253,170,6,},{206,84,12,35,9,2,0,},},
{{226,206,32,226,2,3,0,},{206,122,44,212,208,2,0,},},{{12,201,56,232,222,1,0,},{232,198,62,5,87,20,7,},{216,228,60,14,149,194,6,},{212,112,32,212,2,3,0,},},
{{220,40,62,5,19,212,6,},{215,192,64,31,159,186,6,},{207,40,64,31,93,169,6,},},{{212,116,64,31,253,114,6,},{211,104,34,212,6,4,0,},},{{226,214,32,226,2,3,0,},
{206,114,60,14,149,114,6,},},{{216,232,56,216,136,2,0,},{207,40,54,213,24,1,0,},},{{252,232,62,5,87,236,7,},{220,14,32,218,0,4,0,},{213,116,0,4,233,1,0,},},
{{217,74,36,219,12,4,0,},{214,58,34,219,178,2,0,},},{{232,212,54,221,24,4,0,},{208,26,64,31,105,171,6,},},{{0,41,48,209,0,0,0,},{214,60,56,214,136,2,0,},
{208,14,62,5,145,211,6,},},{{12,223,56,232,222,1,0,},{215,144,56,215,136,2,0,},},{{1,1,46,207,0,0,0,},{219,50,56,214,238,2,0,},{209,34,52,207,232,0,0,},},
{{226,222,56,221,238,2,0,},{212,106,64,31,253,114,6,},{208,30,60,14,95,171,6,},},{{218,16,36,218,14,3,0,},{213,28,54,213,100,2,0,},},{{16,165,58,15,191,3,0,},
{220,32,54,213,212,3,0,},{215,150,62,5,199,218,7,},{208,26,60,14,95,171,6,},},{{221,194,60,14,149,234,6,},{210,20,52,207,180,3,0,},},{{215,154,62,5,199,218,7,},
{206,104,54,206,100,2,0,},},{{221,206,60,14,149,234,6,},{210,20,56,213,82,3,0,},},{{1,35,46,207,0,0,0,},{221,214,34,226,178,2,0,},{219,64,64,31,253,178,6,},
{211,122,34,212,6,4,0,},},{{3,137,50,207,0,0,0,},{252,250,54,25,41,4,0,},{215,156,62,5,199,218,7,},},{{11,163,54,215,210,1,0,},{217,54,54,214,212,3,0,},
{206,94,32,212,168,2,0,},},{{226,196,32,226,2,3,0,},{208,20,52,207,180,3,0,},{206,96,44,212,208,2,0,},},{{221,212,56,221,136,2,0,},{213,20,64,31,159,170,6,},},
{{221,222,56,221,136,2,0,},{211,114,56,206,236,3,0,},},{{217,46,54,214,212,3,0,},},{{30,1,21,10,1,0,0,},{210,24,36,218,134,3,0,},{208,24,32,218,114,3,0,},},
{{220,16,62,5,19,212,6,},{216,230,56,216,136,2,0,},{206,82,64,31,159,114,6,},},{{3,25,50,207,0,0,0,},{209,130,52,207,232,0,0,},{209,16,62,5,177,208,6,},},
{{252,230,60,14,57,196,6,},{232,214,36,226,80,4,0,},{215,192,36,251,188,2,0,},},{{226,200,60,14,247,234,6,},{206,116,56,206,136,2,0,},},{{216,234,60,14,149,194,6,},
{207,20,36,218,128,1,0,},},{{252,234,62,5,87,236,7,},{250,168,56,215,48,4,0,},{221,226,60,14,149,234,6,},},{{253,0,57,216,238,2,0,},},{{253,246,60,14,247,194,6,},
{226,212,56,221,238,2,0,},{210,40,36,218,134,3,0,},},{{216,242,44,253,208,2,0,},{210,14,52,207,180,3,0,},{207,28,36,218,128,1,0,},},{{215,150,60,14,149,186,6,},
{209,44,34,218,148,0,0,},{206,112,64,31,159,114,6,},},{{209,32,56,213,90,0,0,},},{{252,240,56,216,48,4,0,},{219,78,32,219,2,3,0,},{210,32,52,207,180,3,0,},},
{{2,109,54,206,210,1,0,},{252,242,60,14,57,196,6,},{213,42,54,37,113,2,0,},},{{218,30,54,213,214,2,0,},{215,158,44,251,208,2,0,},{209,14,32,218,134,0,0,},},
{{221,208,56,221,136,2,0,},},{{219,60,34,219,8,3,0,},{217,68,62,5,19,220,6,},{206,100,64,31,159,114,6,},},{{252,230,64,31,63,196,6,},{210,44,62,5,145,211,6,},
{208,34,60,14,95,171,6,},},{{253,228,34,253,8,3,0,},{219,66,64,31,253,178,6,},{210,18,34,218,124,3,0,},},{{219,66,54,214,214,2,0,},},{{6,35,54,213,210,1,0,},
{251,158,32,251,2,3,0,},{219,66,60,14,247,178,6,},{219,56,62,5,21,219,6,},},{{253,234,54,216,214,2,0,},{251,188,36,251,14,3,0,},},{{7,77,54,34,215,1,0,},
{250,148,36,251,80,4,0,},{219,68,54,214,214,2,0,},{206,100,60,14,149,114,6,},},{{216,140,54,216,100,2,0,},{211,90,54,206,212,3,0,},},{{253,234,64,31,253,194,6,},
{206,92,56,206,136,2,0,},},{{251,150,62,5,21,219,7,},{226,202,64,31,253,234,6,},{208,26,52,207,180,3,0,},},{{5,173,42,16,1,0,0,},{220,18,62,5,19,212,6,},
{208,136,52,207,180,3,0,},{207,14,36,218,128,1,0,},},{{3,135,50,207,0,0,0,},{206,126,64,31,159,114,6,},},{{47,143,56,39,219,1,0,},{4,47,54,207,210,1,0,},},
{{232,200,54,221,24,4,0,},{208,30,56,213,82,3,0,},{206,122,32,212,168,2,0,},},{{215,138,40,38,227,1,0,},{207,44,54,213,24,1,0,},},{{221,200,32,226,168,2,0,},
{214,54,64,31,159,178,6,},{211,100,32,212,0,4,0,},},{{41,139,40,38,5,0,0,},{226,226,62,5,21,19,7,},{218,44,64,31,253,170,6,},},{{255,128,56,255,210,1,0,},
{253,244,56,216,238,2,0,},{232,208,54,221,24,4,0,},{226,214,60,14,247,234,6,},},{{252,244,64,31,63,196,6,},{208,40,36,218,134,3,0,},},{{216,242,32,253,168,2,0,},
{208,32,34,218,124,3,0,},},{{253,230,60,14,247,194,6,},{217,74,32,219,0,4,0,},{208,34,34,218,124,3,0,},},{{214,78,36,219,188,2,0,},{208,44,34,218,124,3,0,},},
{{254,50,2,217,0,0,0,},{217,78,64,31,251,179,6,},{210,12,60,14,95,171,6,},{208,14,34,218,124,3,0,},},{{3,15,50,207,0,0,0,},{218,20,34,218,8,3,0,},
{215,144,60,14,149,186,6,},},{{3,45,50,207,0,0,0,},{207,30,64,31,93,169,6,},},{{4,9,54,207,210,1,0,},{214,56,34,219,178,2,0,},{206,108,54,206,100,2,0,},},
{{21,33,22,6,1,0,0,},{220,44,56,213,236,3,0,},{216,244,56,216,136,2,0,},{207,26,32,218,104,1,0,},},{{253,232,32,253,2,3,0,},{226,200,62,5,21,19,7,},
{218,28,34,218,8,3,0,},},{{211,126,32,212,0,4,0,},{206,108,64,31,159,114,6,},},{{11,167,54,215,210,1,0,},{219,62,62,5,21,219,6,},{217,50,54,214,212,3,0,},},
{{251,162,56,215,238,2,0,},{232,198,34,226,74,4,0,},{208,16,52,207,180,3,0,},},{{7,67,54,214,210,1,0,},{218,24,62,5,21,211,6,},{211,106,54,206,212,3,0,},
{207,4,56,0,161,1,0,},},{{255,114,52,207,0,0,0,},{209,24,34,218,148,0,0,},},{{219,58,34,219,8,3,0,},{210,26,64,31,105,171,6,},{206,94,60,14,149,114,6,},},
{{219,54,36,219,14,3,0,},{212,122,54,206,214,2,0,},{206,96,32,212,168,2,0,},},{{5,163,42,250,0,0,0,},{226,226,36,226,14,3,0,},{207,0,52,207,196,1,0,},},
{{221,222,60,14,149,234,6,},{213,50,0,4,233,1,0,},{209,28,62,5,177,208,6,},},{{252,0,63,5,87,236,7,},{219,50,34,219,8,3,0,},},{{210,24,56,213,82,3,0,},
{208,24,60,14,95,171,6,},},{{216,230,60,14,149,194,6,},{207,8,52,207,196,1,0,},},{{1,21,46,207,0,0,0,},{221,194,56,221,136,2,0,},{215,162,44,251,208,2,0,},
{211,110,56,206,236,3,0,},},{{232,206,32,226,68,4,0,},},{{253,242,60,14,247,194,6,},{210,16,56,213,82,3,0,},},{{5,179,42,16,1,0,0,},{252,234,64,31,63,196,6,},
{210,114,52,207,180,3,0,},{207,20,32,218,104,1,0,},},{{250,168,60,14,57,188,6,},{208,20,36,218,134,3,0,},},{{215,154,34,251,178,2,0,},{209,40,36,218,162,0,0,},},
{{221,206,32,226,168,2,0,},{216,238,34,253,178,2,0,},},{{220,12,54,213,212,3,0,},{214,62,56,214,136,2,0,},{207,28,32,218,104,1,0,},},{{250,148,56,215,48,4,0,},
{221,206,36,226,188,2,0,},{208,128,56,255,184,3,0,},},{{1,115,46,207,0,0,0,},{209,32,36,218,162,0,0,},{207,24,64,31,93,169,6,},},{{13,101,2,211,0,0,0,},
{11,189,54,215,210,1,0,},{219,74,32,219,2,3,0,},},{{217,56,64,31,251,179,6,},{210,32,62,5,145,211,6,},{208,12,54,213,46,3,0,},},{{252,230,54,216,24,4,0,},
{214,52,56,214,136,2,0,},{209,14,36,218,162,0,0,},},{{217,60,32,219,0,4,0,},{206,106,64,31,159,114,6,},},{{219,60,62,5,21,219,6,},{217,68,34,219,6,4,0,},
{211,98,32,212,0,4,0,},},{{254,20,2,220,0,0,0,},{218,30,64,31,253,170,6,},{214,54,32,219,168,2,0,},},{{218,26,62,5,21,211,6,},{208,18,34,218,124,3,0,},},
{{214,62,60,14,149,178,6,},{211,94,54,206,212,3,0,},},{{253,230,56,216,238,2,0,},{212,96,36,212,14,3,0,},},{{251,188,32,251,2,3,0,},{251,154,62,5,21,219,7,},
{212,100,54,206,214,2,0,},},{{250,186,54,27,41,4,0,},{213,44,54,213,100,2,0,},},{{3,35,50,207,0,0,0,},{213,28,64,31,159,170,6,},{209,26,62,5,177,208,6,},},
{{232,196,32,226,68,4,0,},{210,40,56,213,82,3,0,},},{{218,14,64,31,253,170,6,},{210,26,52,207,180,3,0,},{209,24,64,31,121,168,6,},},{{33,249,2,30,1,0,0,},
{216,254,54,33,113,2,0,},{207,14,32,218,104,1,0,},},{{1,19,46,207,0,0,0,},{211,108,60,14,245,115,6,},},{{221,196,34,226,178,2,0,},{216,250,54,25,125,2,0,},
{209,18,36,218,162,0,0,},},{{206,122,36,212,188,2,0,},},{{5,177,42,16,1,0,0,},{213,14,36,218,188,2,0,},},{{215,168,56,215,136,2,0,},{207,44,52,207,196,1,0,},},
{{4,19,54,207,210,1,0,},{206,80,56,206,136,2,0,},},{{253,244,60,14,247,194,6,},{226,214,56,221,238,2,0,},{212,116,62,5,21,163,6,},},{{208,40,32,218,114,3,0,},
{207,40,62,5,141,209,6,},},{{250,150,60,14,57,188,6,},{215,148,60,14,149,186,6,},{209,42,54,37,59,0,0,},},{{212,88,60,14,247,114,6,},},{{38,137,126,38,1,128,6,},
{232,212,62,5,87,20,7,},{214,78,32,219,168,2,0,},{214,66,60,14,149,178,6,},},{{217,58,64,31,251,179,6,},{214,60,32,219,168,2,0,},{210,12,56,213,82,3,0,},},
{{5,151,42,250,0,0,0,},{251,160,64,31,253,186,6,},},{{253,252,34,253,8,3,0,},},{{6,41,54,213,210,1,0,},{214,74,60,14,149,178,6,},},{{216,244,60,14,149,194,6,},
{210,8,52,207,180,3,0,},{207,26,36,218,128,1,0,},},{{28,115,4,29,5,0,0,},{218,28,62,5,21,211,6,},},{{232,204,64,31,63,236,6,},{217,62,56,214,236,3,0,},},
{{219,64,60,14,247,178,6,},{206,104,62,5,199,162,6,},},{{251,162,60,14,247,186,6,},{216,252,44,253,208,2,0,},{210,16,52,207,180,3,0,},},{{213,16,36,218,188,2,0,},
{207,128,56,255,202,1,0,},},{{209,24,62,5,177,208,6,},},{{29,23,54,254,250,0,0,},{206,94,56,206,136,2,0,},},{{0,25,48,209,0,0,0,},{219,54,32,219,2,3,0,},
{206,96,36,212,188,2,0,},},{{213,24,36,218,188,2,0,},{207,38,54,21,53,1,0,},},{{15,149,38,250,4,0,0,},{13,117,2,211,0,0,0,},{219,50,64,31,253,178,6,},},
{{217,64,64,31,251,179,6,},{212,122,32,212,2,3,0,},},{{232,202,34,226,74,4,0,},{210,24,60,14,95,171,6,},{208,24,56,213,82,3,0,},},{{254,32,2,220,0,0,0,},
{208,28,34,218,124,3,0,},{207,8,56,255,202,1,0,},},{{15,157,38,250,4,0,0,},{212,96,60,14,247,114,6,},},{{4,29,54,207,210,1,0,},{232,206,36,226,80,4,0,},
{206,120,54,17,125,2,0,},},{{253,242,56,216,238,2,0,},{212,108,60,14,247,114,6,},},{{216,234,36,253,188,2,0,},{207,20,60,14,81,169,6,},},{{252,234,54,216,24,4,0,},
{220,20,64,31,251,171,6,},{207,16,34,218,116,1,0,},},{{221,202,34,226,178,2,0,},{209,40,32,218,134,0,0,},},{{232,214,62,5,87,20,7,},{214,78,34,219,178,2,0,},},
{{12,199,56,232,222,1,0,},{216,242,36,253,188,2,0,},{210,14,60,14,95,171,6,},},{{5,149,42,250,0,0,0,},{221,206,56,221,136,2,0,},{215,150,36,251,188,2,0,},
{211,98,56,206,236,3,0,},},{{209,32,32,218,134,0,0,},},{{2,123,54,206,210,1,0,},{250,192,60,14,57,188,6,},{217,56,34,219,6,4,0,},},{{10,245,54,216,210,1,0,},
{2,125,54,36,215,1,0,},{232,226,60,14,57,236,6,},{216,246,56,216,136,2,0,},},{{252,140,56,216,48,4,0,},{250,156,36,251,80,4,0,},{219,58,64,31,253,178,6,},
{215,158,36,251,188,2,0,},},{{219,60,64,31,253,178,6,},{215,192,60,14,149,186,6,},},{{218,24,60,14,247,170,6,},{206,106,62,5,199,162,6,},},{{232,226,36,226,80,4,0,},
{218,26,56,213,238,2,0,},{210,44,54,213,46,3,0,},},{{3,1,50,207,0,0,0,},{250,190,54,44,33,4,0,},{213,40,54,213,100,2,0,},{213,14,56,213,136,2,0,},},
{{2,105,54,206,210,1,0,},{220,30,60,14,245,171,6,},{217,52,36,219,12,4,0,},},{{219,56,54,214,214,2,0,},{218,16,60,14,247,170,6,},{212,96,32,212,2,3,0,},},
{{251,154,34,251,8,3,0,},{216,238,64,31,159,194,6,},{214,46,60,14,149,178,6,},},{{2,111,54,206,210,1,0,},{252,0,37,253,80,4,0,},{207,32,34,218,116,1,0,},},
{{220,26,64,31,251,171,6,},{211,112,60,14,245,115,6,},},{{232,196,36,226,80,4,0,},{218,40,60,14,247,170,6,},},{{251,150,54,215,214,2,0,},{220,34,60,14,245,171,6,},
{207,32,64,31,93,169,6,},},{{218,14,54,213,214,2,0,},{207,14,60,14,81,169,6,},},{{2,89,54,206,210,1,0,},{215,160,44,251,208,2,0,},{211,108,56,206,236,3,0,},},
{{253,240,34,253,8,3,0,},{220,40,56,213,236,3,0,},{209,18,32,218,134,0,0,},},{{8,201,54,221,210,1,0,},{212,112,62,5,21,163,6,},{208,30,64,31,105,171,6,},},
{{14,235,26,252,0,0,0,},{218,32,56,213,238,2,0,},{207,44,62,5,141,209,6,},},{{250,192,62,5,87,220,7,},{232,222,60,14,57,236,6,},{215,168,60,14,149,186,6,},},
{{226,202,54,221,214,2,0,},{219,46,64,31,253,178,6,},{206,80,60,14,149,114,6,},},{{251,192,56,215,238,2,0,},{232,208,62,5,87,20,7,},{214,58,32,219,168,2,0,},},
{{0,133,48,209,0,0,0,},{252,232,36,253,80,4,0,},{214,60,36,219,188,2,0,},},{{250,150,56,215,48,4,0,},{215,148,56,215,136,2,0,},{211,100,56,206,236,3,0,},},
{{8,223,54,221,210,1,0,},{216,234,34,253,178,2,0,},},{{232,212,34,226,74,4,0,},{214,78,60,14,149,178,6,},},{{220,40,60,14,245,171,6,},{214,74,34,219,178,2,0,},
{214,60,44,219,208,2,0,},},{{221,198,62,5,199,18,7,},{209,28,60,14,107,168,6,},},{{220,40,64,31,251,171,6,},{216,240,64,31,159,194,6,},{215,150,56,215,136,2,0,},},
{{219,68,60,14,247,178,6,},{217,66,54,214,212,3,0,},{206,108,62,5,199,162,6,},},{{220,44,32,218,0,4,0,},{207,26,56,213,66,1,0,},},{{252,228,62,5,87,236,7,},
{221,206,62,5,199,18,7,},{213,38,54,21,125,2,0,},},{{217,62,60,14,245,179,6,},{215,158,56,215,136,2,0,},},{{253,228,56,216,238,2,0,},{221,202,62,5,199,18,7,},
{215,156,60,14,149,186,6,},},{{37,37,2,22,1,0,0,},{232,194,54,221,24,4,0,},{216,252,32,253,168,2,0,},{208,16,60,14,95,171,6,},},{{250,188,34,251,74,4,0,},
{218,24,54,213,214,2,0,},{213,16,32,218,168,2,0,},},{{1,29,46,207,0,0,0,},{221,212,62,5,199,18,7,},{220,24,64,31,251,171,6,},},{{253,232,60,14,247,194,6,},
{250,154,56,215,48,4,0,},{217,54,34,219,6,4,0,},{206,90,64,31,159,114,6,},},{{221,208,62,5,199,18,7,},{210,28,60,14,95,171,6,},},{{5,171,42,16,1,0,0,},
{226,222,64,31,253,234,6,},{213,24,32,218,168,2,0,},},{{3,29,50,207,0,0,0,},{209,28,54,213,42,0,0,},},{{4,25,54,207,210,1,0,},{206,124,54,36,113,2,0,},},
{{250,148,60,14,57,188,6,},{212,126,34,212,8,3,0,},{208,24,52,207,180,3,0,},},{{216,234,56,216,136,2,0,},{207,34,62,5,141,209,6,},},{{3,21,50,207,0,0,0,},
{221,194,64,31,159,234,6,},{211,110,64,31,251,115,6,},{209,20,54,213,42,0,0,},},{{221,226,62,5,199,18,7,},{216,230,64,31,159,194,6,},{206,82,56,206,136,2,0,},},
{{253,242,36,253,14,3,0,},{208,0,52,207,180,3,0,},{206,116,44,212,208,2,0,},},{{216,234,32,253,168,2,0,},{207,20,56,213,66,1,0,},},{{216,252,36,253,188,2,0,},
{213,34,32,218,168,2,0,},},{{14,1,27,252,0,0,0,},{250,162,56,215,48,4,0,},{221,212,64,31,159,234,6,},{215,188,60,14,149,186,6,},},{{215,162,32,251,168,2,0,},
{208,4,56,0,161,3,0,},},{{215,160,60,14,149,186,6,},{210,14,56,213,82,3,0,},},{{250,148,32,251,68,4,0,},{215,166,56,215,136,2,0,},{209,44,62,5,177,208,6,},},
{{216,246,64,31,159,194,6,},{213,32,36,218,188,2,0,},},{{254,66,2,217,0,0,0,},{210,38,54,21,71,3,0,},{210,32,32,218,114,3,0,},},{{216,246,60,14,149,194,6,},
{207,24,52,207,196,1,0,},},{{250,156,32,251,68,4,0,},{215,158,32,251,168,2,0,},{210,44,64,31,105,171,6,},},{{253,228,32,253,2,3,0,},{217,60,56,214,236,3,0,},
{211,88,64,31,251,115,6,},},{{255,46,52,207,0,0,0,},{219,60,54,214,214,2,0,},{212,108,56,206,238,2,0,},},{{19,67,22,7,1,0,0,},{220,34,56,213,236,3,0,},
{213,40,64,31,159,170,6,},{206,96,62,5,199,162,6,},},{{215,154,60,14,149,186,6,},{206,98,62,5,199,162,6,},},{{3,115,50,207,0,0,0,},{209,136,52,207,232,0,0,},
{206,100,62,5,199,162,6,},},{{253,230,32,253,2,3,0,},{214,64,56,214,136,2,0,},{211,90,56,206,236,3,0,},},{{44,185,2,26,1,0,0,},{251,188,56,215,238,2,0,},
{214,46,56,214,136,2,0,},},{{252,0,33,253,68,4,0,},{220,26,34,218,6,4,0,},{213,18,56,213,136,2,0,},},{{219,52,36,219,14,3,0,},{206,98,32,212,168,2,0,},},
{{253,238,32,253,2,3,0,},{206,88,56,206,136,2,0,},},{{10,241,54,216,210,1,0,},{208,26,56,213,82,3,0,},},{{7,57,54,214,210,1,0,},{207,32,62,5,141,209,6,},
{207,14,56,213,66,1,0,},},{{254,40,2,220,0,0,0,},{250,162,32,251,68,4,0,},{215,160,32,251,168,2,0,},{211,86,54,206,212,3,0,},},{{226,206,54,221,214,2,0,},
{216,228,64,31,159,194,6,},{208,32,36,218,134,3,0,},},{{253,240,56,216,238,2,0,},{232,204,62,5,87,20,7,},{226,226,60,14,247,234,6,},},{{15,161,38,250,4,0,0,},
{252,240,32,253,68,4,0,},{218,32,60,14,247,170,6,},},{{251,144,56,215,238,2,0,},{221,226,54,221,100,2,0,},{215,168,32,251,168,2,0,},},{{254,58,2,217,0,0,0,},
{251,150,60,14,247,186,6,},{210,24,32,218,114,3,0,},},{{255,128,52,207,0,0,0,},{251,192,60,14,247,186,6,},{212,116,54,206,214,2,0,},{208,34,32,218,114,3,0,},},
{{252,232,32,253,68,4,0,},{220,14,62,5,19,212,6,},{207,18,52,207,196,1,0,},},{{3,19,50,207,0,0,0,},{221,204,56,221,136,2,0,},{211,96,56,206,236,3,0,},},
{{3,17,50,207,0,0,0,},{0,21,48,209,0,0,0,},},{{253,238,62,5,21,235,7,},{214,78,56,214,136,2,0,},{208,44,62,5,145,211,6,},},{{212,106,34,212,8,3,0,},
{212,98,34,212,8,3,0,},{210,34,54,213,46,3,0,},},{{253,234,62,5,21,235,7,},{251,160,56,215,238,2,0,},{213,34,54,213,100,2,0,},},{{251,166,60,14,247,186,6,},
{217,78,56,214,236,3,0,},{217,58,60,14,245,179,6,},},{{219,68,56,214,238,2,0,},{211,112,36,212,12,4,0,},},{{220,44,36,218,12,4,0,},{207,26,60,14,81,169,6,},},
{{232,198,32,226,68,4,0,},{218,28,54,213,214,2,0,},{213,12,56,213,136,2,0,},},{{219,62,36,219,14,3,0,},{211,122,64,31,251,115,6,},{206,104,32,212,168,2,0,},},
{{253,228,60,14,247,194,6,},{226,194,60,14,247,234,6,},{210,20,34,218,124,3,0,},},{{2,115,54,206,210,1,0,},{214,52,64,31,159,178,6,},{208,16,56,213,82,3,0,},},
{{250,188,62,5,87,220,7,},{214,54,36,219,188,2,0,},{213,16,60,14,149,170,6,},},{{213,20,34,218,178,2,0,},{209,24,54,213,42,0,0,},},{{6,33,54,213,210,1,0,},
{253,232,56,216,238,2,0,},},{{252,0,57,216,48,4,0,},{210,28,56,213,82,3,0,},},{{213,24,44,218,208,2,0,},{207,12,60,14,81,169,6,},},{{1,137,46,207,0,0,0,},
{217,46,64,31,251,179,6,},{213,18,60,14,149,170,6,},},{{219,50,62,5,21,219,6,},},{{220,28,60,14,245,171,6,},{210,24,52,207,180,3,0,},},{{218,34,56,213,238,2,0,},
{216,0,55,216,100,2,0,},{209,16,36,218,162,0,0,},},{{221,198,56,221,136,2,0,},{211,106,56,206,236,3,0,},},{{226,204,34,226,8,3,0,},{206,82,60,14,149,114,6,},},
{{253,242,32,253,2,3,0,},{215,154,36,251,188,2,0,},},{{14,233,26,252,0,0,0,},{220,20,34,218,6,4,0,},{216,234,44,253,208,2,0,},{207,16,64,31,93,169,6,},},
{{221,202,60,14,149,234,6,},{209,40,62,5,177,208,6,},},{{226,212,34,226,8,3,0,},},{{0,9,48,209,0,0,0,},{232,214,54,221,24,4,0,},{213,14,60,14,149,170,6,},},
{{216,242,60,14,149,194,6,},{210,14,36,218,134,3,0,},{207,28,52,207,196,1,0,},},{{215,150,44,251,208,2,0,},{210,254,127,208,2,128,6,},},{{253,252,36,253,14,3,0,},
{226,196,34,226,8,3,0,},{213,32,32,218,168,2,0,},},{{232,222,54,221,24,4,0,},{210,32,36,218,134,3,0,},},{{218,18,32,218,2,3,0,},{207,24,56,213,66,1,0,},},
{{250,156,60,14,57,188,6,},{215,158,60,14,149,186,6,},{211,96,34,212,6,4,0,},},{{4,45,54,207,210,1,0,},{219,56,36,219,14,3,0,},{217,60,60,14,245,179,6,},},
{{4,15,54,207,210,1,0,},{220,16,64,31,251,171,6,},{206,106,54,206,100,2,0,},},{{214,50,64,31,159,178,6,},{208,18,60,14,95,171,6,},},{{7,53,54,214,210,1,0,},
{221,212,34,226,178,2,0,},{215,188,62,5,199,218,7,},{213,40,62,5,199,210,6,},},{{211,116,56,206,236,3,0,},{209,6,54,3,213,0,0,},},{{253,230,36,253,14,3,0,},
{214,64,60,14,149,178,6,},{214,50,54,214,100,2,0,},{210,128,52,207,180,3,0,},},{{22,15,20,6,1,0,0,},{226,198,36,226,14,3,0,},{212,94,32,212,2,3,0,},
{210,30,60,14,95,171,6,},},{{7,61,54,214,210,1,0,},{250,160,32,251,68,4,0,},{209,26,36,218,162,0,0,},{208,20,64,31,105,171,6,},},{{252,244,54,216,24,4,0,},
{219,52,32,219,2,3,0,},{206,98,36,212,188,2,0,},},{{253,238,36,253,14,3,0,},{211,86,64,31,251,115,6,},{206,88,60,14,149,114,6,},},{{10,229,54,216,210,1,0,},
{220,30,56,213,236,3,0,},{210,26,32,218,114,3,0,},{208,26,36,218,134,3,0,},},{{252,252,56,216,48,4,0,},{208,42,54,37,59,3,0,},{207,14,52,207,196,1,0,},},
{{250,162,36,251,80,4,0,},{215,160,36,251,188,2,0,},{213,26,34,218,178,2,0,},},{{208,32,32,218,114,3,0,},{206,122,62,5,199,162,6,},},{{255,132,52,207,0,0,0,},
{212,112,54,206,214,2,0,},},{{252,240,60,14,57,196,6,},{218,32,32,218,2,3,0,},{213,30,56,213,136,2,0,},},{{250,156,34,251,74,4,0,},{221,208,32,226,168,2,0,},
{215,168,36,251,188,2,0,},},{{226,202,62,5,21,19,7,},{212,94,62,5,21,163,6,},},{{219,64,56,214,238,2,0,},{207,40,32,218,104,1,0,},},{{208,44,64,31,105,171,6,},
{207,18,56,213,66,1,0,},},{{221,204,60,14,149,234,6,},{216,138,24,38,227,1,0,},{209,102,54,13,27,0,0,},},{{255,26,52,207,0,0,0,},{217,66,32,219,0,4,0,},
{216,0,33,253,168,2,0,},},{{220,14,64,31,251,171,6,},{210,134,52,207,180,3,0,},},{{207,30,60,14,81,169,6,},},{0},{{217,58,56,214,236,3,0,},{210,12,64,31,105,171,6,},},
{{219,68,36,219,14,3,0,},{212,110,56,206,238,2,0,},},{{218,16,56,213,238,2,0,},},{{13,107,2,211,0,0,0,},{252,228,54,216,24,4,0,},{220,32,34,218,6,4,0,},
{213,12,60,14,149,170,6,},},{{219,62,32,219,2,3,0,},{206,104,36,212,188,2,0,},},{{251,156,36,251,14,3,0,},{210,34,32,218,114,3,0,},},{{216,252,56,216,136,2,0,},
{208,16,36,218,134,3,0,},},{{213,16,56,213,136,2,0,},{211,122,54,206,212,3,0,},},{{211,88,54,206,212,3,0,},{210,28,64,31,105,171,6,},},{{251,148,36,251,14,3,0,},
{226,196,54,221,214,2,0,},{219,54,62,5,21,219,6,},{206,90,56,206,136,2,0,},},{{220,24,60,14,245,171,6,},{210,28,52,207,180,3,0,},},{{212,100,62,5,21,163,6,},
{207,12,56,213,66,1,0,},},{{226,208,36,226,14,3,0,},},{{3,131,50,207,0,0,0,},{209,28,64,31,121,168,6,},{206,86,60,14,149,114,6,},},{{3,129,50,207,0,0,0,},
{207,34,32,218,104,1,0,},},{{215,162,54,215,100,2,0,},{209,16,32,218,134,0,0,},},{{221,198,60,14,149,234,6,},{209,134,52,207,232,0,0,},{209,20,62,5,177,208,6,},},
{{226,204,62,5,21,19,7,},{212,104,62,5,21,163,6,},},{{226,200,32,226,2,3,0,},{206,116,36,212,188,2,0,},},{{252,246,60,14,57,196,6,},{211,82,54,206,212,3,0,},},
{{221,202,56,221,136,2,0,},{211,80,54,206,212,3,0,},},{{226,194,64,31,253,234,6,},{206,112,34,212,178,2,0,},},{{220,12,64,31,251,171,6,},{218,14,62,5,21,211,6,},},
{{251,158,34,251,8,3,0,},{216,242,56,216,136,2,0,},{210,14,32,218,114,3,0,},},{{226,204,64,31,253,234,6,},{209,44,54,213,42,0,0,},},{{4,41,54,207,210,1,0,},
{219,78,54,214,214,2,0,},{217,56,60,14,245,179,6,},},{{251,168,34,251,8,3,0,},{212,104,60,14,247,114,6,},{206,110,54,206,100,2,0,},},{{1,15,46,207,0,0,0,},
{213,20,44,218,208,2,0,},{207,24,60,14,81,169,6,},},{{250,156,56,215,48,4,0,},{209,14,52,207,232,0,0,},},{{221,208,36,226,188,2,0,},{217,64,60,14,245,179,6,},
{213,16,44,218,208,2,0,},},{{210,132,52,207,180,3,0,},{209,14,64,31,121,168,6,},},{{218,26,36,218,14,3,0,},{210,18,60,14,95,171,6,},{208,18,56,213,82,3,0,},},
{{20,7,54,3,211,1,0,},{7,65,54,214,210,1,0,},{215,150,32,251,168,2,0,},},{{211,116,36,212,12,4,0,},},{{251,158,60,14,247,186,6,},{210,128,56,255,184,3,0,},
{210,40,64,31,105,171,6,},},{{253,234,34,253,8,3,0,},{226,198,32,226,2,3,0,},{210,30,56,213,82,3,0,},},{{11,193,54,215,210,1,0,},{213,18,64,31,159,170,6,},
{209,26,32,218,134,0,0,},},{{226,226,64,31,253,234,6,},{218,44,62,5,21,211,6,},{212,106,36,212,14,3,0,},},{{253,238,56,216,238,2,0,},{209,30,64,31,121,168,6,},
{206,126,62,5,199,162,6,},},{{253,240,32,253,2,3,0,},{210,26,36,218,134,3,0,},{208,26,32,218,114,3,0,},},{{251,150,64,31,253,186,6,},{218,34,62,5,21,211,6,},
{207,32,54,213,24,1,0,},},{{221,196,56,221,136,2,0,},{211,104,56,206,236,3,0,},{209,18,62,5,177,208,6,},},{{232,200,36,226,80,4,0,},{226,206,62,5,21,19,7,},
{214,54,54,214,100,2,0,},},{{232,204,54,221,24,4,0,},{211,98,54,206,212,3,0,},},{{218,32,36,218,14,3,0,},{213,30,60,14,149,170,6,},{207,44,34,218,116,1,0,},},
{{221,200,60,14,149,234,6,},{219,56,56,214,238,2,0,},{211,100,60,14,245,115,6,},},{{232,208,36,226,80,4,0,},{219,62,60,14,247,178,6,},{216,232,44,253,208,2,0,},},
{{221,200,64,31,159,234,6,},{211,100,64,31,251,115,6,},{207,40,36,218,128,1,0,},},{{218,40,36,218,14,3,0,},{207,18,60,14,81,169,6,},},{{215,148,44,251,208,2,0,},
{211,96,32,212,0,4,0,},},{{221,198,64,31,159,234,6,},{217,74,60,14,245,179,6,},{217,54,56,214,236,3,0,},},{{218,18,36,218,14,3,0,},{208,44,54,213,46,3,0,},},
{{218,20,32,218,2,3,0,},{217,50,64,31,251,179,6,},{207,30,56,213,66,1,0,},},{{250,158,60,14,57,188,6,},{215,144,64,31,159,186,6,},{213,34,62,5,199,210,6,},},
{{226,222,54,221,214,2,0,},{217,78,32,219,0,4,0,},{217,58,36,219,12,4,0,},},{{219,68,32,219,2,3,0,},{214,56,54,214,100,2,0,},{206,108,34,212,178,2,0,},},
{{10,243,54,216,210,1,0,},{215,166,64,31,159,186,6,},{207,26,52,207,196,1,0,},},{{217,62,34,219,6,4,0,},{211,126,54,206,212,3,0,},{209,0,52,207,232,0,0,},},
{{221,214,32,226,168,2,0,},{217,50,36,219,12,4,0,},{211,92,54,206,212,3,0,},},{{251,156,32,251,2,3,0,},{215,188,64,31,159,186,6,},{212,98,56,206,238,2,0,},},
{{216,252,60,14,149,194,6,},{210,16,36,218,134,3,0,},{208,16,32,218,114,3,0,},},{{250,188,54,215,24,4,0,},{218,24,34,218,8,3,0,},{209,4,56,0,201,0,0,},},
{{219,66,32,219,2,3,0,},{206,100,44,212,208,2,0,},},{{251,148,32,251,2,3,0,},{212,92,54,206,214,2,0,},{206,90,60,14,149,114,6,},},{{22,33,20,6,1,0,0,},
{220,24,56,213,236,3,0,},{214,66,54,214,100,2,0,},},{{250,148,62,5,87,220,7,},{214,68,54,214,100,2,0,},{210,130,56,20,175,3,0,},},{{221,222,32,226,168,2,0,},
{216,0,45,253,208,2,0,},{209,28,34,218,148,0,0,},},{{254,28,2,220,0,0,0,},{219,50,54,214,214,2,0,},{206,86,56,206,136,2,0,},},{{221,226,56,221,136,2,0,},
{207,34,36,218,128,1,0,},},{{218,12,54,213,214,2,0,},{216,0,63,5,199,234,7,},{213,28,56,213,136,2,0,},},{{250,160,64,31,63,188,6,},{211,106,32,212,0,4,0,},
{209,20,34,218,148,0,0,},},{{255,32,52,207,0,0,0,},{250,160,62,5,87,220,7,},{213,34,34,218,178,2,0,},},{{221,202,64,31,159,234,6,},{206,116,32,212,168,2,0,},},
{{215,162,34,251,178,2,0,},{207,16,56,213,66,1,0,},},{{254,74,2,217,0,0,0,},{252,240,36,253,80,4,0,},{209,40,54,213,42,0,0,},},{{252,242,56,216,48,4,0,},
{215,156,64,31,159,186,6,},},{{11,145,54,215,210,1,0,},{216,238,54,216,100,2,0,},{207,130,52,207,196,1,0,},},{{232,214,64,31,63,236,6,},{214,62,36,219,188,2,0,},
{207,28,60,14,81,169,6,},},{{250,144,64,31,63,188,6,},{213,32,62,5,199,210,6,},{209,32,54,213,42,0,0,},},{{217,56,56,214,236,3,0,},{212,82,64,31,253,114,6,},
{208,34,56,213,82,3,0,},},{{232,222,62,5,87,20,7,},{212,104,56,206,238,2,0,},},{{251,168,32,251,2,3,0,},{218,18,56,213,238,2,0,},{207,24,32,218,104,1,0,},},
{{7,69,54,214,210,1,0,},{5,157,42,250,0,0,0,},{209,14,56,213,90,0,0,},},{{217,64,56,214,236,3,0,},{214,66,44,219,208,2,0,},},{{34,71,2,23,1,0,0,},
{220,34,34,218,6,4,0,},{214,68,56,214,136,2,0,},},{{13,95,2,211,0,0,0,},{250,150,36,251,80,4,0,},{208,18,52,207,180,3,0,},},{{221,142,56,39,93,2,0,},},
{{211,116,32,212,0,4,0,},{211,94,34,212,6,4,0,},},{{251,158,56,215,238,2,0,},{219,66,36,219,14,3,0,},{214,50,62,5,199,218,6,},},{{220,26,60,14,245,171,6,},
{213,44,32,218,168,2,0,},{207,6,54,3,171,1,0,},},{0},{{251,188,64,31,253,186,6,},{214,46,64,31,159,178,6,},{206,98,44,212,208,2,0,},},{{253,238,60,14,247,194,6,},
{251,166,64,31,253,186,6,},},{{251,158,62,5,21,219,7,},{250,192,34,251,74,4,0,},},{{254,34,2,220,0,0,0,},{232,196,64,31,63,236,6,},{220,44,64,31,251,171,6,},
{213,26,60,14,149,170,6,},},{{221,196,60,14,149,234,6,},{220,20,54,213,212,3,0,},{211,104,60,14,245,115,6,},},{{232,200,32,226,68,4,0,},{215,192,54,215,100,2,0,},
{206,122,54,206,100,2,0,},},{{220,16,54,213,212,3,0,},{210,24,34,218,124,3,0,},},{{251,148,62,5,21,219,7,},{213,18,36,218,188,2,0,},{211,82,64,31,251,115,6,},},
{{221,200,56,221,136,2,0,},{215,168,44,251,208,2,0,},{209,22,54,254,14,0,0,},},{{251,168,62,5,21,219,7,},{232,208,32,226,68,4,0,},{206,114,54,206,100,2,0,},},
{{13,127,2,211,0,0,0,},{208,40,54,213,46,3,0,},},{{232,212,64,31,63,236,6,},{207,18,32,218,104,1,0,},},{{1,135,46,207,0,0,0,},{251,162,62,5,21,219,7,},
{221,204,36,226,188,2,0,},{211,96,36,212,12,4,0,},},{{251,160,62,5,21,219,7,},{220,38,54,21,229,3,0,},{217,74,56,214,236,3,0,},},{{253,252,64,31,253,194,6,},
{214,74,56,214,136,2,0,},{214,60,54,214,100,2,0,},{212,106,60,14,247,114,6,},},{{10,247,54,216,210,1,0,},{232,202,54,221,24,4,0,},{220,34,54,213,212,3,0,},
{218,20,60,14,247,170,6,},},{{250,158,56,215,48,4,0,},{215,156,56,215,136,2,0,},{209,34,34,218,148,0,0,},},{{217,58,32,219,0,4,0,},{214,60,64,31,159,178,6,},
{211,116,34,212,6,4,0,},},{{253,240,60,14,247,194,6,},{218,32,34,218,8,3,0,},},{{10,255,54,33,215,1,0,},{250,154,34,251,74,4,0,},{218,34,34,218,8,3,0,},
{218,16,64,31,253,170,6,},},{{253,252,60,14,247,194,6,},{232,220,54,32,41,4,0,},{214,52,34,219,178,2,0,},},{{250,188,64,31,63,188,6,},{217,50,32,219,0,4,0,},
{206,104,44,212,208,2,0,},},{{251,156,60,14,247,186,6,},{212,98,36,212,14,3,0,},{210,20,54,213,46,3,0,},},{{251,162,32,251,2,3,0,},},{{2,113,54,206,210,1,0,},
{221,214,62,5,199,18,7,},{211,122,62,5,19,164,6,},{211,92,64,31,251,115,6,},},{{253,232,34,253,8,3,0,},{217,54,60,14,245,179,6,},{206,126,34,212,178,2,0,},},
{{2,117,54,206,210,1,0,},{226,196,62,5,21,19,7,},{219,54,54,214,214,2,0,},{210,26,56,213,82,3,0,},},{{8,227,54,221,210,1,0,},{220,24,36,218,12,4,0,},
{208,28,56,213,82,3,0,},},{{232,202,64,31,63,236,6,},},{{221,222,36,226,188,2,0,},{210,16,60,14,95,171,6,},},{{212,126,56,206,238,2,0,},{210,18,56,213,82,3,0,},},
{{220,16,36,218,12,4,0,},{216,230,34,253,178,2,0,},{208,20,56,213,82,3,0,},},{{7,59,54,214,210,1,0,},{2,97,54,206,210,1,0,},{215,162,62,5,199,218,7,},
{213,28,60,14,149,170,6,},},{{5,193,42,250,0,0,0,},{221,198,36,226,188,2,0,},{211,106,36,212,12,4,0,},},{{226,204,54,221,214,2,0,},{221,204,32,226,168,2,0,},
{212,114,60,14,247,114,6,},},{{252,246,34,253,74,4,0,},{216,234,54,216,100,2,0,},{207,134,52,207,196,1,0,},},{{207,16,60,14,81,169,6,},},{{253,0,35,253,8,3,0,},
{209,12,54,213,42,0,0,},},{{226,212,54,221,214,2,0,},},{{232,214,34,226,74,4,0,},{207,130,56,20,179,1,0,},},{{254,52,2,217,0,0,0,},{214,62,32,219,168,2,0,},
{207,28,56,213,66,1,0,},},{{8,199,54,221,210,1,0,},{2,83,54,206,210,1,0,},{211,98,36,212,12,4,0,},},{{253,140,56,216,238,2,0,},{251,168,64,31,253,186,6,},
{219,78,62,5,21,219,6,},{214,58,64,31,159,178,6,},},{{232,222,34,226,74,4,0,},{212,104,36,212,14,3,0,},{208,12,56,213,82,3,0,},},{{218,18,60,14,247,170,6,},
{216,246,44,253,208,2,0,},{207,24,36,218,128,1,0,},},{{1,133,46,207,0,0,0,},{214,68,64,31,159,178,6,},{209,14,60,14,107,168,6,},},{{1,131,46,207,0,0,0,},
{212,108,34,212,8,3,0,},},{{232,226,54,221,24,4,0,},{210,44,36,218,134,3,0,},},{{8,213,54,221,210,1,0,},{210,18,52,207,180,3,0,},{209,254,127,208,8,128,6,},},
{{5,161,42,250,0,0,0,},{211,94,64,31,251,115,6,},{209,2,56,1,191,0,0,},},{{252,234,36,253,80,4,0,},{250,160,34,251,74,4,0,},{217,52,56,214,236,3,0,},},
{{253,234,60,14,247,194,6,},{252,244,56,216,48,4,0,},{226,198,62,5,21,19,7,},{208,44,56,213,82,3,0,},},{{220,26,56,213,236,3,0,},{213,18,34,218,178,2,0,},
{208,46,52,207,180,3,0,},},{{215,160,54,215,100,2,0,},{213,44,62,5,199,210,6,},},{{215,166,54,215,100,2,0,},{206,92,54,206,100,2,0,},},{{4,27,54,207,210,1,0,},
{232,196,56,221,48,4,0,},{206,96,64,31,159,114,6,},},{{251,150,34,251,8,3,0,},{219,74,62,5,21,219,6,},},{{14,239,26,252,0,0,0,},{250,162,62,5,87,220,7,},
{215,160,62,5,199,218,7,},{213,26,56,213,136,2,0,},},{{209,18,54,213,42,0,0,},},{{2,95,54,206,210,1,0,},{232,200,60,14,57,236,6,},{208,32,52,207,180,3,0,},},
{{219,66,62,5,21,219,6,},{216,228,54,216,100,2,0,},{208,2,56,1,155,3,0,},},{{209,18,64,31,121,168,6,},},{{251,192,64,31,253,186,6,},{214,66,32,219,168,2,0,},
{212,90,60,14,247,114,6,},},{{219,46,60,14,247,178,6,},{212,116,32,212,2,3,0,},{206,80,64,31,159,114,6,},},{{216,0,35,253,178,2,0,},{216,232,34,253,178,2,0,},},
{{207,18,36,218,128,1,0,},},{{215,148,36,251,188,2,0,},{211,112,64,31,251,115,6,},},{{4,131,54,207,210,1,0,},{226,208,64,31,253,234,6,},},{{13,99,2,211,0,0,0,},
{216,240,34,253,178,2,0,},{208,14,52,207,180,3,0,},},{{218,20,56,213,238,2,0,},{209,34,64,31,121,168,6,},},{{250,158,36,251,80,4,0,},{209,34,62,5,177,208,6,},
{209,12,56,213,90,0,0,},},{{226,222,62,5,21,19,7,},{218,40,64,31,253,170,6,},},{{217,66,34,219,6,4,0,},{214,56,62,5,199,218,6,},{213,44,36,218,188,2,0,},},
{{220,32,56,213,236,3,0,},{212,112,56,206,238,2,0,},},{{254,16,2,220,0,0,0,},{213,40,36,218,188,2,0,},{211,126,62,5,19,164,6,},},{{4,115,54,207,210,1,0,},
{216,240,36,253,188,2,0,},},{{251,156,56,215,238,2,0,},{214,66,36,219,188,2,0,},{212,98,32,212,2,3,0,},},{{16,171,34,42,199,3,0,},{251,162,36,251,14,3,0,},},
{{213,20,56,213,136,2,0,},},{{219,58,56,214,238,2,0,},{212,100,32,212,2,3,0,},{206,100,36,212,188,2,0,},},{{232,198,36,226,80,4,0,},{206,94,64,31,159,114,6,},},
{{220,24,32,218,0,4,0,},{212,96,56,206,238,2,0,},},{{213,24,60,14,149,170,6,},{212,98,60,14,247,114,6,},},{{253,234,36,253,14,3,0,},{251,160,34,251,8,3,0,},},
{{2,81,54,206,210,1,0,},{251,186,54,27,231,2,0,},{212,126,60,14,247,114,6,},{212,110,60,14,247,114,6,},},{{220,16,32,218,0,4,0,},{208,28,52,207,180,3,0,},},
{{252,242,36,253,80,4,0,},{211,110,54,206,212,3,0,},{209,16,52,207,232,0,0,},},{{1,129,46,207,0,0,0,},{221,224,54,48,113,2,0,},{215,192,34,251,178,2,0,},},
};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {0};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (target_nfa_state >> 8) & 1;
    key.bytes[1] |= (dfa_state << 1) & 255;
    key.bytes[2] |= (dfa_state >> 7) & 1;
    key.bytes[2] |= (dfa_symbol << 1) & 127;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.nfa_state |= ((uint32_t)bytes[4] & 1) << 8;
    entry.actions |= ((uint32_t)bytes[4] & 255) >> 1;
    entry.actions |= ((uint32_t)bytes[5] & 7) << 7;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 3;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 15) << 5;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 4; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 4)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 210;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 30)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 69) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    free_token_runs(&run);
    return construct_finish(&construct_state, offset);
}
static size_t read_whitespace(const char *text, void *info) {
    switch (text[0]) {
    case 32:
        return 1;
    case 9:
        return 1;
    case 10:
        return 1;
    case 13:
        return 1;
    default:
        return 0;
    }
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 44:
        *end_token = false;
        *token = 19;
        return 1;
    case 46:
        switch (text[1]) {
        case 108:
            if (text[2] == 105 && text[3] == 110 && text[4] == 101 && text[5] == 45 && text[6] == 99 && text[7] == 111 && text[8] == 109 && text[9] == 109 && text[10] == 101 && text[11] == 110 && text[12] == 116 && text[13] == 45 && text[14] == 116 && text[15] == 111 && text[16] == 107 && text[17] == 101 && text[18] == 110) {
                *end_token = false;
                *token = 23;
                return 19;
            } else {
                return 0;
            }
        case 111:
            if (text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
                *end_token = false;
                *token = 2;
                return 10;
            } else {
                return 0;
            }
        case 116:
            if (text[2] == 111 && text[3] == 107 && text[4] == 101 && text[5] == 110) {
                *end_token = false;
                *token = 25;
                return 6;
            } else {
                return 0;
            }
        case 119:
            if (text[2] == 104 && text[3] == 105 && text[4] == 116 && text[5] == 101 && text[6] == 115 && text[7] == 112 && text[8] == 97 && text[9] == 99 && text[10] == 101) {
                *end_token = false;
                *token = 26;
                return 11;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 24;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 123:
        *end_token = false;
        *token = 20;
        return 1;
    case 124:
        *end_token = false;
        *token = 22;
        return 1;
    case 125:
        *end_token = true;
        *token = 21;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 9;
        case 2: return 11;
        case 3: return 12;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 13;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 13;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 13;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 13;
        case 1: return 13;
        case 2: return 13;
        case 3: return 14;
        case 4: return 7;
        case 5: return 14;
        case 6: return 14;
        case 7: return 8;
        case 8: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 15;
        case 1: return 15;
        default: break;
        }
        break;
    case 9:
        switch (slot) {
        case 0: return 14;
        case 1: return 10;
        default: break;
        }
        break;
    case 10:
        switch (slot) {
        case 0: return 14;
        default: break;
        }
        break;
    case 11:
        switch (slot) {
        case 0: return 13;
        case 1: return 14;
        default: break;
        }
        break;
    case 12:
        switch (slot) {
        case 0: return 14;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 8:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 9:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 4;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 9;
    case 8: return 2;
    case 9: return 2;
    case 10: return 1;
    case 11: return 2;
    case 12: return 1;
    case 13: return 0;
    case 14: return 0;
    case 15: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 8;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 12:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 13:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 14:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 15:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

