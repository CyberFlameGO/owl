// This file was generated by the Owl parsing tool.
// Make sure to #define OWL_PARSER_IMPLEMENTATION somewhere so the parser
// is compiled properly.  Just two lines are enough -- a typical parser.c might
// look like:
//
//   #define OWL_PARSER_IMPLEMENTATION
//   #include "owl-parser.h"

#ifndef _OWL_PARSER_H_
#define _OWL_PARSER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>

// The owl_tree struct represents an entire parse tree.  Use the
// owl_tree_create_...() functions to create a tree, then call owl_tree_root()
// to get the root owl_ref.
struct owl_tree;

// Creates an owl_tree from a string.  The tree may directly reference pieces of
// the string -- you're responsible for keeping it around until
// owl_tree_destroy() is called.
struct owl_tree *owl_tree_create_from_string(const char *string);

// Creates an owl_tree by reading from a file.
struct owl_tree *owl_tree_create_from_file(FILE *file);

// Destroys an owl_tree, freeing its resources back to the system.
void owl_tree_destroy(struct owl_tree *);

// Prints a representation of the tree to standard output.
void owl_tree_print(struct owl_tree *);

// An owl_ref references a list of children in the parse tree.  Use the
// parsed_..._get() function corresponding to the element type to unpack the
// child into its appropriate parsed_... struct.
struct owl_ref {
    struct owl_tree *_tree;
    size_t _offset;
    uint32_t _type;
    bool empty;
};

// The owl_next function advances a ref to the next sibling element.
struct owl_ref owl_next(struct owl_ref);

// Tests two refs for equality.
bool owl_refs_equal(struct owl_ref a, struct owl_ref b);

// Returns the root owl_ref.
struct owl_ref owl_tree_root_ref(struct owl_tree *tree);

// As a shortcut, returns the parsed_grammar struct corresponding to the root ref.
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree);

// The range of text corresponding to a tree element.
struct source_range {
    size_t start;
    size_t end;
};

enum owl_error {
    // No error -- everything's fine!
    ERROR_NONE,

    // The file passed to owl_tree_create_from_file wasn't valid because
    // - it was NULL,
    // - it doesn't support fseek/ftell, or
    // - there was an error while reading it.
    ERROR_INVALID_FILE,

    // A piece of text couldn't be matched as a token.
    ERROR_INVALID_TOKEN,

    // The parser encountered an out-of-place token that doesn't fit the grammar.
    ERROR_UNEXPECTED_TOKEN,

    // The input is valid so far, but incomplete; more tokens could be added to
    // complete it.
    ERROR_MORE_INPUT_NEEDED,
};
// Returns an error code, or ERROR_NONE if there wasn't an error.
// The error_range parameter can be null.
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range);

enum parsed_type {
    PARSED_IDENT = 1,
    PARSED_CHOICE,
    PARSED_PARENS,
    PARSED_FLAT_OP,
    PARSED_LEFT_OP,
    PARSED_LITERAL,
    PARSED_INFIX_OP,
    PARSED_OPTIONAL,
    PARSED_RIGHT_OP,
    PARSED_BRACKETED,
    PARSED_PREFIX_OP,
    PARSED_POSTFIX_OP,
    PARSED_NONASSOC_OP,
    PARSED_ONE_OR_MORE,
    PARSED_ZERO_OR_MORE,
    PARSED_CONCATENATION,
};

struct parsed_grammar {
    struct source_range range;
    struct owl_ref rule;
    struct owl_ref comment_token;
    struct owl_ref custom_token;
};

struct parsed_rule {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref body;
};

struct parsed_body {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
    struct owl_ref operators;
};

struct parsed_operators {
    struct source_range range;
    struct owl_ref fixity;
    struct owl_ref operator;
};

struct parsed_fixity {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref assoc;
};

struct parsed_assoc {
    struct source_range range;
    enum parsed_type type;
};

struct parsed_operator {
    struct source_range range;
    struct owl_ref expr;
    struct owl_ref identifier;
};

struct parsed_expr {
    struct source_range range;
    enum parsed_type type;
    struct owl_ref identifier;
    struct owl_ref exception;
    struct owl_ref rename;
    struct owl_ref string;
    struct owl_ref expr;
    struct owl_ref begin_token;
    struct owl_ref end_token;
    struct owl_ref operand;
};

struct parsed_comment_token {
    struct source_range range;
    struct owl_ref string;
};

struct parsed_custom_token {
    struct source_range range;
    struct owl_ref identifier;
    struct owl_ref string;
};

struct parsed_identifier {
    struct source_range range;
    const char *identifier;
    size_t length;
};

struct parsed_number {
    struct source_range range;
    double number;
};

struct parsed_string {
    struct source_range range;
    const char *string;
    size_t length;
};

struct parsed_grammar parsed_grammar_get(struct owl_ref);
struct parsed_rule parsed_rule_get(struct owl_ref);
struct parsed_body parsed_body_get(struct owl_ref);
struct parsed_operators parsed_operators_get(struct owl_ref);
struct parsed_fixity parsed_fixity_get(struct owl_ref);
struct parsed_assoc parsed_assoc_get(struct owl_ref);
struct parsed_operator parsed_operator_get(struct owl_ref);
struct parsed_expr parsed_expr_get(struct owl_ref);
struct parsed_comment_token parsed_comment_token_get(struct owl_ref);
struct parsed_custom_token parsed_custom_token_get(struct owl_ref);
struct parsed_identifier parsed_identifier_get(struct owl_ref);
struct parsed_number parsed_number_get(struct owl_ref);
struct parsed_string parsed_string_get(struct owl_ref);

#endif

#ifdef OWL_PARSER_IMPLEMENTATION
// Code implementing the parser.  This might get a bit messy!
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct owl_tree {
    const char *string;
    bool owns_string;
    uint8_t *parse_tree;
    size_t parse_tree_size;
    size_t next_offset;
    enum owl_error error;
    struct source_range error_range;
    size_t root_offset;
    size_t next_identifier_token_offset;
    size_t next_number_token_offset;
    size_t next_string_token_offset;
};
// Reserve 10 bytes for each entry (the maximum encoded size of a 64-bit value).
#define RESERVATION_AMOUNT 10
static inline uint64_t read_tree(size_t *offset, struct owl_tree *tree) {
    uint8_t *parse_tree = tree->parse_tree;
    size_t parse_tree_size = tree->parse_tree_size;
    size_t i = *offset;
    if (i + RESERVATION_AMOUNT >= parse_tree_size)
        return 0;
    uint64_t result = 0;
    int shift_amount = 0;
    while ((parse_tree[i] & 0x80) != 0 && shift_amount < 64) {
        result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
        shift_amount += 7;
        i++;
    }
    result |= ((uint64_t)parse_tree[i] & 0x7f) << shift_amount;
    i++;
    *offset = i;
    return result;
}
static bool grow_tree(struct owl_tree *tree, size_t size)
{
    size_t n = tree->parse_tree_size;
    while (n < size || n < 4096)
        n = (n + 1) * 3 / 2;
    uint8_t *parse_tree = realloc(tree->parse_tree, n);
    if (!parse_tree)
        return false;
    tree->parse_tree_size = n;
    tree->parse_tree = parse_tree;
    return true;
}
static void write_tree(struct owl_tree *tree, uint64_t value)
{
    size_t reserved_size = tree->next_offset + RESERVATION_AMOUNT;
    if (tree->parse_tree_size <= reserved_size && !grow_tree(tree, reserved_size))
        abort();
    while (value >> 7 != 0) {
        tree->parse_tree[tree->next_offset++] = 0x80 | (value & 0x7f);
        value >>= 7;
    }
    tree->parse_tree[tree->next_offset++] = value & 0x7f;
}
struct parsed_grammar parsed_grammar_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 0) {
        return (struct parsed_grammar){
            .rule.empty = true,
            .comment_token.empty = true,
            .custom_token.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_grammar result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.rule._tree = ref._tree;
    result.rule._offset = read_tree(&offset, ref._tree);
    result.rule._type = 1;
    result.rule.empty = result.rule._offset == 0;
    result.comment_token._tree = ref._tree;
    result.comment_token._offset = read_tree(&offset, ref._tree);
    result.comment_token._type = 8;
    result.comment_token.empty = result.comment_token._offset == 0;
    result.custom_token._tree = ref._tree;
    result.custom_token._offset = read_tree(&offset, ref._tree);
    result.custom_token._type = 9;
    result.custom_token.empty = result.custom_token._offset == 0;
    return result;
}
struct parsed_rule parsed_rule_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 1) {
        return (struct parsed_rule){
            .identifier.empty = true,
            .body.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_rule result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 10;
    result.identifier.empty = result.identifier._offset == 0;
    result.body._tree = ref._tree;
    result.body._offset = read_tree(&offset, ref._tree);
    result.body._type = 2;
    result.body.empty = result.body._offset == 0;
    return result;
}
struct parsed_body parsed_body_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 2) {
        return (struct parsed_body){
            .expr.empty = true,
            .identifier.empty = true,
            .operators.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_body result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 10;
    result.identifier.empty = result.identifier._offset == 0;
    result.operators._tree = ref._tree;
    result.operators._offset = read_tree(&offset, ref._tree);
    result.operators._type = 3;
    result.operators.empty = result.operators._offset == 0;
    return result;
}
struct parsed_operators parsed_operators_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 3) {
        return (struct parsed_operators){
            .fixity.empty = true,
            .operator.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operators result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.fixity._tree = ref._tree;
    result.fixity._offset = read_tree(&offset, ref._tree);
    result.fixity._type = 4;
    result.fixity.empty = result.fixity._offset == 0;
    result.operator._tree = ref._tree;
    result.operator._offset = read_tree(&offset, ref._tree);
    result.operator._type = 6;
    result.operator.empty = result.operator._offset == 0;
    return result;
}
struct parsed_fixity parsed_fixity_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 4) {
        return (struct parsed_fixity){
            .assoc.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_fixity result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.assoc._tree = ref._tree;
    result.assoc._offset = read_tree(&offset, ref._tree);
    result.assoc._type = 5;
    result.assoc.empty = result.assoc._offset == 0;
    return result;
}
struct parsed_assoc parsed_assoc_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 5) {
        return (struct parsed_assoc){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_assoc result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    return result;
}
struct parsed_operator parsed_operator_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 6) {
        return (struct parsed_operator){
            .expr.empty = true,
            .identifier.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_operator result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 10;
    result.identifier.empty = result.identifier._offset == 0;
    return result;
}
struct parsed_expr parsed_expr_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 7) {
        return (struct parsed_expr){
            .identifier.empty = true,
            .exception.empty = true,
            .rename.empty = true,
            .string.empty = true,
            .expr.empty = true,
            .begin_token.empty = true,
            .end_token.empty = true,
            .operand.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_expr result = {
        .range.start = start_location,
        .range.end = end_location,
        .type = (enum parsed_type)read_tree(&offset, ref._tree),
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 10;
    result.identifier.empty = result.identifier._offset == 0;
    result.exception._tree = ref._tree;
    result.exception._offset = read_tree(&offset, ref._tree);
    result.exception._type = 10;
    result.exception.empty = result.exception._offset == 0;
    result.rename._tree = ref._tree;
    result.rename._offset = read_tree(&offset, ref._tree);
    result.rename._type = 10;
    result.rename.empty = result.rename._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    result.expr._tree = ref._tree;
    result.expr._offset = read_tree(&offset, ref._tree);
    result.expr._type = 7;
    result.expr.empty = result.expr._offset == 0;
    result.begin_token._tree = ref._tree;
    result.begin_token._offset = read_tree(&offset, ref._tree);
    result.begin_token._type = 12;
    result.begin_token.empty = result.begin_token._offset == 0;
    result.end_token._tree = ref._tree;
    result.end_token._offset = read_tree(&offset, ref._tree);
    result.end_token._type = 12;
    result.end_token.empty = result.end_token._offset == 0;
    result.operand._tree = ref._tree;
    result.operand._offset = read_tree(&offset, ref._tree);
    result.operand._type = 7;
    result.operand.empty = result.operand._offset == 0;
    return result;
}
struct parsed_comment_token parsed_comment_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 8) {
        return (struct parsed_comment_token){
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_comment_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_custom_token parsed_custom_token_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 9) {
        return (struct parsed_custom_token){
            .identifier.empty = true,
            .string.empty = true,
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t start_location = read_tree(&offset, ref._tree);
    size_t end_location = start_location + read_tree(&offset, ref._tree);
    struct parsed_custom_token result = {
        .range.start = start_location,
        .range.end = end_location,
    };
    result.identifier._tree = ref._tree;
    result.identifier._offset = read_tree(&offset, ref._tree);
    result.identifier._type = 10;
    result.identifier.empty = result.identifier._offset == 0;
    result.string._tree = ref._tree;
    result.string._offset = read_tree(&offset, ref._tree);
    result.string._type = 12;
    result.string.empty = result.string._offset == 0;
    return result;
}
struct parsed_identifier parsed_identifier_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 10) {
        return (struct parsed_identifier){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_identifier result = {
        .identifier = ref._tree->string + start_location,
        .length = end_location - start_location,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_number parsed_number_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 11) {
        return (struct parsed_number){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    struct parsed_number result = {
        .number = (union { double n; uint64_t v; }){ .v = read_tree(&token_offset, ref._tree) }.n,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
struct parsed_string parsed_string_get(struct owl_ref ref) {
    if (ref.empty || ref._type != 12) {
        return (struct parsed_string){
        0
        };
    }
    size_t offset = ref._offset;
    read_tree(&offset, ref._tree); // Read and ignore the 'next offset' field.
    size_t token_offset = read_tree(&offset, ref._tree);
    read_tree(&token_offset, ref._tree);
    size_t start_location = read_tree(&token_offset, ref._tree);
    size_t end_location = start_location + read_tree(&token_offset, ref._tree);
    size_t string_offset = read_tree(&token_offset, ref._tree);
    const char *string = string_offset ?
     (const char *)ref._tree->parse_tree + string_offset : ref._tree->string + start_location + 1;
    size_t string_length = string_offset ?
     read_tree(&token_offset, ref._tree) : end_location - start_location - 2;
    struct parsed_string result = {
        .string = string,
        .length = string_length,
        .range.start = start_location,
        .range.end = end_location,
    };
    return result;
}
static size_t finish_node(uint32_t rule, uint32_t choice, size_t next_sibling, size_t *slots, size_t start_location, size_t end_location, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    write_tree(tree, start_location);
    write_tree(tree, end_location - start_location);
    switch (rule) {
    case 0: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 1: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 2: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        break;
    }
    case 3: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 4: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_POSTFIX_OP);
            break;
        case 1:
            write_tree(tree, PARSED_PREFIX_OP);
            break;
        case 2:
            write_tree(tree, PARSED_INFIX_OP);
            break;
        }
        write_tree(tree, slots[0]);
        break;
    }
    case 5: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_FLAT_OP);
            break;
        case 1:
            write_tree(tree, PARSED_LEFT_OP);
            break;
        case 2:
            write_tree(tree, PARSED_RIGHT_OP);
            break;
        case 3:
            write_tree(tree, PARSED_NONASSOC_OP);
            break;
        }
        break;
    }
    case 6: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    case 7: {
        switch (choice) {
        case 0:
            write_tree(tree, PARSED_IDENT);
            break;
        case 1:
            write_tree(tree, PARSED_LITERAL);
            break;
        case 2:
            write_tree(tree, PARSED_PARENS);
            break;
        case 3:
            write_tree(tree, PARSED_BRACKETED);
            break;
        case 4:
            write_tree(tree, PARSED_ZERO_OR_MORE);
            break;
        case 5:
            write_tree(tree, PARSED_ONE_OR_MORE);
            break;
        case 6:
            write_tree(tree, PARSED_OPTIONAL);
            break;
        case 7:
            write_tree(tree, PARSED_CONCATENATION);
            break;
        case 8:
            write_tree(tree, PARSED_CHOICE);
            break;
        }
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        write_tree(tree, slots[2]);
        write_tree(tree, slots[3]);
        write_tree(tree, slots[4]);
        write_tree(tree, slots[5]);
        write_tree(tree, slots[6]);
        write_tree(tree, slots[7]);
        break;
    }
    case 8: {
        write_tree(tree, slots[0]);
        break;
    }
    case 9: {
        write_tree(tree, slots[0]);
        write_tree(tree, slots[1]);
        break;
    }
    default:
        break;
    }
    return offset;
}
static size_t finish_token(uint32_t rule, size_t next_sibling, void *info) {
    struct owl_tree *tree = info;
    size_t offset = tree->next_offset;
    write_tree(tree, next_sibling ? offset - next_sibling : 0);
    switch (rule) {
    case 10: {
        size_t offset = tree->next_identifier_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_identifier_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 11: {
        size_t offset = tree->next_number_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_number_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    case 12: {
        size_t offset = tree->next_string_token_offset;
        if (offset == 0)
            abort();
        write_tree(tree, offset);
        tree->next_string_token_offset = offset - read_tree(&offset, tree);
        break;
    }
    default:
        break;
    }
    return offset;
}
static void check_for_error(struct owl_tree *tree) {
    if (tree->error == ERROR_NONE)
        return;
    fprintf(stderr, "parse error: ");
    switch (tree->error) {
    case ERROR_INVALID_FILE:
        fprintf(stderr, "invalid file\n");
        break;
    case ERROR_INVALID_TOKEN:
        fprintf(stderr, "invalid token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_UNEXPECTED_TOKEN:
        fprintf(stderr, "unexpected token '%.*s'\n", (int)(tree->error_range.end - tree->error_range.start), tree->string + tree->error_range.start);
        break;
    case ERROR_MORE_INPUT_NEEDED:
        fprintf(stderr, "more input needed\n");
        break;
    default:
        break;
    }
    exit(-1);
}
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent);
static void parsed_grammar_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_grammar it = parsed_grammar_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("grammar");
        if (strcmp("grammar", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_rule_print(tree, it.rule, "rule", indent + 1);
        parsed_comment_token_print(tree, it.comment_token, "comment_token", indent + 1);
        parsed_custom_token_print(tree, it.custom_token, "custom_token", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_rule_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_rule it = parsed_rule_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("rule");
        if (strcmp("rule", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_body_print(tree, it.body, "body", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_body_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_body it = parsed_body_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("body");
        if (strcmp("body", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_operators_print(tree, it.operators, "operators", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_operators_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operators it = parsed_operators_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operators");
        if (strcmp("operators", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_fixity_print(tree, it.fixity, "fixity", indent + 1);
        parsed_operator_print(tree, it.operator, "operator", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_fixity_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_fixity it = parsed_fixity_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("fixity");
        if (strcmp("fixity", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_POSTFIX_OP:
            printf(" : POSTFIX_OP");
            break;
        case PARSED_PREFIX_OP:
            printf(" : PREFIX_OP");
            break;
        case PARSED_INFIX_OP:
            printf(" : INFIX_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_assoc_print(tree, it.assoc, "assoc", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_assoc_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_assoc it = parsed_assoc_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("assoc");
        if (strcmp("assoc", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_FLAT_OP:
            printf(" : FLAT_OP");
            break;
        case PARSED_LEFT_OP:
            printf(" : LEFT_OP");
            break;
        case PARSED_RIGHT_OP:
            printf(" : RIGHT_OP");
            break;
        case PARSED_NONASSOC_OP:
            printf(" : NONASSOC_OP");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_operator_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_operator it = parsed_operator_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("operator");
        if (strcmp("operator", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_expr_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_expr it = parsed_expr_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("expr");
        if (strcmp("expr", slot_name))
            printf("@%s", slot_name);
        switch (it.type) {
        case PARSED_IDENT:
            printf(" : IDENT");
            break;
        case PARSED_LITERAL:
            printf(" : LITERAL");
            break;
        case PARSED_PARENS:
            printf(" : PARENS");
            break;
        case PARSED_BRACKETED:
            printf(" : BRACKETED");
            break;
        case PARSED_ZERO_OR_MORE:
            printf(" : ZERO_OR_MORE");
            break;
        case PARSED_ONE_OR_MORE:
            printf(" : ONE_OR_MORE");
            break;
        case PARSED_OPTIONAL:
            printf(" : OPTIONAL");
            break;
        case PARSED_CONCATENATION:
            printf(" : CONCATENATION");
            break;
        case PARSED_CHOICE:
            printf(" : CHOICE");
            break;
        default:
            break;
        }
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_identifier_print(tree, it.exception, "exception", indent + 1);
        parsed_identifier_print(tree, it.rename, "rename", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        parsed_expr_print(tree, it.expr, "expr", indent + 1);
        parsed_string_print(tree, it.begin_token, "begin_token", indent + 1);
        parsed_string_print(tree, it.end_token, "end_token", indent + 1);
        parsed_expr_print(tree, it.operand, "operand", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_comment_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_comment_token it = parsed_comment_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("comment_token");
        if (strcmp("comment_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_custom_token_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_custom_token it = parsed_custom_token_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("custom_token");
        if (strcmp("custom_token", slot_name))
            printf("@%s", slot_name);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        parsed_identifier_print(tree, it.identifier, "identifier", indent + 1);
        parsed_string_print(tree, it.string, "string", indent + 1);
        ref = owl_next(ref);
    }
}
static void parsed_identifier_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_identifier it = parsed_identifier_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("identifier");
        if (strcmp("identifier", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.identifier);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
static void parsed_string_print(struct owl_tree *tree, struct owl_ref ref, const char *slot_name, int indent) {
    while (!ref.empty) {
        struct parsed_string it = parsed_string_get(ref);
        for (int i = 0; i < indent; ++i) printf("  ");
        printf("string");
        if (strcmp("string", slot_name))
            printf("@%s", slot_name);
        printf(" - %.*s", (int)it.length, it.string);
        printf(" (%zu - %zu)\n", it.range.start, it.range.end);
        ref = owl_next(ref);
    }
}
void owl_tree_print(struct owl_tree *tree) {
    check_for_error(tree);
    parsed_grammar_print(tree, owl_tree_root_ref(tree), "grammar", 0);
}
struct owl_ref owl_next(struct owl_ref ref) {
    if (ref.empty) return ref;
    size_t offset = ref._offset;
    size_t delta = read_tree(&ref._offset, ref._tree);
    return (struct owl_ref){
        ._tree = ref._tree,
        ._offset = offset - delta,
        ._type = ref._type,
        .empty = delta == 0,
    };
}
bool owl_refs_equal(struct owl_ref a, struct owl_ref b) {
    return a._tree == b._tree && a._offset == b._offset;
}
struct owl_ref owl_tree_root_ref(struct owl_tree *tree) {
    check_for_error(tree);
    return (struct owl_ref){
        ._tree = tree,
        ._offset = tree->root_offset,
        ._type = 0,
        .empty = tree->root_offset == 0,
    };
}
struct parsed_grammar owl_tree_get_parsed_grammar(struct owl_tree *tree) {
    check_for_error(tree);
    return parsed_grammar_get(owl_tree_root_ref(tree));
}
#define IGNORE_TOKEN_WRITE(...)
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info);
static void write_identifier_token(size_t offset, size_t length, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_identifier_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    tree->next_identifier_token_offset = token_offset;
}
static void write_number_token(size_t offset, size_t length, double number, void *info) {
    struct owl_tree *tree = info;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_number_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    union { double n; uint64_t v; } u = { .n = number };
    write_tree(tree, u.v);
    tree->next_number_token_offset = token_offset;
}
static void write_string_token(size_t offset, size_t length, const char *string, size_t string_length, bool has_escapes, void *info) {
    struct owl_tree *tree = info;
    size_t string_offset = has_escapes ? (uint8_t *)string - tree->parse_tree : 0;
    size_t token_offset = tree->next_offset;
    write_tree(tree, token_offset - tree->next_string_token_offset);
    write_tree(tree, offset);
    write_tree(tree, length);
    if (string_offset) {
        write_tree(tree, string_offset);
        write_tree(tree, string_length);
    } else
        write_tree(tree, 0);
    tree->next_string_token_offset = token_offset;
}
static void *allocate_string_contents(size_t size, void *info) {
    struct owl_tree *tree = info;
    if (tree->next_offset + size > tree->parse_tree_size)
        grow_tree(tree, tree->next_offset + size);
    void *p = tree->parse_tree + tree->next_offset;
    tree->next_offset += size;
    return p;
}
struct owl_token_run {
    struct owl_token_run *prev;
    uint16_t number_of_tokens;
    uint16_t lengths_size;
    uint8_t lengths[4096 * 2];
    uint32_t tokens[4096];
    uint32_t states[4096];
};
struct owl_default_tokenizer {
    const char *text;
    size_t offset;
    size_t whitespace;
    uint32_t identifier_token;
    uint32_t number_token;
    uint32_t string_token;
    void *info;
};
static bool char_is_whitespace(char c) {
    switch (c) {
    case ' ':
    case '\t':
    case '\r':
    case '\n':
        return true;
    default:
        return false;
    }
}
static bool char_is_numeric(char c) {
    return c >= '0' && c <= '9';
}
static bool char_is_alphabetic(char c) {
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}
static bool char_starts_identifier(char c) {
    return char_is_alphabetic(c) || c == '_';
}
static bool char_continues_identifier(char c, void *info) {
    if (true && c == '-') return true;
    return char_is_numeric(c) || char_starts_identifier(c);
}
static bool encode_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length) {
    uint8_t mark = 0;
    while (*lengths_size < sizeof(run->lengths)) {
        run->lengths[*lengths_size] = mark | (length & 0x7f);
        mark = 0x80;
        length >>= 7;
        (*lengths_size)++;
        if (length == 0) return true;
    }
    return false;
}
static bool encode_token_length(struct owl_token_run *run, uint16_t *lengths_size, size_t length, size_t whitespace) {
    uint16_t size = *lengths_size;
    if (encode_length(run, lengths_size, length) && encode_length(run, lengths_size, whitespace)) return true;
    *lengths_size = size;
    return false;
}
static size_t decode_length(struct owl_token_run *run, uint16_t *length_offset) {
    size_t length = 0;
    while (*length_offset < sizeof(run->lengths)) {
        size_t l = run->lengths[(*length_offset)--];
        length <<= 7;
        length += l & 0x7f;
        if (!(l & 0x80)) return length;
    }
    abort();
}
static size_t decode_token_length(struct owl_token_run *run, uint16_t *length_offset, size_t *string_offset) {
    size_t whitespace = decode_length(run, length_offset);
    size_t length = decode_length(run, length_offset);
    *string_offset -= whitespace + length;
    return length;
}
static bool owl_default_tokenizer_advance(struct owl_default_tokenizer *tokenizer, struct owl_token_run **previous_run) {
    struct owl_token_run *run = malloc(sizeof(struct owl_token_run));
    if (!run) return false;
    uint16_t number_of_tokens = 0;
    uint16_t lengths_size = 0;
    const char *text = tokenizer->text;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset;
    while (number_of_tokens < 4096) {
        char c = text[offset];
        if (c == '\0') break;
        if (char_is_whitespace(c)) {
            whitespace++;
            offset++;
            continue;
        }
        uint32_t token = -1;
        bool is_token = false;
        bool end_token = false;
        bool custom_token = false;
        bool comment = false;
        bool has_escapes = false;
        size_t token_length = read_keyword_token(&token, &end_token, text + offset, tokenizer->info);
        if (token_length > 0) {
            is_token = true;
            if (token == 4294967295U) comment = true;
        }
        double number = 0;
        if ((0)) {
            is_token = true;
            custom_token = true;
            end_token = false;
            comment = false;
        }
        else if (char_is_numeric(c) || (c == '.' && char_is_numeric(text[offset + 1]))) {
            const char *start = (const char *)text + offset;
            char *rest = 0;
            number = strtod(start, &rest);
            if (rest > start && rest - start > token_length) {
                token_length = rest - start;
                is_token = true;
                end_token = false;
                comment = false;
                token = 23;
            }
        }
        else if (c == '\'' || c == '"') {
            size_t string_offset = offset + 1;
            while (text[string_offset] != '\0') {
                if (text[string_offset] == c) {
                    token_length = string_offset + 1 - offset;
                    is_token = true;
                    end_token = false;
                    comment = false;
                    token = 24;
                    break;
                }
                if (text[string_offset] == '\\') {
                    has_escapes = true;
                    string_offset++;
                    if (text[string_offset] == '\0') break;
                }
                string_offset++;
            }
        }
        else if (char_starts_identifier(c)) {
            size_t identifier_offset = offset + 1;
            while (char_continues_identifier(text[identifier_offset], tokenizer->info)) identifier_offset++;
            if (identifier_offset - offset > token_length) {
                token_length = identifier_offset - offset;
                is_token = true;
                end_token = false;
                comment = false;
                token = 22;
            }
        }
        if (comment) {
            while (text[offset] != '\0' && text[offset] != '\n') {
                whitespace++;
                offset++;
            }
            continue;
        }
        else if (!is_token || token == 4294967295U) {
            tokenizer->offset = offset;
            tokenizer->whitespace = whitespace;
            free(run);
            return false;
        }
        if (end_token && number_of_tokens + 1 >= 4096) break;
        if (!encode_token_length(run, &lengths_size, token_length, whitespace)) break;
        if (token == 22) {
            write_identifier_token(offset, token_length, tokenizer->info);
        }
        else if (token == 23) {
            write_number_token(offset, token_length, number, tokenizer->info);
        }
        else if (token == 24) {
            size_t content_offset = offset + 1;
            size_t content_length = token_length - 2;
            const char *string = text + content_offset;
            size_t string_length = content_length;
            if (has_escapes) {
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') {
                        string_length--;
                        i++;
                    }
                }
                char *unescaped = allocate_string_contents(string_length, tokenizer->info);
                size_t j = 0;
                for (size_t i = 0;
                i < content_length;
                ++i) {
                    if (text[content_offset + i] == '\\') i++;
                    unescaped[j++] = text[content_offset + i];
                }
                string = unescaped;
            }
            write_string_token(offset, token_length, string, string_length, has_escapes, tokenizer->info);
        }
        else if (custom_token) {
            ;
        }
        run->tokens[number_of_tokens] = token;
        whitespace = 0;
        number_of_tokens++;
        offset += token_length;
        if (end_token) {
            assert(number_of_tokens < 4096);
            run->tokens[number_of_tokens] = 4294967295U;
            number_of_tokens++;
        }
    }
    if (number_of_tokens == 0) {
        tokenizer->offset = offset;
        tokenizer->whitespace = whitespace;
        free(run);
        return false;
    }
    tokenizer->offset = offset;
    tokenizer->whitespace = whitespace;
    run->prev = *previous_run;
    run->number_of_tokens = number_of_tokens;
    run->lengths_size = lengths_size;
    *previous_run = run;
    return true;
}
static void find_token_range(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, uint16_t index, size_t *start, size_t *end) {
    size_t offset = tokenizer->offset - tokenizer->whitespace;
    size_t last_offset = offset;
    size_t len = 0;
    uint16_t length_offset = run->lengths_size - 1;
    for (uint16_t j = index;
    j < run->number_of_tokens;
    ++j) {
        if (run->tokens[j] == 4294967295U) continue;
        last_offset = offset;
        len = decode_token_length(run, &length_offset, &offset);
    }
    *start = last_offset - len;
    *end = last_offset;
}
static void estimate_next_token_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset;
    size_t i = tokenizer->offset + 1;
    while (tokenizer->text[i] != '\0' && !char_is_whitespace(tokenizer->text[i]) && !char_continues_identifier(tokenizer->text[i], tokenizer->info)) i++;
    *end = i;
}
static void find_end_range(struct owl_default_tokenizer *tokenizer, size_t *start, size_t *end) {
    *start = tokenizer->offset - tokenizer->whitespace - 1;
    *end = tokenizer->offset - tokenizer->whitespace;
    if (*start > *end) {
        *start = *end;
        *end += 1;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context);
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context);
static size_t number_of_slots_lookup(uint32_t rule, void *context);
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context);
enum construct_fixity_associativity {
CONSTRUCT_PREFIX, CONSTRUCT_POSTFIX, CONSTRUCT_INFIX_LEFT, CONSTRUCT_INFIX_RIGHT, CONSTRUCT_INFIX_FLAT, };
struct construct_node {
    struct construct_node *next;
    size_t number_of_slots;
    size_t *slots;
    uint32_t rule;
    uint16_t slot_index;
    uint16_t choice_index;
    enum construct_fixity_associativity fixity_associativity;
    int precedence;
    size_t start_location;
    size_t end_location;
};
struct construct_expression {
    struct construct_expression *parent;
    struct construct_node *first_operator;
    struct construct_node *first_value;
    uint32_t operand_slot_index;
    uint32_t left_slot_index;
    uint32_t right_slot_index;
    uint32_t rule;
    uint16_t slot_index;
};
enum construct_root_type {
CONSTRUCT_NORMAL_ROOT, CONSTRUCT_EXPRESSION_ROOT, };
struct construct_state {
    enum construct_root_type root_type;
    struct construct_node *under_construction;
    struct construct_expression *current_expression;
    struct construct_node *node_freelist;
    struct construct_expression *expression_freelist;
    void *info;
};
static struct construct_node *construct_node_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_node *node;
    size_t number_of_slots = number_of_slots_lookup(rule, s->info);
    if (s->node_freelist) {
        node = s->node_freelist;
        s->node_freelist = node->next;
        size_t *slots = node->slots;
        if (number_of_slots > node->number_of_slots) {
            slots = realloc(slots, number_of_slots * sizeof(size_t));
            if (!slots) abort();
        }
        memset(node, 0, sizeof(struct construct_node));
        memset(slots, 0, number_of_slots * sizeof(size_t));
        node->slots = slots;
    }
    else {
        node = calloc(1, sizeof(struct construct_node));
        if (!node) abort();
        node->slots = calloc(number_of_slots, sizeof(size_t));
        if (!node->slots) abort();
    }
    node->rule = rule;
    node->number_of_slots = number_of_slots;
    return node;
}
static struct construct_expression *construct_expression_alloc(struct construct_state *s, uint32_t rule) {
    struct construct_expression *expr;
    if (s->expression_freelist) {
        expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        memset(expr, 0, sizeof(struct construct_expression));
    }
    else {
        expr = calloc(1, sizeof(struct construct_expression));
        if (!expr) abort();
    }
    (left_right_operand_slots_lookup(rule, &(expr->left_slot_index), &(expr->right_slot_index), &(expr->operand_slot_index), s->info));
    expr->rule = rule;
    return expr;
}
static void construct_node_free(struct construct_state *state, struct construct_node *node) {
    node->next = state->node_freelist;
    state->node_freelist = node;
}
static void construct_expression_free(struct construct_state *state, struct construct_expression *expr) {
    expr->parent = state->expression_freelist;
    state->expression_freelist = expr;
}
static bool construct_expression_should_reduce(struct construct_state *s, struct construct_expression *expr, struct construct_node *node) {
    if (node->fixity_associativity == CONSTRUCT_POSTFIX) return false;
    struct construct_node *top = expr->first_operator;
    if (!top) return false;
    return node->precedence < top->precedence || (node->precedence == top->precedence && node->fixity_associativity == CONSTRUCT_INFIX_RIGHT);
}
static void construct_expression_reduce(struct construct_state *s, struct construct_expression *expr) {
    struct construct_node *op = expr->first_operator;
    if (op->fixity_associativity == CONSTRUCT_INFIX_FLAT) {
        struct construct_node *first_value = expr->first_value;
        struct construct_node *last_value = first_value;
        struct construct_node *last_operator = op;
        size_t operand = op->slots[expr->operand_slot_index];
        struct construct_node *combined_op = construct_node_alloc(s, op->rule);
        combined_op->choice_index = op->choice_index;
        combined_op->slot_index = op->slot_index;
        combined_op->fixity_associativity = op->fixity_associativity;
        combined_op->precedence = op->precedence;
        struct construct_node *reversed_values = 0;
        while (last_operator && last_operator->choice_index == op->choice_index) {
            struct construct_node *next_op = last_operator->next;
            construct_node_free(s, last_operator);
            last_operator = next_op;
            assert(last_value);
            struct construct_node *next_value = last_value->next;
            last_value->next = reversed_values;
            reversed_values = last_value;
            last_value = next_value;
        }
        combined_op->start_location = first_value->start_location;
        combined_op->end_location = last_value->end_location;
        assert(last_value);
        operand = (finish_node((last_value)->rule, (last_value)->choice_index, operand, (last_value)->slots, (last_value)->start_location, (last_value)->end_location, s->info));
        combined_op->next = last_value->next;
        construct_node_free(s, last_value);
        while (reversed_values) {
            operand = (finish_node((reversed_values)->rule, (reversed_values)->choice_index, operand, (reversed_values)->slots, (reversed_values)->start_location, (reversed_values)->end_location, s->info));
            struct construct_node *next_value = reversed_values->next;
            construct_node_free(s, reversed_values);
            reversed_values = next_value;
        }
        expr->first_operator = last_operator;
        expr->first_value = combined_op;
        combined_op->slots[expr->operand_slot_index] = operand;
    }
    else if (op->fixity_associativity == CONSTRUCT_INFIX_LEFT || op->fixity_associativity == CONSTRUCT_INFIX_RIGHT) {
        expr->first_operator = op->next;
        struct construct_node *left = expr->first_value;
        struct construct_node *right = left->next;
        op->next = right->next;
        expr->first_value = op;
        op->start_location = left->start_location;
        op->end_location = right->end_location;
        op->slots[expr->left_slot_index] = (finish_node((left)->rule, (left)->choice_index, op->slots[expr->left_slot_index], (left)->slots, (left)->start_location, (left)->end_location, s->info));
        op->slots[expr->right_slot_index] = (finish_node((right)->rule, (right)->choice_index, op->slots[expr->right_slot_index], (right)->slots, (right)->start_location, (right)->end_location, s->info));
        construct_node_free(s, left);
        construct_node_free(s, right);
    }
    else {
        expr->first_operator = op->next;
        struct construct_node *value = expr->first_value;
        op->next = value->next;
        expr->first_value = op;
        if (value->start_location < op->start_location) op->start_location = value->start_location;
        if (value->end_location > op->end_location) op->end_location = value->end_location;
        op->slots[expr->operand_slot_index] = (finish_node((value)->rule, (value)->choice_index, op->slots[expr->operand_slot_index], (value)->slots, (value)->start_location, (value)->end_location, s->info));
        construct_node_free(s, value);
    }
}
static void construct_begin(struct construct_state *s, size_t offset, enum construct_root_type type) {
    s->root_type = type;
    uint32_t r = 0;
    if (type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = construct_expression_alloc(s, r);
        expr->parent = s->current_expression;
        s->current_expression = expr;
    }
    else {
        struct construct_node *node = construct_node_alloc(s, r);
        node->next = s->under_construction;
        node->end_location = offset;
        s->under_construction = node;
    }
}
static size_t construct_finish(struct construct_state *s, size_t offset) {
    size_t finished = 0;
    if (s->root_type == CONSTRUCT_EXPRESSION_ROOT) {
        struct construct_expression *expr = s->current_expression;
        s->current_expression = expr->parent;
        while (expr->first_operator) construct_expression_reduce(s, expr);
        struct construct_node *node = expr->first_value;
        if (node) {
            finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            assert(node->next == 0);
            construct_node_free(s, node);
        }
        construct_expression_free(s, expr);
    }
    else {
        struct construct_node *node = s->under_construction;
        s->under_construction = node->next;
        node->start_location = offset;
        finished = (finish_node((node)->rule, (node)->choice_index, 0, (node)->slots, (node)->start_location, (node)->end_location, s->info));
        construct_node_free(s, node);
    }
    while (s->node_freelist) {
        struct construct_node *node = s->node_freelist;
        s->node_freelist = node->next;
        free(node->slots);
        free(node);
    }
    while (s->expression_freelist) {
        struct construct_expression *expr = s->expression_freelist;
        s->expression_freelist = expr->parent;
        free(expr);
    }
    return finished;
}
static void construct_action_apply(struct construct_state *s, uint16_t action, size_t offset) {
    switch ((((action) >> 12) & 0xf)) {
    case 8:
        {
            struct construct_node *node = construct_node_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            node->next = s->under_construction;
            node->slot_index = ((action) & 0xfff);
            node->end_location = offset;
            s->under_construction = node;
            break;
        }
    case 9:
        {
            struct construct_expression *expr = construct_expression_alloc(s, rule_lookup(s->under_construction->rule, ((action) & 0xfff), s->info));
            expr->parent = s->current_expression;
            s->current_expression = expr;
            expr->slot_index = ((action) & 0xfff);
            break;
        }
    case 1:
        {
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            size_t *finished;
            finished = &s->under_construction->slots[node->slot_index];
            *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
            construct_node_free(s, node);
            break;
        }
    case 2:
        {
            struct construct_expression *expr = s->current_expression;
            s->current_expression = expr->parent;
            while (expr->first_operator) construct_expression_reduce(s, expr);
            size_t *finished;
            finished = &s->under_construction->slots[expr->slot_index];
            struct construct_node *node = expr->first_value;
            if (node) {
                *finished = (finish_node((node)->rule, (node)->choice_index, *finished, (node)->slots, (node)->start_location, (node)->end_location, s->info));
                assert(node->next == 0);
                construct_node_free(s, node);
            }
            construct_expression_free(s, expr);
            break;
        }
    case 3:
        s->under_construction->choice_index = ((action) & 0xfff);
        break;
    case 4:
        {
            uint16_t slot = ((action) & 0xfff);
            size_t *finished = &s->under_construction->slots[slot];
            *finished = finish_token(rule_lookup(s->under_construction->rule, slot, s->info), *finished, s->info);
            break;
        }
    case 10:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 11:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = construct_node_alloc(s, expr->rule);
            node->choice_index = ((action) & 0xfff);
            node->end_location = offset;
            node->rule = expr->rule;
            enum construct_fixity_associativity fixity_associativity = 0;
            int precedence = 0;
            do {
                int local = 0;
                fixity_associativity_precedence_lookup(&local, &precedence, expr->rule, ((action) & 0xfff), s->info);
                fixity_associativity = local;
            }
            while (0);
            node->fixity_associativity = fixity_associativity;
            node->precedence = precedence;
            node->next = s->under_construction;
            s->under_construction = node;
            break;
        }
    case 5:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            node->next = expr->first_value;
            expr->first_value = node;
            break;
        }
    case 6:
        {
            struct construct_expression *expr = s->current_expression;
            struct construct_node *node = s->under_construction;
            node->start_location = offset;
            s->under_construction = node->next;
            while (construct_expression_should_reduce(s, expr, node)) construct_expression_reduce(s, expr);
            node->next = expr->first_operator;
            expr->first_operator = node;
            if (node->fixity_associativity == CONSTRUCT_PREFIX) construct_expression_reduce(s, expr);
            break;
        }
    }
}

struct fill_run_continuation;
struct fill_run_state {
    uint32_t state;
    uint32_t reachability_mask[1];
    struct fill_run_continuation *cont;
};
struct fill_run_continuation {
    struct fill_run_state *stack;
    size_t top_index;
    size_t capacity;
    int error;
};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0);
static void (*state_funcs[95])(struct owl_token_run *, struct fill_run_state *, uint16_t);
static void state_func_73(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(0 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    default: top->cont->error = 1; return;
    }
}
static void state_func_15(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 18; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_75(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 26;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_3(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 4; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_85(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    if (top->cont->top_index == 0) {
        top->cont->error = 1;
        return;
    }
    top->cont->top_index--;
    top--;
    run->tokens[token_index] = 25;
    run->states[token_index] = top->state;
    state_funcs[top->state](run, top, token_index);
    return;
}
static void state_func_31(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 34; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_54(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 57; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_16(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 17; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_18(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 19; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_9(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 20; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_32(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 33; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_34(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 35; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_47(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 52; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_55(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 56; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_57(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 58; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_2(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 59; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_1(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 61; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_90(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 93; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_91(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 92; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_93(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 94; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_76(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 79; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_77(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 78; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_79(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 80; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_64(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 24: top->state = 65; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_62(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(3 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 12: top->state = 63; return;
    case 14: top->state = 64; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_21(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 3: top->state = 36; return;
    case 4: top->state = 37; return;
    case 5: top->state = 38; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_0(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_38(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 6: top->state = 39; return;
    case 7: top->state = 40; return;
    case 8: top->state = 41; return;
    case 9: top->state = 42; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_60(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 3; return;
    case 24: top->state = 60; return;
    default: top->cont->error = 1; return;
    }
}
static void state_func_4(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 5; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    case 26: top->state = 8; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_29(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 30; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    case 26: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_51(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    case 26: top->state = 46; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_63(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 81; return;
    case 24: top->state = 82; return;
    case 25: top->state = 83; return;
    case 26: top->state = 84; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_65(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 22: top->state = 66; return;
    case 24: top->state = 67; return;
    case 25: top->state = 68; return;
    case 26: top->state = 69; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_20(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 21; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 22; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    case 26: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_52(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 2: top->state = 21; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 53; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    case 26: top->state = 46; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_78(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 16: top->state = 70; return;
    case 17: top->state = 71; return;
    case 18: top->state = 72; return;
    case 19: top->state = 73; return;
    case 22: top->state = 66; return;
    case 24: top->state = 74; return;
    case 25: top->state = 68; return;
    case 26: top->state = 69; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_28(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 9; return;
    case 16: top->state = 26; return;
    case 17: top->state = 27; return;
    case 18: top->state = 28; return;
    case 19: top->state = 29; return;
    case 22: top->state = 30; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    case 26: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_45(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 47; return;
    case 16: top->state = 48; return;
    case 17: top->state = 49; return;
    case 18: top->state = 50; return;
    case 19: top->state = 51; return;
    case 22: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    case 26: top->state = 46; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_83(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 13: top->state = 85; return;
    case 16: top->state = 86; return;
    case 17: top->state = 87; return;
    case 18: top->state = 88; return;
    case 19: top->state = 89; return;
    case 22: top->state = 81; return;
    case 24: top->state = 82; return;
    case 25: top->state = 83; return;
    case 26: top->state = 84; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_74(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 15: top->state = 75; return;
    case 16: top->state = 70; return;
    case 17: top->state = 71; return;
    case 18: top->state = 72; return;
    case 19: top->state = 73; return;
    case 22: top->state = 66; return;
    case 24: top->state = 74; return;
    case 25: top->state = 68; return;
    case 26: top->state = 69; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_80(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(2 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 76; return;
    case 11: top->state = 77; return;
    case 16: top->state = 70; return;
    case 17: top->state = 71; return;
    case 18: top->state = 72; return;
    case 19: top->state = 73; return;
    case 22: top->state = 66; return;
    case 24: top->state = 74; return;
    case 25: top->state = 68; return;
    case 26: top->state = 69; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_30(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 9; return;
    case 10: top->state = 31; return;
    case 11: top->state = 32; return;
    case 16: top->state = 26; return;
    case 17: top->state = 27; return;
    case 18: top->state = 28; return;
    case 19: top->state = 29; return;
    case 22: top->state = 30; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    case 26: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_12(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 9; return;
    case 16: top->state = 10; return;
    case 17: top->state = 11; return;
    case 18: top->state = 12; return;
    case 19: top->state = 13; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 14; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    case 26: top->state = 8; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_58(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 47; return;
    case 10: top->state = 54; return;
    case 11: top->state = 55; return;
    case 16: top->state = 48; return;
    case 17: top->state = 49; return;
    case 18: top->state = 50; return;
    case 19: top->state = 51; return;
    case 22: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    case 26: top->state = 46; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_94(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    if (!(1 & top->reachability_mask[0])) {
        top->cont->error = -1;
        return;
    }
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 10: top->state = 90; return;
    case 11: top->state = 91; return;
    case 13: top->state = 85; return;
    case 16: top->state = 86; return;
    case 17: top->state = 87; return;
    case 18: top->state = 88; return;
    case 19: top->state = 89; return;
    case 22: top->state = 81; return;
    case 24: top->state = 82; return;
    case 25: top->state = 83; return;
    case 26: top->state = 84; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_22(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 4; return;
    case 1: top->state = 9; return;
    case 10: top->state = 31; return;
    case 11: top->state = 32; return;
    case 16: top->state = 26; return;
    case 17: top->state = 27; return;
    case 18: top->state = 28; return;
    case 19: top->state = 29; return;
    case 22: top->state = 30; return;
    case 24: top->state = 23; return;
    case 25: top->state = 24; return;
    case 26: top->state = 25; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_53(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 4; return;
    case 1: top->state = 47; return;
    case 10: top->state = 54; return;
    case 11: top->state = 55; return;
    case 16: top->state = 48; return;
    case 17: top->state = 49; return;
    case 18: top->state = 50; return;
    case 19: top->state = 51; return;
    case 22: top->state = 43; return;
    case 24: top->state = 44; return;
    case 25: top->state = 45; return;
    case 26: top->state = 46; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_19(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 1: top->state = 9; return;
    case 10: top->state = 15; return;
    case 11: top->state = 16; return;
    case 16: top->state = 10; return;
    case 17: top->state = 11; return;
    case 18: top->state = 12; return;
    case 19: top->state = 13; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 14; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    case 26: top->state = 8; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void state_func_14(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index) {
    uint32_t token = run->tokens[token_index];
    switch (token) {
    case 0: top->state = 4; return;
    case 1: top->state = 9; return;
    case 10: top->state = 15; return;
    case 11: top->state = 16; return;
    case 16: top->state = 10; return;
    case 17: top->state = 11; return;
    case 18: top->state = 12; return;
    case 19: top->state = 13; return;
    case 20: top->state = 1; return;
    case 21: top->state = 2; return;
    case 22: top->state = 14; return;
    case 24: top->state = 6; return;
    case 25: top->state = 7; return;
    case 26: top->state = 8; return;
    default:
        bracket_entry_state(run, top, token_index, 3);
        return;
    }
}
static void (*state_funcs[95])(struct owl_token_run *, struct fill_run_state *, uint16_t) = {
    state_func_0, state_func_1, state_func_2, state_func_3,
    state_func_4, state_func_19, state_func_12, state_func_12,
    state_func_12, state_func_9, state_func_12, state_func_12,
    state_func_12, state_func_4, state_func_14, state_func_15,
    state_func_16, state_func_12, state_func_18, state_func_19,
    state_func_20, state_func_21, state_func_22, state_func_28,
    state_func_28, state_func_28, state_func_28, state_func_28,
    state_func_28, state_func_29, state_func_30, state_func_31,
    state_func_32, state_func_28, state_func_34, state_func_30,
    state_func_51, state_func_51, state_func_38, state_func_51,
    state_func_51, state_func_51, state_func_51, state_func_58,
    state_func_45, state_func_45, state_func_45, state_func_47,
    state_func_45, state_func_45, state_func_45, state_func_51,
    state_func_52, state_func_53, state_func_54, state_func_55,
    state_func_45, state_func_57, state_func_58, state_func_60,
    state_func_60, state_func_0, state_func_62, state_func_63,
    state_func_64, state_func_65, state_func_80, state_func_74,
    state_func_78, state_func_78, state_func_78, state_func_78,
    state_func_78, state_func_73, state_func_74, state_func_75,
    state_func_76, state_func_77, state_func_78, state_func_79,
    state_func_80, state_func_94, state_func_83, state_func_83,
    state_func_83, state_func_85, state_func_83, state_func_83,
    state_func_83, state_func_63, state_func_90, state_func_91,
    state_func_83, state_func_93, state_func_94,};
static void bracket_entry_state(struct owl_token_run *run, struct fill_run_state *top, uint16_t token_index, uint32_t mask0) {
    struct fill_run_continuation *cont = top->cont;
    cont->top_index++;
    if (cont->top_index >= cont->capacity) {
        size_t new_capacity = (cont->capacity + 2) * 3 / 2;
        if (new_capacity <= cont->capacity)
            abort();
        struct fill_run_state *new_states = realloc(cont->stack, new_capacity * sizeof(struct fill_run_state));
        if (!new_states)
            abort();
        cont->stack = new_states;
        cont->capacity = new_capacity;
        top = &cont->stack[cont->top_index];
    } else
        top++;
    top->cont = cont;
    top->reachability_mask[0] = mask0;
    run->states[token_index] = 62;
    state_func_62(run, top, token_index);
    if (top->cont->error == -1)
        top->cont->error = 1;
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index);
static size_t build_parse_tree(struct owl_default_tokenizer *, struct owl_token_run *, struct owl_tree *);

static struct owl_tree *owl_tree_create_empty(void) {
    return calloc(1, sizeof(struct owl_tree));
}

static void free_token_runs(struct owl_token_run **run) {
    while (*run) {
        struct owl_token_run *prev = (*run)->prev;
        free(*run);
        *run = prev;
    }
}
struct owl_tree *owl_tree_create_from_string(const char *string) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->string = string;
    tree->next_offset = 1;
    struct owl_default_tokenizer tokenizer = {
        .text = string,
        .info = tree,
    };
    struct owl_token_run *token_run = 0;
    struct fill_run_continuation c = {
        .capacity = 8,
        .top_index = 0,
    };
    c.stack = calloc(c.capacity, sizeof(struct fill_run_state));
    c.stack[0].state = 0;
    c.stack[0].cont = &c;
    uint16_t failing_index = 0;
    while (owl_default_tokenizer_advance(&tokenizer, &token_run)) {
        if (!fill_run_states(token_run, &c, &failing_index)) {
            free(c.stack);
            tree->error = ERROR_UNEXPECTED_TOKEN;
            find_token_range(&tokenizer, token_run, failing_index, &tree->error_range.start, &tree->error_range.end);
            free_token_runs(&token_run);
            return tree;
        }
    }
    struct fill_run_state top = c.stack[c.top_index];
    free(c.stack);
    if (string[tokenizer.offset] != '\0') {
        tree->error = ERROR_INVALID_TOKEN;
        estimate_next_token_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return tree;
    }
    switch (top.state) {
    case 0:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 14:
    case 17:
    case 19:
    case 20:
    case 52:
    case 59:
    case 60:
    case 61:
        break;
    default:
        tree->error = ERROR_MORE_INPUT_NEEDED;
        find_end_range(&tokenizer, &tree->error_range.start, &tree->error_range.end);
        free_token_runs(&token_run);
        return tree;
    }
    tree->root_offset = build_parse_tree(&tokenizer, token_run, tree);
    return tree;
}
static struct owl_tree *owl_tree_create_with_error(enum owl_error e) {
    struct owl_tree *tree = owl_tree_create_empty();
    tree->error = e;
    return tree;
}
struct owl_tree *owl_tree_create_from_file(FILE *file) {
    if (!file)
        return owl_tree_create_with_error(ERROR_INVALID_FILE);
    char *str = 0;
    size_t len = 32;
    size_t off = 0;
    while (true) {
        len = len * 3 / 2;
        char *s = realloc(str, len);
        if (!s) {
            free(str);
            return 0;
        }
        str = s;
        off += fread(str + off, 1, len - off, file);
        if (off < len) {
            str[off] = '\0';
            break;
        }
    }
    struct owl_tree *tree = owl_tree_create_from_string(str);
    if (!tree) {
        free(str);
        return 0;
    }
    tree->owns_string = true;
    return tree;
}
enum owl_error owl_tree_get_error(struct owl_tree *tree, struct source_range *error_range) {
    if (error_range)
        *error_range = tree->error_range;
    return tree->error;
}
void owl_tree_destroy(struct owl_tree *tree) {
    if (!tree)
        return;
    if (tree->owns_string)
        free((void *)tree->string);
    free(tree->parse_tree);
    free(tree);
}
static bool fill_run_states(struct owl_token_run *run, struct fill_run_continuation *cont, uint16_t *failing_index) {
    uint16_t token_index = 0;
    uint16_t number_of_tokens = run->number_of_tokens;
    while (token_index < number_of_tokens) {
        struct fill_run_state *top = &cont->stack[cont->top_index];
        run->states[token_index] = top->state;
        state_funcs[top->state](run, top, token_index);
        if (cont->error) {
            *failing_index = token_index - (cont->error > 0 ? 0 : 1);
            return false;
        }
        token_index++;
    }
    return true;
}
static const uint16_t actions[] = {
0,0,4096,0,4096,16385,0,4096,32768,32769,16385,0,4096,32768,32769,32770,32769,16385,0,4096,32768,32769,36864,40960,16384,0,4096,32768,32769,36864,
40960,16385,0,4096,32768,32769,36864,40960,16386,0,4096,32768,32769,36864,40961,16387,0,4096,32768,32769,36864,40962,0,4096,32768,32769,36864,40963,0,4096,
32768,32769,36864,45060,0,4096,32768,32769,36864,45061,0,4096,32768,32769,36864,45062,0,4096,32769,16384,0,4096,32770,16384,0,4096,32770,16385,0,4096,
32770,32769,16385,0,16384,0,16385,0,16389,0,16390,0,20480,8192,0,20480,8192,4096,0,20480,8192,4096,32768,12288,0,20480,8192,4096,32768,12289,
0,20480,8192,4096,32768,12290,32768,12288,0,20480,8192,4096,32768,12290,32768,12289,0,20480,8192,4096,32768,12290,32768,12290,0,20480,8192,4096,32768,12290,
32768,12291,0,20480,8192,4096,32769,16385,0,20480,8192,16385,0,20480,8192,16389,0,20480,45063,24576,40960,16384,0,20480,45063,24576,40960,16385,0,20480,
45063,24576,40960,16386,0,20480,45063,24576,40961,16387,0,20480,45063,24576,40962,0,20480,45063,24576,40963,0,20480,45063,24576,45060,0,20480,45063,24576,45061,
0,20480,45063,24576,45062,0,20480,45064,0,24576,40960,16384,0,24576,40960,16385,0,24576,40960,16386,0,24576,40961,16387,0,24576,40962,0,24576,40963,
0,24576,45060,0,24576,45061,0,24576,45062,0,32768,32769,16385,0,32768,32769,32770,32769,16385,0,32768,32769,36864,40960,16384,0,32768,32769,36864,40960,
16385,0,32768,32769,36864,40960,16386,0,32768,32769,36864,40961,16387,0,32768,32769,36864,40962,0,32768,32769,36864,40963,0,32768,32769,36864,45060,0,32768,
32769,36864,45061,0,32768,32769,36864,45062,0,32769,16384,0,32770,16384,0,32770,16385,0,36864,40960,16384,0,36864,40960,16385,0,36864,40960,16386,0,
36864,40961,16387,0,36864,40962,0,36864,40963,0,36864,45060,0,36864,45061,0,36864,45062,0,36868,40960,16384,0,36868,40960,16385,0,36868,40960,16386,
0,36868,40961,16387,0,36868,40962,0,36868,40963,0,36868,45060,0,36868,45061,0,36868,45062,0,};
static const uint8_t action_table[1024][3][7] = {
{{99,164,88,159,240,2,0,},{156,40,96,156,200,5,0,},},{{95,244,4,187,0,0,0,},{158,96,72,208,128,9,0,},},{{159,80,72,208,56,2,0,},{153,128,89,153,56,5,0,},},
{{90,20,106,119,36,166,69,},{159,96,68,208,8,2,0,},},{{158,216,97,114,220,9,0,},{158,136,104,119,12,201,9,},},{{98,156,84,159,0,0,0,},{154,96,73,154,184,7,0,},},
{{92,12,106,119,116,167,69,},{153,56,101,108,252,149,9,},},{{187,24,73,89,212,10,0,},{164,136,78,93,196,6,0,},},{{90,52,102,108,252,165,69,},},{{123,132,46,103,4,0,0,},
{92,36,66,92,140,7,0,},},{{92,44,74,92,188,7,0,},},{{94,180,106,119,132,75,10,},{156,176,0,99,76,3,0,},},{{158,112,68,208,88,9,0,},},{{92,68,98,90,60,7,0,},
{161,32,100,108,228,200,9,},},{{164,200,106,119,36,70,10,},{157,216,100,108,252,213,9,},},{{126,172,20,117,20,0,0,},{155,152,105,119,140,154,9,},},{{114,220,97,114,4,3,0,},
{94,148,102,108,108,75,10,},{153,96,65,154,72,6,0,},},{{103,12,90,90,244,2,0,},{93,204,98,164,56,7,0,},},{{120,140,42,105,4,0,0,},{91,12,102,108,108,171,69,},},
{{103,28,90,90,244,2,0,},},{{223,152,68,208,184,10,0,},},{{103,44,90,90,244,2,0,},{156,64,96,156,200,5,0,},},{{108,180,54,94,4,0,0,},},{{103,60,90,90,244,2,0,},
{94,244,90,164,232,10,0,},{92,20,66,92,140,7,0,},},{{187,240,64,89,164,10,0,},{161,112,88,156,32,8,0,},},{{93,252,105,119,116,71,10,},{156,80,88,156,56,5,0,},},
{{161,112,64,208,48,9,0,},{158,56,72,208,128,9,0,},},{0},{{223,48,96,156,80,10,0,},},{{113,116,44,102,4,0,0,},{154,192,89,153,216,6,0,},},{{164,176,102,108,252,69,10,},
{161,64,88,156,32,8,0,},},{{89,12,73,89,188,7,0,},{157,184,96,157,200,5,0,},},{{99,164,89,159,240,2,0,},{153,136,69,154,112,6,0,},},{{93,156,106,119,116,71,10,},
{208,40,68,208,160,7,0,},},{{93,252,101,108,92,71,10,},{92,116,70,92,164,7,0,},{89,28,69,89,164,7,0,},},{{95,100,4,223,0,0,0,},{155,40,97,153,80,10,0,},},
{{164,248,89,164,56,5,0,},},{{94,188,70,93,180,11,0,},{90,132,90,90,60,5,0,},},{{164,224,78,93,196,6,0,},{157,8,77,89,196,6,0,},},{{114,20,88,98,244,2,0,},
{157,208,68,89,116,6,0,},},{{92,44,66,92,140,7,0,},{161,136,100,108,228,200,9,},},{{97,156,89,153,240,2,0,},{94,156,70,93,180,11,0,},{187,184,64,89,164,10,0,},},
{0},{{159,152,104,119,172,193,9,},{155,128,69,154,184,10,0,},},{{94,140,74,93,204,11,0,},{153,104,101,108,252,149,9,},},{{161,56,88,156,32,8,0,},{159,40,88,156,152,0,0,},},
{{208,80,100,108,92,199,9,},},{{159,56,88,156,152,0,0,},},{0},{{97,60,89,153,240,2,0,},{156,88,76,208,192,6,0,},},{{93,196,90,164,216,6,0,},{208,136,72,208,184,7,0,},},
{{97,44,89,153,240,2,0,},},{{159,48,64,208,216,1,0,},{153,168,101,108,252,149,9,},},{{153,88,73,154,152,6,0,},},{{93,228,90,164,216,6,0,},{158,152,104,119,12,201,9,},},
{{164,184,70,93,116,6,0,},},{{112,28,41,101,4,0,0,},{159,80,64,208,216,1,0,},},{{106,84,98,91,36,3,0,},{90,20,98,90,204,5,0,},},{{129,236,125,129,4,224,9,},
{108,244,54,94,4,0,0,},{223,40,68,208,184,10,0,},},{{164,152,70,93,116,6,0,},},{{132,100,6,122,4,0,0,},{153,144,105,119,36,150,9,},},{{187,24,65,89,164,10,0,},
{187,200,72,89,212,10,0,},},{{93,164,106,119,116,71,10,},},{{208,48,96,156,56,7,0,},},{{107,92,5,155,0,0,0,},{90,108,90,123,156,5,0,},{164,248,105,119,36,70,10,},},
{{94,180,98,164,72,11,0,},{156,48,104,119,36,198,9,},},{{187,176,104,119,140,218,9,},},{{91,44,98,90,76,11,0,},{90,68,66,92,76,6,0,},},{{100,44,80,159,0,0,0,},
{164,200,98,164,200,5,0,},{164,192,102,108,252,69,10,},},{{155,112,101,108,116,154,9,},},{{95,204,4,187,0,0,0,},{158,96,100,108,228,200,9,},},{{208,88,68,208,160,7,0,},
{158,80,104,119,12,201,9,},},{{95,188,4,187,0,0,0,},{158,104,104,119,12,201,9,},},{{92,20,90,90,220,6,0,},{155,80,101,108,116,154,9,},},{{103,116,90,90,244,2,0,},},
{{91,132,70,92,180,11,0,},{89,28,65,89,140,7,0,},},{0},{{223,136,88,156,240,9,0,},{164,136,102,108,252,69,10,},},{{94,228,70,93,180,11,0,},{89,4,89,115,28,7,0,},},
{{156,80,64,208,72,6,0,},{154,72,101,108,92,151,9,},},{{158,56,64,208,48,9,0,},},{{94,244,66,93,156,11,0,},{155,200,89,127,20,10,0,},},{{187,224,96,157,80,10,0,},
{155,208,73,154,208,10,0,},},{{93,140,106,119,116,71,10,},{154,104,101,108,92,151,9,},},{{223,152,100,108,116,202,9,},},{{89,12,65,89,140,7,0,},{157,184,104,119,36,214,9,},},
{{90,60,74,92,156,6,0,},{223,80,88,156,240,9,0,},{187,192,96,157,80,10,0,},},{{95,68,4,223,0,0,0,},},{{89,204,68,89,164,7,0,},},{{164,144,90,164,56,5,0,},
{155,40,105,119,140,154,9,},},{{157,192,72,89,156,6,0,},{155,160,97,153,80,10,0,},},{{156,152,100,108,252,197,9,},{154,144,73,154,184,7,0,},},{{98,52,84,159,0,0,0,},
{164,224,70,93,116,6,0,},{157,8,69,89,116,6,0,},},{{157,208,76,89,196,6,0,},},{{223,112,104,119,140,202,9,},{155,144,73,154,208,10,0,},},{{92,60,70,92,164,7,0,},
{187,184,88,157,240,9,0,},},{{154,40,89,153,216,6,0,},},{{159,152,96,156,64,1,0,},{157,224,100,108,252,213,9,},},{{97,68,89,153,240,2,0,},{92,12,90,90,220,6,0,},
{164,184,66,93,76,6,0,},},{{90,84,74,92,156,6,0,},{161,56,96,156,176,8,0,},},{{208,96,100,108,92,199,9,},},{{91,116,102,108,108,171,69,},{208,104,100,108,92,199,9,},},
{{92,28,98,90,60,7,0,},{90,68,70,92,116,6,0,},},{{92,132,106,119,116,167,69,},{90,116,74,92,156,6,0,},},{{208,136,64,208,136,7,0,},{208,96,68,208,160,7,0,},},
{{91,84,102,108,108,171,69,},{208,112,88,156,216,6,0,},},{{95,44,4,223,0,0,0,},{153,160,105,119,36,150,9,},},{{93,244,70,93,164,7,0,},},{{158,152,96,156,176,8,0,},
{154,200,89,127,252,6,0,},},{{89,228,100,108,92,215,9,},{164,184,78,93,196,6,0,},},{{91,52,74,92,204,11,0,},{153,128,105,119,36,150,9,},},{{223,56,104,119,140,202,9,},},
{{157,224,64,89,76,6,0,},},{{89,196,100,108,92,215,9,},{164,152,78,93,196,6,0,},},{{159,64,96,156,64,1,0,},},{{107,196,5,155,0,0,0,},{154,128,97,153,56,7,0,},},
{{106,60,98,91,36,3,0,},{93,164,98,164,56,7,0,},},{{154,152,101,108,92,151,9,},},{{159,96,96,156,64,1,0,},{155,168,69,154,184,10,0,},},{{187,160,100,108,116,218,9,},
{164,240,49,129,52,3,0,},},{{89,180,88,157,216,6,0,},{187,176,96,157,80,10,0,},},{{91,44,106,119,132,171,69,},},{{89,180,64,89,140,7,0,},{155,136,69,154,184,10,0,},},
{{92,52,98,90,60,7,0,},{154,192,97,153,56,7,0,},},{{156,96,100,108,252,197,9,},},{{153,168,16,117,156,3,0,},},{{94,196,102,108,108,75,10,},},{{94,204,102,108,108,75,10,},
{153,112,101,108,252,149,9,},},{{99,4,88,159,240,2,0,},},{{161,136,64,208,48,9,0,},},{{105,228,90,164,240,2,0,},{90,12,98,90,204,5,0,},},{{94,244,106,119,132,75,10,},
{223,136,96,156,80,10,0,},},{0},{{156,80,72,208,152,6,0,},},{{153,168,77,154,192,6,0,},},{{159,40,96,156,64,1,0,},},{{156,56,72,208,152,6,0,},},{{161,64,100,108,228,200,9,},
{154,192,105,119,116,151,9,},},{{124,212,6,120,4,0,0,},},{{90,84,106,119,36,166,69,},{155,56,105,119,140,154,9,},},{{187,192,104,119,140,218,9,},{159,88,100,108,124,193,9,},},
{{100,228,81,159,0,0,0,},},{{208,56,64,208,136,7,0,},},{{164,144,66,93,76,6,0,},{153,152,97,153,200,5,0,},},{{155,160,105,119,140,154,9,},},{{93,188,90,164,216,6,0,},
{154,144,65,154,136,7,0,},},{{91,36,66,92,156,11,0,},{89,220,100,108,92,215,9,},{208,152,64,208,136,7,0,},},{{164,240,66,93,76,6,0,},{157,24,65,89,76,6,0,},},
{{223,112,96,156,80,10,0,},{155,144,65,154,160,10,0,},},{{99,44,88,159,240,2,0,},{187,200,88,157,240,9,0,},},{{102,60,88,156,240,2,0,},{89,188,100,108,92,215,9,},},
{{101,204,88,157,240,2,0,},{164,192,106,119,36,70,10,},},{{94,140,90,164,232,10,0,},{155,208,97,153,80,10,0,},},{{158,88,100,108,228,200,9,},{157,176,76,89,196,6,0,},},
{{154,160,101,108,92,151,9,},},{{153,208,69,154,112,6,0,},},{{92,28,106,119,116,167,69,},{223,128,88,113,52,10,0,},},{{95,212,4,187,0,0,0,},{92,132,98,90,60,7,0,},
{90,116,66,92,76,6,0,},},{{93,228,74,93,188,7,0,},},{{208,152,68,208,160,7,0,},{208,112,64,208,136,7,0,},},{{153,72,101,108,252,149,9,},},{{164,224,98,164,200,5,0,},},
{{159,96,64,208,216,1,0,},{156,56,96,156,200,5,0,},},{{91,68,70,92,180,11,0,},{159,32,100,108,124,193,9,},},{{164,136,66,93,76,6,0,},{153,40,101,108,252,149,9,},},
{{223,56,96,156,80,10,0,},{187,232,88,157,240,9,0,},},{{164,136,74,93,156,6,0,},},{{208,32,104,119,116,199,9,},},{{223,96,104,119,140,202,9,},{159,64,104,119,172,193,9,},},
{{223,88,96,156,80,10,0,},{164,160,98,164,200,5,0,},},{{105,196,90,164,240,2,0,},{161,88,100,108,228,200,9,},},{{91,60,106,119,132,171,69,},},{{159,96,104,119,172,193,9,},
{157,200,100,108,252,213,9,},},{{90,36,74,92,156,6,0,},{187,8,105,119,140,218,9,},},{{103,84,90,90,244,2,0,},{187,176,88,157,240,9,0,},},{{154,136,69,154,160,7,0,},},
{{91,28,102,108,108,171,69,},{89,180,72,89,188,7,0,},},{{92,52,106,119,116,167,69,},{223,104,88,156,240,9,0,},},{{154,184,89,111,28,7,0,},},{{154,168,69,154,160,7,0,},},
{{93,148,106,119,116,71,10,},{92,132,102,108,92,167,69,},},{{93,140,98,164,56,7,0,},},{{154,168,97,153,56,7,0,},},{{106,36,98,91,36,3,0,},{91,124,90,132,12,11,0,},},
{{93,180,74,93,188,7,0,},},{{127,180,5,110,4,0,0,},{94,244,98,164,72,11,0,},{223,136,104,119,140,202,9,},},{{107,140,5,155,0,0,0,},{187,240,104,119,140,218,9,},},
{{154,208,105,119,116,151,9,},},{{95,28,5,187,0,0,0,},{153,168,69,154,112,6,0,},},{{89,188,72,89,188,7,0,},{159,40,104,119,172,193,9,},},{{92,108,90,123,28,7,0,},
{223,48,72,208,208,10,0,},{161,56,100,108,228,200,9,},},{{105,236,90,124,4,3,0,},{158,40,100,108,228,200,9,},},{{208,88,104,119,116,199,9,},},{{94,196,90,164,232,10,0,},
{187,208,68,89,188,10,0,},{155,56,97,153,80,10,0,},},{{223,80,72,208,208,10,0,},},{{93,156,66,93,140,7,0,},{161,80,68,208,88,9,0,},},{{208,56,72,208,184,7,0,},},
{{159,72,88,95,60,0,0,},{153,152,105,119,36,150,9,},},{{208,40,72,208,184,7,0,},{156,136,72,208,152,6,0,},},{{107,100,5,155,0,0,0,},{161,136,88,156,32,8,0,},
{154,144,89,153,216,6,0,},},{{91,36,74,92,204,11,0,},{156,168,1,99,76,3,0,},},{{90,20,66,92,76,6,0,},{157,24,73,89,156,6,0,},},{{101,196,88,157,240,2,0,},
{90,28,74,92,156,6,0,},{155,144,89,153,240,9,0,},},{{161,40,104,119,12,201,9,},{154,40,101,108,92,151,9,},},{{208,64,100,108,92,199,9,},{158,40,88,156,32,8,0,},},
{{164,192,98,164,200,5,0,},},{{94,140,98,164,72,11,0,},{159,16,88,98,140,2,0,},{153,104,77,154,192,6,0,},},{{90,84,90,90,60,5,0,},{158,64,96,156,176,8,0,},},
{{161,224,97,114,220,9,0,},{158,72,88,95,212,7,0,},},{{153,208,77,154,192,6,0,},},{0},{{92,132,90,90,220,6,0,},{155,136,97,153,80,10,0,},},{{93,228,66,93,140,7,0,},
{153,160,97,153,200,5,0,},},{{208,112,72,208,184,7,0,},},{{155,192,97,153,80,10,0,},},{{161,104,88,156,32,8,0,},{156,40,76,208,192,6,0,},},{{108,228,54,94,4,0,0,},
{156,56,104,119,36,198,9,},{154,112,69,154,160,7,0,},},{{157,160,100,108,252,213,9,},},{{159,80,104,119,172,193,9,},{158,152,88,156,32,8,0,},},{{90,4,98,130,28,5,0,},
{158,136,68,208,88,9,0,},},{{100,236,81,159,0,0,0,},{89,244,88,157,216,6,0,},},{{208,32,96,156,56,7,0,},},{{92,116,102,108,92,167,69,},{223,136,68,208,184,10,0,},
{153,144,65,154,72,6,0,},},{{187,200,96,157,80,10,0,},{155,184,89,111,52,10,0,},},{{90,52,70,92,116,6,0,},{158,48,100,108,228,200,9,},},{{91,60,98,90,76,11,0,},
{159,112,68,208,8,2,0,},},{{91,116,90,90,236,10,0,},{159,48,104,119,172,193,9,},},{{94,180,74,93,204,11,0,},{187,8,97,157,80,10,0,},},{{95,156,4,223,0,0,0,},
{91,68,90,90,236,10,0,},{156,80,76,208,192,6,0,},},{{100,164,80,159,0,0,0,},{89,164,100,108,92,215,9,},{159,88,64,208,216,1,0,},},{{94,164,70,93,180,11,0,},
{91,84,90,90,236,10,0,},{155,112,89,153,240,9,0,},},{{94,148,74,93,204,11,0,},{155,96,101,108,116,154,9,},},{{223,48,64,208,160,10,0,},{158,112,100,108,228,200,9,},},
{{99,236,89,159,240,2,0,},},{0},{{223,152,104,119,140,202,9,},{156,112,64,208,72,6,0,},},{{223,80,96,156,80,10,0,},{164,136,98,164,200,5,0,},},{{154,88,101,108,92,151,9,},},
{0},{{99,220,89,159,240,2,0,},{92,20,98,90,60,7,0,},},{{187,240,96,157,80,10,0,},{187,216,68,89,188,10,0,},},{{154,208,97,153,56,7,0,},},{{157,176,96,157,200,5,0,},},
{{153,192,77,154,192,6,0,},},{{187,224,88,157,240,9,0,},{156,32,100,108,252,197,9,},},{{156,48,88,156,56,5,0,},},{{100,60,80,159,0,0,0,},},{{94,196,66,93,156,11,0,},
{153,136,105,119,36,150,9,},},{{223,80,64,208,160,10,0,},},{{208,40,100,108,92,199,9,},{158,128,88,113,132,8,0,},},{{100,92,80,159,0,0,0,},{89,28,101,108,92,215,9,},},
{{106,132,98,91,36,3,0,},{93,140,90,164,216,6,0,},},{{90,44,106,119,36,166,69,},{156,136,64,208,72,6,0,},},{{93,188,74,93,188,7,0,},},{0},{{159,104,96,156,64,1,0,},
{157,208,100,108,252,213,9,},},{{92,44,98,90,60,7,0,},},{{154,128,105,119,116,151,9,},},{{93,196,106,119,116,71,10,},{92,44,106,119,116,167,69,},{164,160,78,93,196,6,0,},},
{{159,152,72,208,56,2,0,},{155,128,101,108,116,154,9,},},{{92,12,98,90,60,7,0,},{153,192,65,154,72,6,0,},{153,104,69,154,112,6,0,},},{{105,188,90,164,240,2,0,},
{92,68,66,92,140,7,0,},},{{159,136,68,208,8,2,0,},{157,240,64,89,76,6,0,},},{0},{{155,88,101,108,116,154,9,},},{{90,36,90,90,60,5,0,},},{{208,136,104,119,116,199,9,},
{161,128,88,113,132,8,0,},},{{90,52,90,90,60,5,0,},{153,72,89,153,56,5,0,},},{{90,60,66,92,76,6,0,},{155,192,105,119,140,154,9,},},{{91,52,70,92,180,11,0,},
{154,64,89,153,216,6,0,},},{{158,152,72,208,128,9,0,},{155,96,97,153,80,10,0,},},{{164,184,102,108,252,69,10,},},{{157,176,88,157,56,5,0,},},{0},{{89,244,64,89,140,7,0,},
{154,96,101,108,92,151,9,},},{{208,32,88,156,216,6,0,},{164,152,102,108,252,69,10,},},{{108,196,54,94,4,0,0,},{153,144,73,154,152,6,0,},},{{187,24,97,157,80,10,0,},
{187,200,104,119,140,218,9,},},{{93,180,98,164,56,7,0,},{154,152,89,153,216,6,0,},},{{94,148,106,119,132,75,10,},},{{101,180,88,157,240,2,0,},},{{92,84,90,90,220,6,0,},
{155,136,73,154,208,10,0,},},{{187,176,72,89,212,10,0,},{154,192,101,108,92,151,9,},},{{130,244,57,129,4,0,0,},{157,216,64,89,76,6,0,},},{{92,36,70,92,164,7,0,},},
{{94,148,66,93,156,11,0,},{155,136,105,119,140,154,9,},{153,96,101,108,252,149,9,},},{{156,96,76,208,192,6,0,},},{{208,88,100,108,92,199,9,},{158,80,72,208,128,9,0,},},
{{164,216,90,118,156,5,0,},{157,232,100,108,252,213,9,},},{{223,152,96,156,80,10,0,},{156,112,72,208,152,6,0,},},{{156,64,76,208,192,6,0,},},{{91,132,102,108,108,171,69,},
{161,216,97,114,220,9,0,},},{0},{{94,252,101,108,108,75,10,},{92,20,106,119,116,167,69,},},{{161,96,88,156,32,8,0,},},{{161,152,96,156,176,8,0,},{161,112,100,108,228,200,9,},},
{{159,56,68,208,8,2,0,},{153,80,89,153,56,5,0,},},{{156,40,68,208,112,6,0,},},{{90,28,106,119,36,166,69,},{187,224,64,89,164,10,0,},{164,200,90,164,56,5,0,},},
{{98,140,84,159,0,0,0,},{89,236,104,119,116,215,9,},{164,176,66,93,76,6,0,},},{{159,88,68,208,8,2,0,},{159,80,96,156,64,1,0,},},{{94,196,74,93,204,11,0,},
{153,136,97,153,200,5,0,},},{{90,60,106,119,36,166,69,},{223,48,88,156,240,9,0,},{164,232,90,124,108,5,0,},},{{128,124,4,109,4,0,0,},{92,28,70,92,164,7,0,},},
{{89,204,100,108,92,215,9,},{208,56,88,156,216,6,0,},},{{153,128,101,108,252,149,9,},},{{94,188,106,119,132,75,10,},{223,64,96,156,80,10,0,},{156,136,88,156,56,5,0,},},
{{156,152,68,208,112,6,0,},{154,144,105,119,116,151,9,},},{{89,228,64,89,140,7,0,},{157,8,101,108,252,213,9,},},{{164,240,90,164,56,5,0,},{157,24,89,157,56,5,0,},},
{{94,156,106,119,132,75,10,},{223,96,96,156,80,10,0,},},{{158,104,100,108,228,200,9,},},{{98,84,84,159,0,0,0,},{93,196,98,164,56,7,0,},{157,176,72,89,156,6,0,},},
{{95,180,4,187,0,0,0,},{159,152,64,208,216,1,0,},{153,192,101,108,252,149,9,},},{{153,192,89,153,56,5,0,},},{{208,80,64,208,136,7,0,},},{{157,240,72,89,156,6,0,},},
{{153,120,89,107,204,4,0,},},{{113,44,44,102,4,0,0,},{90,68,102,108,252,165,69,},},{{90,116,106,119,36,166,69,},{158,248,127,158,0,224,9,},},{{208,136,96,156,56,7,0,},
{164,224,102,108,252,69,10,},},{{155,208,69,154,184,10,0,},{155,72,89,153,240,9,0,},},{{94,220,90,118,44,11,0,},{153,88,101,108,252,149,9,},},{{93,244,102,108,92,71,10,},
{89,28,97,157,56,7,0,},{154,64,97,153,56,7,0,},},{{158,48,68,208,88,9,0,},{156,56,88,156,56,5,0,},},{{89,228,68,89,164,7,0,},{164,136,70,93,116,6,0,},},
{{94,204,98,164,72,11,0,},{187,232,100,108,116,218,9,},},{{223,40,96,156,80,10,0,},{187,216,104,119,140,218,9,},},{{89,244,72,89,188,7,0,},{164,160,102,108,252,69,10,},},
{{100,68,80,159,0,0,0,},{223,112,100,108,116,202,9,},},{{159,64,64,208,216,1,0,},{155,32,97,153,80,10,0,},},{{158,16,88,98,196,9,0,},},{{89,212,72,89,188,7,0,},
{208,88,88,156,216,6,0,},},{{105,156,90,164,240,2,0,},},{{157,200,76,89,196,6,0,},{155,168,101,108,116,154,9,},},{{90,36,66,92,76,6,0,},{187,8,65,89,164,10,0,},},
{{108,164,54,94,4,0,0,},{187,176,64,89,164,10,0,},},{{98,92,84,159,0,0,0,},{157,216,72,89,156,6,0,},},{{103,20,90,90,244,2,0,},{155,112,73,154,208,10,0,},},
{{92,52,66,92,140,7,0,},},{{105,180,90,164,240,2,0,},{93,140,102,108,92,71,10,},{156,96,68,208,112,6,0,},},{{158,80,64,208,48,9,0,},},{{107,172,5,155,0,0,0,},
{103,52,90,90,244,2,0,},{161,112,96,156,176,8,0,},},{{110,212,41,97,4,0,0,},{161,104,104,119,12,201,9,},},{{113,156,44,102,4,0,0,},{161,16,88,98,196,9,0,},
{156,64,68,208,112,6,0,},},{{93,164,70,93,164,7,0,},},{0},{{94,228,98,164,72,11,0,},},{{154,72,89,153,216,6,0,},},{{161,56,104,119,12,201,9,},{158,56,100,108,228,200,9,},},
{{94,156,74,93,204,11,0,},{153,80,97,153,200,5,0,},},{{159,40,64,208,216,1,0,},},{{90,28,98,90,204,5,0,},{187,224,72,89,212,10,0,},},{{98,220,85,159,0,0,0,},
{89,236,96,157,56,7,0,},{164,176,74,93,156,6,0,},},{{97,164,89,153,240,2,0,},{153,48,33,126,76,4,0,},},{{223,32,100,108,116,202,9,},{153,136,89,153,56,5,0,},},
{{90,60,98,90,204,5,0,},{187,192,72,89,212,10,0,},},{{93,156,90,164,216,6,0,},{90,60,102,108,252,165,69,},},{{97,132,89,153,240,2,0,},{155,104,69,154,184,10,0,},},
{{155,96,69,154,184,10,0,},},{{94,188,98,164,72,11,0,},{223,64,104,119,140,202,9,},},{{156,152,76,208,192,6,0,},{154,56,101,108,92,151,9,},},{{91,36,98,90,76,11,0,},
{89,220,68,89,164,7,0,},{155,72,101,108,116,154,9,},},{{108,188,54,94,4,0,0,},{97,140,89,153,240,2,0,},},{{94,156,98,164,72,11,0,},{187,184,100,108,116,218,9,},
{159,32,88,156,152,0,0,},},{{156,104,100,108,252,197,9,},},{{89,188,68,89,164,7,0,},{159,48,88,156,152,0,0,},},{{164,192,74,93,156,6,0,},{159,152,88,156,152,0,0,},},
{{106,28,98,91,36,3,0,},},{{208,80,72,208,184,7,0,},{154,160,89,153,216,6,0,},},{{97,36,89,153,240,2,0,},{91,116,74,92,204,11,0,},{155,136,101,108,116,154,9,},},
{{153,208,101,108,252,149,9,},},{{92,28,74,92,188,7,0,},},{{90,116,98,90,204,5,0,},},{{98,100,84,159,0,0,0,},{94,196,70,93,180,11,0,},{91,84,74,92,204,11,0,},},
{{158,136,100,108,228,200,9,},},{{91,132,74,92,204,11,0,},},{{154,64,105,119,116,151,9,},},{{94,228,102,108,108,75,10,},{156,56,64,208,72,6,0,},},{{157,176,100,108,252,213,9,},
{153,128,77,154,192,6,0,},},{{99,100,88,159,240,2,0,},{94,204,106,119,132,75,10,},{90,20,70,92,116,6,0,},},{{105,252,89,164,240,2,0,},{223,40,104,119,140,202,9,},
{158,32,88,156,32,8,0,},},{0},{{102,116,88,156,240,2,0,},{223,152,72,208,208,10,0,},},{{159,64,72,208,56,2,0,},{153,144,89,153,56,5,0,},},{{159,48,100,108,124,193,9,},},
{{98,164,84,159,0,0,0,},{208,48,68,208,160,7,0,},},{{91,60,74,92,204,11,0,},{158,80,88,156,32,8,0,},},{{159,96,72,208,56,2,0,},{156,88,72,208,152,6,0,},},
{{187,8,73,89,212,10,0,},{158,96,88,156,32,8,0,},},{{98,228,85,159,0,0,0,},{91,44,70,92,180,11,0,},{89,164,88,157,216,6,0,},},{{91,28,74,92,204,11,0,},
{89,180,100,108,92,215,9,},},{{97,148,89,153,240,2,0,},{155,112,65,154,160,10,0,},},{{89,28,73,89,188,7,0,},{155,136,89,153,240,9,0,},},{{161,48,96,156,176,8,0,},
{154,32,101,108,92,151,9,},},{{157,232,88,157,56,5,0,},},{{92,60,90,90,220,6,0,},{153,112,89,153,56,5,0,},},{{156,112,88,156,56,5,0,},},{{108,148,54,94,4,0,0,},
{92,44,90,90,220,6,0,},},{{111,212,45,97,4,0,0,},{92,84,98,90,60,7,0,},},{{187,208,64,89,164,10,0,},},{{99,140,88,159,240,2,0,},{94,228,106,119,132,75,10,},
{89,196,68,89,164,7,0,},},{{161,96,72,208,128,9,0,},{153,192,73,154,152,6,0,},},{{154,208,73,154,184,7,0,},},{{153,80,105,119,36,150,9,},},{{153,32,101,108,252,149,9,},},
{{98,4,84,159,0,0,0,},{158,120,89,107,244,7,0,},{154,104,65,154,136,7,0,},},{{109,44,40,102,4,0,0,},{157,192,76,89,196,6,0,},},{{89,12,101,108,92,215,9,},
{157,184,76,89,196,6,0,},},{{187,208,100,108,116,218,9,},},{{223,80,104,119,140,202,9,},{187,16,89,125,20,10,0,},},{{89,204,88,157,216,6,0,},{208,56,100,108,92,199,9,},},
{{161,112,72,208,128,9,0,},},{{157,192,100,108,252,213,9,},},{{158,8,96,100,172,9,0,},{156,136,104,119,36,198,9,},},{{93,188,98,164,56,7,0,},},{{91,36,106,119,132,171,69,},
{223,96,72,208,208,10,0,},{164,184,74,93,156,6,0,},},{{223,112,68,208,184,10,0,},{155,144,101,108,116,154,9,},},{{223,112,72,208,208,10,0,},},{{161,40,72,208,128,9,0,},
{154,128,65,154,136,7,0,},},{{208,64,68,208,160,7,0,},},{{108,140,54,94,4,0,0,},{164,192,66,93,76,6,0,},},{{131,4,98,130,20,3,0,},{158,88,72,208,128,9,0,},},
{{108,156,54,94,4,0,0,},{100,52,80,159,0,0,0,},},{{111,172,45,97,4,0,0,},{91,116,66,92,156,11,0,},{157,240,88,157,56,5,0,},},{{91,44,90,90,236,10,0,},},
{{161,152,100,108,228,200,9,},},{{107,132,5,155,0,0,0,},{208,96,88,156,216,6,0,},{154,80,105,119,116,151,9,},},{{91,84,66,92,156,11,0,},{91,52,66,92,156,11,0,},},
{0},{{155,192,65,154,160,10,0,},},{{91,28,90,90,236,10,0,},},{{93,180,106,119,116,71,10,},{154,112,101,108,92,151,9,},},{{153,128,69,154,112,6,0,},},{0},{{95,228,4,187,0,0,0,},
{187,216,88,157,240,9,0,},{158,32,96,156,176,8,0,},},{{93,148,90,164,216,6,0,},},{{89,188,104,119,116,215,9,},},{{161,56,68,208,88,9,0,},},{{161,88,64,208,48,9,0,},},
{{89,212,88,157,216,6,0,},},{{91,60,66,92,156,11,0,},{159,216,97,114,172,2,0,},{159,112,100,108,124,193,9,},},{{93,228,106,119,116,71,10,},},{{119,84,62,106,4,0,0,},
{100,84,80,159,0,0,0,},{158,112,72,208,128,9,0,},},{0},{{91,28,66,92,156,11,0,},{157,216,88,157,56,5,0,},},{{110,92,41,97,4,0,0,},{94,164,102,108,108,75,10,},
{159,144,88,128,212,0,0,},},{{155,136,65,154,160,10,0,},{153,96,77,154,192,6,0,},},{{90,12,106,119,36,166,69,},{161,48,104,119,12,201,9,},},{0},{{101,228,88,157,240,2,0,},
{155,80,89,153,240,9,0,},{153,112,65,154,72,6,0,},},{{97,76,89,153,240,2,0,},{156,112,96,156,200,5,0,},},{0},{{100,164,81,159,0,0,0,},{154,88,69,154,160,7,0,},},
{{159,248,127,158,16,224,9,},{153,64,105,119,36,150,9,},},{{158,64,64,208,48,9,0,},},{{161,136,68,208,88,9,0,},{161,96,64,208,48,9,0,},},{{161,152,88,156,32,8,0,},
{154,208,65,154,136,7,0,},},{{164,240,70,93,116,6,0,},},{{123,20,46,103,4,0,0,},{158,96,96,156,176,8,0,},},{{93,140,70,93,164,7,0,},{154,104,73,154,184,7,0,},},
{{92,20,74,92,188,7,0,},{164,176,90,164,56,5,0,},},{{92,28,66,92,140,7,0,},},{{94,196,98,164,72,11,0,},{153,136,73,154,152,6,0,},},{{103,36,90,90,244,2,0,},
{187,192,88,157,240,9,0,},{153,128,97,153,200,5,0,},},{{89,28,89,157,216,6,0,},},{{91,52,106,119,132,171,69,},{164,144,102,108,252,69,10,},},{{187,200,64,89,164,10,0,},},
{{90,44,74,92,156,6,0,},{156,136,96,156,200,5,0,},{155,192,89,153,240,9,0,},},{{93,188,106,119,116,71,10,},},{{164,240,102,108,252,69,10,},{157,24,101,108,252,213,9,},},
{{99,60,88,159,240,2,0,},},{{92,60,106,119,116,167,69,},{153,192,97,153,200,5,0,},},{{161,40,64,208,48,9,0,},{154,128,73,154,184,7,0,},},{{93,196,74,93,188,7,0,},},
{{155,104,97,153,80,10,0,},{153,104,105,119,36,150,9,},},{{158,88,64,208,48,9,0,},},{{208,80,88,156,216,6,0,},},{{159,136,100,108,124,193,9,},{157,240,96,157,200,5,0,},},
{{93,148,70,93,164,7,0,},{92,132,74,92,188,7,0,},},{{97,84,89,153,240,2,0,},{92,28,90,90,220,6,0,},{155,88,69,154,184,10,0,},},{{93,228,102,108,92,71,10,},
{154,80,97,153,56,7,0,},},{{208,152,96,156,56,7,0,},{159,112,72,208,56,2,0,},},{{223,88,88,156,240,9,0,},},{{155,192,73,154,208,10,0,},},{{156,40,100,108,252,197,9,},},
{{91,68,98,90,76,11,0,},{208,112,100,108,92,199,9,},},{{153,40,89,153,56,5,0,},},{{223,56,68,208,184,10,0,},},{{223,40,88,156,240,9,0,},{158,32,104,119,12,201,9,},},
{{93,148,66,93,140,7,0,},{89,244,96,157,56,7,0,},{154,96,69,154,160,7,0,},},{{92,116,66,92,140,7,0,},{153,144,101,108,252,149,9,},{153,56,97,153,200,5,0,},},
{{223,88,68,208,184,10,0,},},{{90,52,98,90,204,5,0,},{161,88,72,208,128,9,0,},},{{93,180,66,93,140,7,0,},{89,212,96,157,56,7,0,},{208,48,100,108,92,199,9,},},
{{91,60,90,90,236,10,0,},{91,44,66,92,156,11,0,},},{{159,96,88,156,152,0,0,},},{{158,112,64,208,48,9,0,},{156,144,88,128,108,5,0,},},{{154,136,97,153,56,7,0,},},
{{157,216,96,157,200,5,0,},},{{92,36,102,108,92,167,69,},},{{92,52,90,90,220,6,0,},{223,104,104,119,140,202,9,},{153,96,69,154,112,6,0,},},{{106,44,98,91,36,3,0,},
{153,168,12,117,108,3,0,},},{{91,12,98,90,76,11,0,},},{{93,164,66,93,140,7,0,},{153,112,73,154,152,6,0,},},{{223,152,64,208,160,10,0,},{156,112,104,119,36,198,9,},},
{{90,124,90,132,108,5,0,},{158,64,100,108,228,200,9,},},{{158,224,97,114,220,9,0,},},{{94,244,70,93,180,11,0,},{155,64,105,119,140,154,9,},{153,64,97,153,200,5,0,},},
{{187,240,68,89,188,10,0,},{187,176,68,89,188,10,0,},},{0},{{154,208,89,153,216,6,0,},},{{159,56,100,108,124,193,9,},},{{223,48,100,108,116,202,9,},},{{118,244,46,105,4,0,0,},
{158,40,64,208,48,9,0,},},{{164,176,98,164,200,5,0,},{161,152,64,208,48,9,0,},},{{153,48,25,126,204,3,0,},},{{94,196,106,119,132,75,10,},{153,136,65,154,72,6,0,},},
{{161,80,96,156,176,8,0,},{155,96,65,154,160,10,0,},},{{89,204,72,89,188,7,0,},{159,120,89,107,100,0,0,},},{{91,52,98,90,76,11,0,},{91,28,70,92,180,11,0,},
{90,28,66,92,76,6,0,},},{{91,20,70,92,180,11,0,},{155,72,105,119,140,154,9,},},{{223,64,64,208,160,10,0,},{155,64,97,153,80,10,0,},},{{157,8,73,89,156,6,0,},
{156,48,64,208,72,6,0,},},{{116,124,89,107,204,2,0,},{157,208,88,157,56,5,0,},},{{92,44,70,92,164,7,0,},{158,64,104,119,12,201,9,},},{{117,164,9,116,20,0,0,},
{223,96,64,208,160,10,0,},{164,192,78,93,196,6,0,},},{{161,40,88,156,32,8,0,},{159,64,100,108,124,193,9,},},{{100,140,80,159,0,0,0,},{93,196,66,93,140,7,0,},
{161,48,88,156,32,8,0,},},{{122,132,42,103,4,0,0,},{155,104,105,119,140,154,9,},{153,104,97,153,200,5,0,},},{{154,192,69,154,160,7,0,},},{{105,140,90,164,240,2,0,},
{156,112,0,99,76,3,0,},},{{102,44,88,156,240,2,0,},{157,240,104,119,36,214,9,},},{{208,144,88,128,252,6,0,},},{{156,88,64,208,72,6,0,},},{{208,128,88,113,28,7,0,},
{208,96,72,208,184,7,0,},},{{208,152,104,119,116,199,9,},{156,152,88,156,56,5,0,},},{{159,48,68,208,8,2,0,},{155,208,101,108,116,154,9,},},{{119,28,62,106,4,0,0,},
{99,116,88,159,240,2,0,},{153,88,69,154,112,6,0,},},{{158,48,104,119,12,201,9,},{154,112,89,153,216,6,0,},},{{95,92,4,223,0,0,0,},{91,68,106,119,132,171,69,},
{164,184,90,164,56,5,0,},},{{101,28,89,157,240,2,0,},{159,80,68,208,8,2,0,},},{{99,84,88,159,240,2,0,},},{{223,40,64,208,160,10,0,},{187,216,72,89,212,10,0,},},
{{93,148,74,93,188,7,0,},{89,244,104,119,116,215,9,},{159,48,96,156,64,1,0,},},{{92,116,74,92,188,7,0,},{153,56,105,119,36,150,9,},},{{91,68,66,92,156,11,0,},
{187,200,68,89,188,10,0,},},{{187,24,105,119,140,218,9,},{159,88,88,156,152,0,0,},},{{89,212,104,119,116,215,9,},},{{98,60,84,159,0,0,0,},{159,104,88,156,152,0,0,},},
{{99,52,88,159,240,2,0,},{92,20,102,108,92,167,69,},},{{158,112,88,156,32,8,0,},},{{161,32,96,156,176,8,0,},{154,136,105,119,116,151,9,},},{{102,68,88,156,240,2,0,},
{164,200,102,108,252,69,10,},{157,216,104,119,36,214,9,},},{{116,76,88,95,36,0,0,},{155,112,105,119,140,154,9,},},{{223,104,96,156,80,10,0,},{156,96,104,119,36,198,9,},},
{{93,204,102,108,92,71,10,},{154,168,105,119,116,151,9,},},{{91,12,106,119,132,171,69,},},{{111,92,45,97,4,0,0,},{92,84,102,108,92,167,69,},{155,80,105,119,140,154,9,},},
{{97,204,89,127,4,3,0,},{223,152,88,156,240,9,0,},},{{105,148,90,164,240,2,0,},{156,64,100,108,252,197,9,},},{{100,4,80,159,0,0,0,},{153,192,69,154,112,6,0,},},
{{97,196,89,153,240,2,0,},{92,20,70,92,164,7,0,},},{{94,228,66,93,156,11,0,},},{0},{{158,56,68,208,88,9,0,},{157,200,64,89,76,6,0,},},{{94,252,89,164,232,10,0,},
{153,32,89,153,56,5,0,},},{{187,224,100,108,116,218,9,},{156,32,88,156,56,5,0,},},{{158,40,72,208,128,9,0,},{154,104,89,153,216,6,0,},},{{164,176,106,119,36,70,10,},},
{{157,184,100,108,252,213,9,},},{{99,92,88,159,240,2,0,},{93,188,66,93,140,7,0,},{187,192,100,108,116,218,9,},},{{208,40,64,208,136,7,0,},{161,80,104,119,12,201,9,},},
{{89,204,64,89,140,7,0,},{161,96,68,208,88,9,0,},},{{95,12,5,187,0,0,0,},{155,40,101,108,116,154,9,},},{{155,160,101,108,116,154,9,},},{{223,64,72,208,208,10,0,},
{164,160,70,93,116,6,0,},},{{164,224,66,93,76,6,0,},{157,8,65,89,76,6,0,},},{{157,208,64,89,76,6,0,},},{{92,68,90,90,220,6,0,},{208,80,96,156,56,7,0,},},
{{97,116,89,153,240,2,0,},{187,184,68,89,188,10,0,},{155,32,105,119,140,154,9,},},{{154,128,89,153,216,6,0,},},{{157,224,104,119,36,214,9,},{155,128,65,154,160,10,0,},},
{{90,36,98,90,204,5,0,},},{{90,44,90,90,60,5,0,},},{{208,80,104,119,116,199,9,},{161,152,104,119,12,201,9,},},{{91,116,106,119,132,171,69,},{90,60,90,90,60,5,0,},},
{{103,124,90,132,4,3,0,},{92,28,102,108,92,167,69,},{161,136,104,119,12,201,9,},},{{90,12,90,90,60,5,0,},{155,96,105,119,140,154,9,},},{{208,96,64,208,136,7,0,},},
{{91,84,106,119,132,171,69,},{90,28,90,90,60,5,0,},},{{95,196,4,187,0,0,0,},{155,72,97,153,80,10,0,},{153,72,105,119,36,150,9,},},{{153,88,77,154,192,6,0,},},
{{158,48,96,156,176,8,0,},},{{157,160,88,157,56,5,0,},},{{106,68,98,91,36,3,0,},{153,40,105,119,36,150,9,},},{{94,140,106,119,132,75,10,},{90,20,102,108,252,165,69,},
{187,160,104,119,140,218,9,},},{{94,148,98,164,72,11,0,},{187,216,64,89,164,10,0,},{161,56,72,208,128,9,0,},},{{164,152,66,93,76,6,0,},{161,48,64,208,48,9,0,},},
{{153,168,105,119,36,150,9,},},{{99,68,88,159,240,2,0,},{92,68,70,92,164,7,0,},{187,24,69,89,188,10,0,},},{{94,180,66,93,156,11,0,},{93,164,102,108,92,71,10,},},
{{94,188,74,93,204,11,0,},{154,152,105,119,116,151,9,},},{{157,200,104,119,36,214,9,},{155,168,65,154,160,10,0,},},{{94,180,102,108,108,75,10,},{187,224,104,119,140,218,9,},},
{{187,176,100,108,116,218,9,},},{{91,44,102,108,108,171,69,},{161,32,88,156,32,8,0,},{156,152,64,208,72,6,0,},},{{91,28,106,119,132,171,69,},{89,180,68,89,164,7,0,},},
{{155,112,97,153,80,10,0,},},{{156,96,96,156,200,5,0,},{154,32,89,153,216,6,0,},},{{102,156,88,156,240,2,0,},{91,20,106,119,132,171,69,},{208,88,64,208,136,7,0,},},
{{164,248,101,108,252,69,10,},},{{155,80,97,153,80,10,0,},},{0},{{91,132,66,92,156,11,0,},{158,64,68,208,88,9,0,},},{0},{{90,84,102,108,252,165,69,},},{{223,40,72,208,208,10,0,},
{164,240,74,93,156,6,0,},},{{154,72,97,153,56,7,0,},},{{164,224,74,93,156,6,0,},{153,168,73,154,152,6,0,},},{{101,20,89,125,4,3,0,},},{{90,28,70,92,116,6,0,},
{164,144,106,119,36,70,10,},},{{156,48,68,208,112,6,0,},{154,104,97,153,56,7,0,},},{{89,236,88,157,216,6,0,},{223,88,104,119,140,202,9,},},{{89,12,69,89,164,7,0,},},
{{95,116,4,223,0,0,0,},{90,60,70,92,116,6,0,},{208,136,68,208,160,7,0,},},{{89,228,88,157,216,6,0,},{208,40,88,156,216,6,0,},},{{208,56,68,208,160,7,0,},},
{0},{{157,192,68,89,116,6,0,},},{{156,152,96,156,200,5,0,},},{{91,36,70,92,180,11,0,},{89,220,96,157,56,7,0,},{157,8,89,157,56,5,0,},},{{157,208,72,89,156,6,0,},},
{{101,188,88,157,240,2,0,},{155,144,69,154,184,10,0,},},{{94,156,90,164,232,10,0,},{92,60,66,92,140,7,0,},},{{89,188,96,157,56,7,0,},{208,64,104,119,116,199,9,},},
{{159,152,100,108,124,193,9,},{155,128,73,154,208,10,0,},},{{93,156,74,93,188,7,0,},},{{223,144,88,128,20,10,0,},{158,88,104,119,12,201,9,},},{{93,140,74,93,188,7,0,},
{154,160,97,153,56,7,0,},},{{91,116,98,90,76,11,0,},},{{90,68,74,92,156,6,0,},{89,28,105,119,116,215,9,},},{0},{{89,12,105,119,116,215,9,},},{{208,152,88,156,216,6,0,},},
{{153,160,101,108,252,149,9,},{153,72,97,153,200,5,0,},},{{93,244,66,93,140,7,0,},{156,40,88,156,56,5,0,},},{{92,84,66,92,140,7,0,},{154,112,73,154,184,7,0,},},
{{89,228,96,157,56,7,0,},{157,16,89,125,108,5,0,},},{{153,40,97,153,200,5,0,},},{0},{{92,116,98,90,60,7,0,},{155,56,89,153,240,9,0,},},{{89,196,96,157,56,7,0,},
{164,152,74,93,156,6,0,},},{{92,116,90,90,220,6,0,},{208,48,104,119,116,199,9,},},{{107,108,5,155,0,0,0,},{90,44,66,92,76,6,0,},{156,24,0,99,76,3,0,},},
{{90,52,74,92,156,6,0,},{161,88,96,156,176,8,0,},},{{93,180,90,164,216,6,0,},{154,152,97,153,56,7,0,},},{{157,200,96,157,200,5,0,},{155,168,73,154,208,10,0,},},
{{90,36,70,92,116,6,0,},{187,8,101,108,116,218,9,},},{{157,224,76,89,196,6,0,},},{{161,112,104,119,12,201,9,},{154,136,89,153,216,6,0,},},{{112,180,40,101,4,0,0,},
{91,28,98,90,76,11,0,},{161,104,96,156,176,8,0,},},{{95,140,4,223,0,0,0,},{92,52,102,108,92,167,69,},{161,96,104,119,12,201,9,},},{{161,48,68,208,88,9,0,},},
{{208,88,72,208,184,7,0,},{158,80,100,108,228,200,9,},},{{91,12,90,90,236,10,0,},},{{161,64,72,208,128,9,0,},{153,112,97,153,200,5,0,},},{{94,148,90,164,232,10,0,},
{156,64,88,156,56,5,0,},},{{94,156,66,93,156,11,0,},{208,104,96,156,56,7,0,},},{{161,40,96,156,176,8,0,},},{{223,136,100,108,116,202,9,},{161,32,104,119,12,201,9,},},
{{94,180,90,164,232,10,0,},},{{161,96,96,156,176,8,0,},{154,72,105,119,116,151,9,},},{{153,168,65,154,72,6,0,},},{{161,152,68,208,88,9,0,},{159,40,100,108,124,193,9,},},
{{156,32,104,119,36,198,9,},},{{161,64,96,156,176,8,0,},{154,104,105,119,116,151,9,},},{0},{{187,208,72,89,212,10,0,},},{0},{{91,20,66,92,156,11,0,},},{{93,252,89,164,216,6,0,},
{159,40,72,208,56,2,0,},},{{164,144,70,93,116,6,0,},{153,152,101,108,252,149,9,},},{{105,204,90,164,240,2,0,},{90,132,98,90,204,5,0,},{156,56,68,208,112,6,0,},},
{{156,152,104,119,36,198,9,},{154,144,69,154,160,7,0,},},{{120,244,42,105,4,0,0,},{187,8,89,157,240,9,0,},},{{91,20,74,92,204,11,0,},{157,24,69,89,116,6,0,},
{156,80,100,108,252,197,9,},},{{156,88,100,108,252,197,9,},},{{92,60,74,92,188,7,0,},{223,96,88,156,240,9,0,},},{{208,64,96,156,56,7,0,},},{0},{{94,140,102,108,108,75,10,},
{155,104,65,154,160,10,0,},{153,104,73,154,152,6,0,},},{{90,84,70,92,116,6,0,},{158,88,96,156,176,8,0,},},{{161,8,96,100,172,9,0,},{154,160,105,119,116,151,9,},},
{{153,208,65,154,72,6,0,},},{{155,88,105,119,140,154,9,},},{{95,60,4,223,0,0,0,},{90,116,70,92,116,6,0,},{156,88,88,156,56,5,0,},},{{93,228,70,93,164,7,0,},
{89,220,104,119,116,215,9,},},{{208,112,68,208,160,7,0,},},{{155,192,101,108,116,154,9,},},{{93,244,74,93,188,7,0,},},{{100,100,80,159,0,0,0,},{154,112,65,154,136,7,0,},},
{{98,164,85,159,0,0,0,},{159,32,96,156,64,1,0,},{157,160,104,119,36,214,9,},},{0},{{94,204,90,164,232,10,0,},{223,56,100,108,116,202,9,},},{{107,212,5,155,0,0,0,},
{90,84,66,92,76,6,0,},},{{158,88,88,156,32,8,0,},},{{158,96,64,208,48,9,0,},{153,144,69,154,112,6,0,},},{{223,88,100,108,116,202,9,},},{{90,52,66,92,76,6,0,},
{161,88,104,119,12,201,9,},},{{101,164,88,157,240,2,0,},{157,0,89,115,156,5,0,},},{{156,96,88,156,56,5,0,},},{0},{{92,52,74,92,188,7,0,},{158,112,96,156,176,8,0,},},
{{100,220,81,159,0,0,0,},{223,104,100,108,116,202,9,},{154,136,65,154,136,7,0,},},{{94,164,66,93,156,11,0,},{92,36,74,92,188,7,0,},{155,152,89,153,240,9,0,},},
{{103,68,90,90,244,2,0,},{187,160,88,157,240,9,0,},},{{92,84,106,119,116,167,69,},},{{154,168,65,154,136,7,0,},},{{92,68,106,119,116,167,69,},{157,232,104,119,36,214,9,},},
{{153,112,105,119,36,150,9,},},{{158,64,88,156,32,8,0,},},{{154,88,105,119,116,151,9,},},{{159,8,96,100,108,2,0,},},{{94,244,102,108,108,75,10,},{157,200,68,89,116,6,0,},},
{{94,228,90,164,232,10,0,},{187,240,100,108,116,218,9,},},{{93,156,102,108,92,71,10,},},{{159,56,72,208,56,2,0,},{153,168,89,153,56,5,0,},},{0},{{223,48,68,208,184,10,0,},
{156,32,96,156,200,5,0,},},{{158,40,96,156,176,8,0,},},{{93,252,97,164,56,7,0,},{159,88,72,208,56,2,0,},},{{92,124,90,132,252,6,0,},{155,56,101,108,116,154,9,},},
{{223,80,68,208,184,10,0,},{161,88,88,156,32,8,0,},},{{93,156,70,93,164,7,0,},{208,40,104,119,116,199,9,},{161,80,64,208,48,9,0,},},{{89,204,104,119,116,215,9,},
{161,72,88,95,212,7,0,},},{{164,144,78,93,196,6,0,},},{{90,132,106,119,36,166,69,},{156,136,68,208,112,6,0,},},{{93,188,70,93,164,7,0,},{154,56,89,153,216,6,0,},},
{{164,224,106,119,36,70,10,},{157,8,105,119,36,214,9,},},{{164,240,78,93,196,6,0,},{157,24,77,89,196,6,0,},},{{92,44,102,108,92,167,69,},},{{154,128,101,108,92,151,9,},
{154,40,97,153,56,7,0,},},{{90,44,102,108,252,165,69,},},{{91,36,90,90,236,10,0,},{155,128,89,153,240,9,0,},},{{92,12,102,108,92,167,69,},{155,104,73,154,208,10,0,},
{153,104,65,154,72,6,0,},},{{91,52,90,90,236,10,0,},},{{159,136,64,208,216,1,0,},{157,240,68,89,116,6,0,},},{{153,208,73,154,152,6,0,},},{{90,68,90,90,60,5,0,},
{155,88,97,153,80,10,0,},},{{117,164,8,116,20,0,0,},{91,20,90,90,236,10,0,},{156,88,96,156,200,5,0,},},{{208,96,104,119,116,199,9,},{154,80,89,153,216,6,0,},},
{{208,152,72,208,184,7,0,},},{{93,220,90,118,28,7,0,},{154,144,97,153,56,7,0,},},{{106,12,98,131,36,3,0,},{156,40,72,208,152,6,0,},},{{93,204,90,164,216,6,0,},
{158,48,72,208,128,9,0,},},{{91,68,74,92,204,11,0,},{159,32,104,119,172,193,9,},{157,160,96,157,200,5,0,},},{{94,156,102,108,108,75,10,},{159,80,100,108,124,193,9,},},
{{89,164,104,119,116,215,9,},{158,136,64,208,48,9,0,},},{{93,148,102,108,92,71,10,},{89,244,68,89,164,7,0,},{154,96,97,153,56,7,0,},},{{208,32,100,108,92,199,9,},
{164,152,90,164,56,5,0,},},{{161,120,89,107,244,7,0,},{153,144,77,154,192,6,0,},},{{102,92,88,156,240,2,0,},{90,132,70,92,116,6,0,},{187,200,100,108,116,218,9,},},
{{93,180,102,108,92,71,10,},{89,212,68,89,164,7,0,},{208,152,100,108,92,199,9,},},{{91,60,102,108,108,171,69,},{159,112,64,208,216,1,0,},},{{155,168,89,153,240,9,0,},},
{{89,228,104,119,116,215,9,},},{{115,180,44,101,4,0,0,},{156,136,76,208,192,6,0,},},{{89,164,96,157,56,7,0,},{154,136,73,154,184,7,0,},},{{94,164,74,93,204,11,0,},
{91,20,102,108,108,171,69,},},{{153,96,105,119,36,150,9,},},{{156,96,72,208,152,6,0,},{156,48,96,156,200,5,0,},},{{154,168,73,154,184,7,0,},},{{157,232,96,157,200,5,0,},},
{{156,112,68,208,112,6,0,},},{{156,64,72,208,152,6,0,},},{{91,132,90,90,236,10,0,},{154,88,97,153,56,7,0,},},{{158,96,104,119,12,201,9,},},{{158,104,96,156,176,8,0,},
{153,64,89,153,56,5,0,},},{{93,236,90,124,252,6,0,},{159,96,100,108,124,193,9,},{158,112,104,119,12,201,9,},},{{154,208,101,108,92,151,9,},},{{95,84,4,223,0,0,0,},
{159,56,64,208,216,1,0,},},{0},{{187,224,68,89,188,10,0,},},{{158,40,104,119,12,201,9,},},{{94,228,74,93,204,11,0,},{157,184,88,157,56,5,0,},},{{115,28,45,101,4,0,0,},
{187,208,88,157,240,9,0,},{187,192,64,89,164,10,0,},},{{94,244,74,93,204,11,0,},{187,192,68,89,188,10,0,},},{{208,40,96,156,56,7,0,},{161,80,72,208,128,9,0,},},
{{109,156,40,102,4,0,0,},{89,204,96,157,56,7,0,},},{0},{{223,64,100,108,116,202,9,},},{0},{{89,220,88,157,216,6,0,},{157,8,97,157,200,5,0,},},{{159,104,100,108,124,193,9,},
{157,208,96,157,200,5,0,},},{{223,96,100,108,116,202,9,},{187,184,104,119,140,218,9,},},{{161,40,100,108,228,200,9,},{154,40,105,119,116,151,9,},},{{93,196,102,108,92,71,10,},
{92,132,66,92,140,7,0,},},{{155,128,97,153,80,10,0,},},{{153,104,89,153,56,5,0,},},{{223,64,88,156,240,9,0,},{161,248,127,158,8,224,9,},},{{159,136,72,208,56,2,0,},
{157,240,76,89,196,6,0,},},{{164,136,90,164,56,5,0,},},{{101,236,88,157,240,2,0,},{155,88,89,153,240,9,0,},},{{103,132,90,90,244,2,0,},{94,236,90,124,12,11,0,},
{156,88,104,119,36,198,9,},},{{208,136,100,108,92,199,9,},{208,96,96,156,56,7,0,},},{{92,84,70,92,164,7,0,},{153,160,89,153,56,5,0,},},{{153,88,97,153,200,5,0,},},
{{93,244,90,164,216,6,0,},{161,144,88,128,84,8,0,},{156,40,64,208,72,6,0,},},{{158,152,68,208,88,9,0,},{158,48,64,208,48,9,0,},},{{89,228,72,89,188,7,0,},
{164,184,98,164,200,5,0,},},{{223,56,88,156,240,9,0,},{187,232,96,157,80,10,0,},},{{105,244,90,164,240,2,0,},{158,136,72,208,128,9,0,},},{{154,96,105,119,116,151,9,},},
{{89,196,72,89,188,7,0,},{164,152,98,164,200,5,0,},},{{159,64,68,208,8,2,0,},{155,32,101,108,116,154,9,},},{{92,68,102,108,92,167,69,},{187,24,101,108,116,218,9,},},
{{208,48,88,156,216,6,0,},},{{157,224,72,89,156,6,0,},},{{122,20,42,103,4,0,0,},{157,200,72,89,156,6,0,},{155,168,97,153,80,10,0,},},{{94,180,70,93,180,11,0,},
{161,104,100,108,228,200,9,},},{{106,52,98,91,36,3,0,},{161,96,100,108,228,200,9,},},{{157,216,68,89,116,6,0,},},{{97,108,89,153,240,2,0,},{92,36,90,90,220,6,0,},},
{{94,148,70,93,180,11,0,},{153,96,97,153,200,5,0,},},{{156,96,64,208,72,6,0,},},{{208,88,96,156,56,7,0,},},{{153,200,89,127,108,5,0,},},{{156,112,76,208,192,6,0,},},
{{158,64,72,208,128,9,0,},{156,64,64,208,72,6,0,},},{{91,132,98,90,76,11,0,},{154,88,89,153,216,6,0,},},{0},{{101,244,88,157,240,2,0,},{94,252,97,164,72,11,0,},
{155,64,89,153,240,9,0,},},{{118,140,46,105,4,0,0,},{161,152,72,208,128,9,0,},},{{158,56,104,119,12,201,9,},},{{164,160,74,93,156,6,0,},{153,80,101,108,252,149,9,},},
{{155,96,73,154,208,10,0,},},{{107,116,5,155,0,0,0,},{90,28,102,108,252,165,69,},},{{164,176,70,93,116,6,0,},},{{157,184,64,89,76,6,0,},{153,48,37,126,140,4,0,},},
{{223,32,88,156,240,9,0,},{153,136,101,108,252,149,9,},},{{156,48,72,208,152,6,0,},},{0},{{90,68,98,90,204,5,0,},},{{155,160,89,153,240,9,0,},},{{94,188,102,108,108,75,10,},
{158,80,96,156,176,8,0,},},{{154,56,105,119,116,151,9,},},{{91,36,102,108,108,171,69,},{89,220,64,89,140,7,0,},},{{110,172,41,97,4,0,0,},{157,208,104,119,36,214,9,},},
{{187,184,96,157,80,10,0,},{155,152,97,153,80,10,0,},},{{156,104,104,119,36,198,9,},{153,144,97,153,200,5,0,},},{{208,64,72,208,184,7,0,},},{{159,152,68,208,8,2,0,},
{155,128,105,119,140,154,9,},},{{101,220,88,157,240,2,0,},{155,104,89,153,240,9,0,},},{{208,80,68,208,160,7,0,},},{{114,228,97,114,4,3,0,},},{{153,208,89,153,56,5,0,},},
{{90,68,106,119,36,166,69,},{187,216,96,157,80,10,0,},},{{157,184,68,89,116,6,0,},},{{157,176,68,89,116,6,0,},},{{155,208,65,154,160,10,0,},},{{153,88,105,119,36,150,9,},},
{{93,244,98,164,56,7,0,},{154,64,101,108,92,151,9,},},{{158,48,88,156,32,8,0,},{154,112,105,119,116,151,9,},},{{164,184,106,119,36,70,10,},{159,64,88,156,152,0,0,},},
{{187,232,104,119,140,218,9,},{164,240,106,119,36,70,10,},},{{223,40,100,108,116,202,9,},{158,96,68,208,88,9,0,},},{{157,72,88,95,252,4,0,},},{{89,196,64,89,140,7,0,},
{164,152,106,119,36,70,10,},},{{106,116,98,91,36,3,0,},{164,144,74,93,156,6,0,},{153,56,89,153,56,5,0,},},{{93,164,74,93,188,7,0,},{159,112,88,156,152,0,0,},},
{{223,88,72,208,208,10,0,},{208,48,64,208,136,7,0,},},{0},{{106,20,98,91,36,3,0,},{155,168,105,119,140,154,9,},},{{90,36,102,108,252,165,69,},{187,8,69,89,188,10,0,},},
{{102,84,88,156,240,2,0,},{98,236,85,159,0,0,0,},{164,160,106,119,36,70,10,},},{{97,212,89,153,240,2,0,},{157,216,76,89,196,6,0,},},{{94,164,90,164,232,10,0,},
{155,112,69,154,184,10,0,},},{{92,52,70,92,164,7,0,},{153,96,89,153,56,5,0,},},{{161,48,100,108,228,200,9,},{154,32,97,153,56,7,0,},},{{158,80,68,208,88,9,0,},
{154,168,89,153,216,6,0,},},{0},{0},{{99,156,88,159,240,2,0,},},{{91,132,106,119,132,171,69,},{157,192,64,89,76,6,0,},},{{91,108,90,123,44,11,0,},},{{93,148,98,164,56,7,0,},
{187,240,88,157,240,9,0,},},{{161,136,72,208,128,9,0,},{156,80,96,156,200,5,0,},},{{158,56,96,156,176,8,0,},{157,224,96,157,200,5,0,},},{{164,160,66,93,76,6,0,},
{153,168,97,153,200,5,0,},},{{159,40,68,208,8,2,0,},{153,32,105,119,36,150,9,},},{{154,192,65,154,136,7,0,},{154,104,69,154,160,7,0,},},{{89,236,100,108,92,215,9,},
{164,176,78,93,196,6,0,},},{{89,12,97,157,56,7,0,},{157,184,72,89,156,6,0,},},{{223,32,96,156,80,10,0,},{187,208,104,119,140,218,9,},},{{97,172,89,153,240,2,0,},
{94,140,70,93,180,11,0,},{89,188,64,89,140,7,0,},},{{161,80,88,156,32,8,0,},},{{153,152,89,153,56,5,0,},},{{164,248,97,164,200,5,0,},{157,192,104,119,36,214,9,},},
{{90,132,66,92,76,6,0,},{90,44,70,92,116,6,0,},},{{154,56,97,153,56,7,0,},},{{90,36,106,119,36,166,69,},{89,220,72,89,188,7,0,},},{{97,100,89,153,240,2,0,},
{90,44,98,90,204,5,0,},{155,144,105,119,140,154,9,},},{{92,60,102,108,92,167,69,},{90,52,106,119,36,166,69,},},{{156,104,96,156,200,5,0,},},{{208,64,64,208,136,7,0,},
{161,136,96,156,176,8,0,},},{{157,224,88,157,56,5,0,},},{{90,20,74,92,156,6,0,},{161,56,64,208,48,9,0,},},{0},{{91,116,70,92,180,11,0,},{159,136,88,156,152,0,0,},},
{{153,208,97,153,200,5,0,},},{{155,88,73,154,208,10,0,},},{{92,132,70,92,164,7,0,},{90,116,102,108,252,165,69,},{154,144,101,108,92,151,9,},},{{91,84,70,92,180,11,0,},},
{{161,64,104,119,12,201,9,},{155,208,89,153,240,9,0,},},{{155,192,69,154,184,10,0,},},{{93,244,106,119,116,71,10,},{161,48,72,208,128,9,0,},},{{156,56,76,208,192,6,0,},
{154,112,97,153,56,7,0,},},{{159,80,88,156,152,0,0,},{153,128,73,154,152,6,0,},},{{90,20,90,90,60,5,0,},{223,56,72,208,208,10,0,},},{{94,188,66,93,156,11,0,},
{158,136,88,156,32,8,0,},},{{154,96,89,153,216,6,0,},},{{89,196,88,157,216,6,0,},{159,224,97,114,172,2,0,},},{{187,24,89,157,240,9,0,},{158,144,88,128,84,8,0,},},
{{158,152,64,208,48,9,0,},{156,152,72,208,152,6,0,},},{{102,100,88,156,240,2,0,},{208,48,72,208,184,7,0,},},{{98,68,84,159,0,0,0,},{159,112,104,119,172,193,9,},},
{{157,200,88,157,56,5,0,},},{{91,20,98,90,76,11,0,},},{{91,44,74,92,204,11,0,},},{{89,180,96,157,56,7,0,},{156,48,100,108,252,197,9,},},{{94,164,98,164,72,11,0,},
{92,36,106,119,116,167,69,},{156,56,100,108,252,197,9,},},{{101,212,88,157,240,2,0,},{155,96,89,153,240,9,0,},},{{154,32,105,119,116,151,9,},},{{156,80,68,208,112,6,0,},},
{{153,112,69,154,112,6,0,},},{{91,84,98,90,76,11,0,},},{{95,52,4,223,0,0,0,},{159,104,104,119,172,193,9,},},{{208,104,88,156,216,6,0,},{154,88,73,154,184,7,0,},},
{{223,136,64,208,160,10,0,},{155,64,101,108,116,154,9,},},{{99,228,89,159,240,2,0,},{95,220,4,187,0,0,0,},},{{156,80,104,119,36,198,9,},},{{164,136,106,119,36,70,10,},
{158,56,88,156,32,8,0,},},{{164,160,90,164,56,5,0,},{159,56,104,119,172,193,9,},},{{153,32,97,153,200,5,0,},},{{161,64,68,208,88,9,0,},{154,192,73,154,184,7,0,},},
{{89,212,64,89,140,7,0,},},{{89,12,89,157,216,6,0,},{159,88,104,119,172,193,9,},},{{223,32,104,119,140,202,9,},{187,208,96,157,80,10,0,},},{{102,36,88,156,240,2,0,},
{223,80,100,108,116,202,9,},},{{208,56,96,156,56,7,0,},},{{102,52,88,156,240,2,0,},{164,144,98,164,200,5,0,},},{{157,192,96,157,200,5,0,},},{{90,132,74,92,156,6,0,},
{156,136,100,108,252,197,9,},},{{94,252,105,119,132,75,10,},{93,188,102,108,92,71,10,},},{{164,240,98,164,200,5,0,},{157,24,97,157,200,5,0,},},{{223,112,64,208,160,10,0,},
{155,144,97,153,80,10,0,},},{{93,140,66,93,140,7,0,},},{{156,104,88,156,56,5,0,},{154,128,69,154,160,7,0,},},{{208,64,88,156,216,6,0,},{161,112,68,208,88,9,0,},},
{{164,192,70,93,116,6,0,},},{{90,84,98,90,204,5,0,},{158,88,68,208,88,9,0,},},{{100,156,80,159,0,0,0,},{92,60,98,90,60,7,0,},},{{102,148,88,128,4,3,0,},
{159,136,96,156,64,1,0,},{157,240,100,108,252,213,9,},},{{109,116,40,102,4,0,0,},{98,116,84,159,0,0,0,},{153,208,105,119,36,150,9,},},{{92,84,74,92,188,7,0,},
{155,88,65,154,160,10,0,},},{{208,136,88,156,216,6,0,},{208,104,104,119,116,199,9,},},{{92,68,74,92,188,7,0,},{208,112,96,156,56,7,0,},},{{155,32,89,153,240,9,0,},},
{{92,116,106,119,116,167,69,},{153,88,89,153,56,5,0,},},{{156,40,104,119,36,198,9,},},{{91,68,102,108,108,171,69,},},{{157,176,104,119,36,214,9,},{153,128,65,154,72,6,0,},},
{{223,56,64,208,160,10,0,},},{{158,136,96,156,176,8,0,},{158,32,100,108,228,200,9,},},{{100,116,80,159,0,0,0,},{89,244,100,108,92,215,9,},{154,96,65,154,136,7,0,},},
{{89,20,89,125,252,6,0,},},{{223,88,64,208,160,10,0,},{157,224,68,89,116,6,0,},},{{93,164,90,164,216,6,0,},{161,88,68,208,88,9,0,},},{{93,180,70,93,164,7,0,},
{89,212,100,108,92,215,9,},{156,128,88,113,156,5,0,},},{{91,60,70,92,180,11,0,},{159,112,96,156,64,1,0,},},{0},{{105,164,90,164,240,2,0,},},{{98,44,84,159,0,0,0,},
{154,136,101,108,92,151,9,},},{{89,180,104,119,116,215,9,},{161,64,64,208,48,9,0,},},{{94,164,106,119,132,75,10,},{92,36,98,90,60,7,0,},{153,184,89,111,156,5,0,},},
{{187,160,96,157,80,10,0,},{153,96,73,154,152,6,0,},},{{93,204,106,119,116,71,10,},{154,168,101,108,92,151,9,},},{{159,128,88,113,12,1,0,},},{{153,112,77,154,192,6,0,},},
{{94,188,90,164,232,10,0,},{156,112,100,108,252,197,9,},},{{156,64,104,119,36,198,9,},},{{102,140,88,156,240,2,0,},{154,88,65,154,136,7,0,},},{{97,92,89,153,240,2,0,},
{223,136,72,208,208,10,0,},{153,64,101,108,252,149,9,},},{{187,240,72,89,212,10,0,},},{{90,12,102,108,252,165,69,},},{{154,208,69,154,160,7,0,},},{{112,244,40,101,4,0,0,},
{159,56,96,156,64,1,0,},},{{223,48,104,119,140,202,9,},},{{115,244,44,101,4,0,0,},{158,40,68,208,88,9,0,},},{{156,48,76,208,192,6,0,},},{{159,88,96,156,64,1,0,},
{153,48,29,126,12,4,0,},},{{125,252,4,112,4,0,0,},{153,136,77,154,192,6,0,},},{{93,156,98,164,56,7,0,},{164,192,90,164,56,5,0,},{161,80,100,108,228,200,9,},},
{{102,108,88,156,240,2,0,},{208,56,104,119,116,199,9,},{187,0,89,115,52,10,0,},},{{91,52,102,108,108,171,69,},{155,40,89,153,240,9,0,},},{{157,192,88,157,56,5,0,},},
{{223,64,68,208,184,10,0,},{164,224,90,164,56,5,0,},},{{155,152,101,108,116,154,9,},},{{157,24,105,119,36,214,9,},},{{90,132,102,108,252,165,69,},{223,112,88,156,240,9,0,},},
{{223,96,68,208,184,10,0,},{187,184,72,89,212,10,0,},},{{161,40,68,208,88,9,0,},{158,104,88,156,32,8,0,},},{{93,196,70,93,164,7,0,},{89,188,88,157,216,6,0,},
{158,152,100,108,228,200,9,},},{{94,140,66,93,156,11,0,},{155,104,101,108,116,154,9,},{153,192,105,119,36,150,9,},},{0},{{187,216,100,108,116,218,9,},},{{107,148,5,155,0,0,0,},
{159,136,104,119,172,193,9,},},{{89,196,104,119,116,215,9,},{157,176,64,89,76,6,0,},},{{90,116,90,90,60,5,0,},{156,88,68,208,112,6,0,},},{{93,228,98,164,56,7,0,},
{154,80,101,108,92,151,9,},},{{208,112,104,119,116,199,9,},},{{159,48,72,208,56,2,0,},{155,208,105,119,140,154,9,},},{{101,12,89,157,240,2,0,},{153,88,65,154,72,6,0,},},
};

struct action_table_key {
    uint8_t bytes[3];
};
static inline struct action_table_key encode_key(uint32_t target_nfa_state, uint32_t dfa_state, uint32_t dfa_symbol) {
    struct action_table_key key = {0};
    key.bytes[0] |= (target_nfa_state >> 0) & 255;
    key.bytes[1] |= (target_nfa_state >> 8) & 7;
    key.bytes[1] |= (dfa_state << 3) & 255;
    key.bytes[2] |= (dfa_state >> 5) & 3;
    key.bytes[2] |= (dfa_symbol << 2) & 127;
    return key;
}
struct action_table_entry {
    uint32_t nfa_state;
    uint32_t actions;
    uint32_t push_nfa_state;
};
static struct action_table_entry decode_entry(const uint8_t *bytes) {
    struct action_table_entry entry = {0};
    entry.nfa_state |= ((uint32_t)bytes[3] & 255) << 0;
    entry.nfa_state |= ((uint32_t)bytes[4] & 7) << 8;
    entry.actions |= ((uint32_t)bytes[4] & 255) >> 3;
    entry.actions |= ((uint32_t)bytes[5] & 15) << 5;
    entry.push_nfa_state |= ((uint32_t)bytes[5] & 255) >> 4;
    entry.push_nfa_state |= ((uint32_t)bytes[6] & 127) << 4;
    return entry;
}
static struct action_table_entry action_table_lookup(uint32_t nfa_state, uint32_t dfa_state, uint32_t token) {
    uint32_t index1 = ((((((0xe5aa55e5 ^ (nfa_state)) * 0xe5aa55e5) ^ (dfa_state)) * 0xe5aa55e5) ^ (token)) * 0xe5aa55e5) & 1023;
    uint32_t index2 = ((((((0xf2579761 ^ (nfa_state)) * 0xf2579761) ^ (dfa_state)) * 0xf2579761) ^ (token)) * 0xf2579761) & 1023;
    struct action_table_key key = encode_key(nfa_state, dfa_state, token);
    uint32_t j = 0;
    const uint8_t *entry = 0;
    for (; j < 3; ++j) {
        entry = action_table[index1][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
        entry = action_table[index2][j];
        if (!memcmp(key.bytes, entry, sizeof(key.bytes)))
            break;
    }
    if (j >= 3)
        abort();
    return decode_entry(entry);
}
static void apply_actions(struct construct_state *state, uint32_t index, size_t start, size_t end) {
    size_t offset = end;
    for (uint32_t i = index; actions[i]; ++i) {
        if (((((actions[i]) >> 12) & 0xf) & 8))
            offset = start;
        construct_action_apply(state, actions[i], offset);
    }
}
static size_t build_parse_tree(struct owl_default_tokenizer *tokenizer, struct owl_token_run *run, struct owl_tree *tree) {
    struct construct_state construct_state = { .info = tree };
    uint32_t *state_stack = 0;
    uint32_t stack_depth = 0;
    size_t stack_capacity = 0;
    size_t whitespace = tokenizer->whitespace;
    size_t offset = tokenizer->offset - whitespace;
    construct_begin(&construct_state, offset, CONSTRUCT_NORMAL_ROOT);
    uint32_t nfa_state = 161;
    while (run) {
        uint16_t length_offset = run->lengths_size - 1;
        uint16_t n = run->number_of_tokens;
        for (uint16_t i = n - 1; i < n; i--) {
            size_t end = offset;
            size_t len = 0;
            struct action_table_entry entry = action_table_lookup(nfa_state, run->states[i], run->tokens[i]);
            if (run->tokens[i] < 25)
                len = decode_token_length(run, &length_offset, &offset);
            else {
                if (stack_depth >= stack_capacity) {
                    size_t new_capacity = (stack_capacity + 2) * 3 / 2;
                    if (new_capacity <= stack_capacity)
                        abort();
                    uint32_t *new_stack = realloc(state_stack, new_capacity * sizeof(uint32_t));
                    if (!new_stack)
                        abort();
                    state_stack = new_stack;
                    stack_capacity = new_capacity;
                }
                state_stack[stack_depth++] = entry.push_nfa_state;
            }
            apply_actions(&construct_state, entry.actions, end, end + whitespace);
            if (run->states[i] == 62) {
                if (stack_depth == 0)
                    abort();
                nfa_state = state_stack[--stack_depth];
            } else
                nfa_state = entry.nfa_state;
            whitespace = end - offset - len;
        }
        struct owl_token_run *old = run;
        run = run->prev;
        free(old);
    }
    struct action_table_entry entry = action_table_lookup(nfa_state, UINT32_MAX, UINT32_MAX);
    apply_actions(&construct_state, entry.actions, offset, offset + whitespace);
    free(state_stack);
    free_token_runs(&run);
    return construct_finish(&construct_state, offset);
}
static size_t read_keyword_token(uint32_t *token, bool *end_token, const char *text, void *info) {
    switch (text[0]) {
    case 35:
        *end_token = false;
        *token = 4294967295U;
        return 1;
    case 40:
        *end_token = false;
        *token = 12;
        return 1;
    case 41:
        *end_token = true;
        *token = 13;
        return 1;
    case 42:
        *end_token = false;
        *token = 16;
        return 1;
    case 43:
        *end_token = false;
        *token = 17;
        return 1;
    case 46:
        switch (text[1]) {
        case 111:
            if (text[2] == 112 && text[3] == 101 && text[4] == 114 && text[5] == 97 && text[6] == 116 && text[7] == 111 && text[8] == 114 && text[9] == 115) {
                *end_token = false;
                *token = 2;
                return 10;
            } else {
                return 0;
            }
        case 116:
            if (text[2] == 111 && text[3] == 107 && text[4] == 101 && text[5] == 110) {
                *end_token = false;
                *token = 21;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 58:
        *end_token = false;
        *token = 1;
        return 1;
    case 61:
        *end_token = false;
        *token = 0;
        return 1;
    case 63:
        *end_token = false;
        *token = 18;
        return 1;
    case 64:
        *end_token = false;
        *token = 11;
        return 1;
    case 91:
        *end_token = false;
        *token = 14;
        return 1;
    case 92:
        *end_token = false;
        *token = 10;
        return 1;
    case 93:
        *end_token = true;
        *token = 15;
        return 1;
    case 102:
        if (text[1] == 108 && text[2] == 97 && text[3] == 116) {
            *end_token = false;
            *token = 6;
            return 4;
        } else {
            return 0;
        }
    case 105:
        if (text[1] == 110 && text[2] == 102 && text[3] == 105 && text[4] == 120) {
            *end_token = false;
            *token = 5;
            return 5;
        } else {
            return 0;
        }
    case 108:
        switch (text[1]) {
        case 101:
            if (text[2] == 102 && text[3] == 116) {
                *end_token = false;
                *token = 7;
                return 4;
            } else {
                return 0;
            }
        case 105:
            if (text[2] == 110 && text[3] == 101 && text[4] == 45 && text[5] == 99 && text[6] == 111 && text[7] == 109 && text[8] == 109 && text[9] == 101 && text[10] == 110 && text[11] == 116 && text[12] == 45 && text[13] == 116 && text[14] == 111 && text[15] == 107 && text[16] == 101 && text[17] == 110) {
                *end_token = false;
                *token = 20;
                return 18;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 110:
        if (text[1] == 111 && text[2] == 110 && text[3] == 97 && text[4] == 115 && text[5] == 115 && text[6] == 111 && text[7] == 99) {
            *end_token = false;
            *token = 9;
            return 8;
        } else {
            return 0;
        }
    case 112:
        switch (text[1]) {
        case 111:
            if (text[2] == 115 && text[3] == 116 && text[4] == 102 && text[5] == 105 && text[6] == 120) {
                *end_token = false;
                *token = 3;
                return 7;
            } else {
                return 0;
            }
        case 114:
            if (text[2] == 101 && text[3] == 102 && text[4] == 105 && text[5] == 120) {
                *end_token = false;
                *token = 4;
                return 6;
            } else {
                return 0;
            }
        default:
            return 0;
        }
    case 114:
        if (text[1] == 105 && text[2] == 103 && text[3] == 104 && text[4] == 116) {
            *end_token = false;
            *token = 8;
            return 5;
        } else {
            return 0;
        }
    case 124:
        *end_token = false;
        *token = 19;
        return 1;
    default:
        return 0;
    }
}
static uint32_t rule_lookup(uint32_t parent, uint32_t slot, void *context) {
    switch (parent) {
    case 0:
        switch (slot) {
        case 0: return 1;
        case 1: return 8;
        case 2: return 9;
        default: break;
        }
        break;
    case 1:
        switch (slot) {
        case 0: return 10;
        case 1: return 2;
        default: break;
        }
        break;
    case 2:
        switch (slot) {
        case 0: return 7;
        case 1: return 10;
        case 2: return 3;
        default: break;
        }
        break;
    case 3:
        switch (slot) {
        case 0: return 4;
        case 1: return 6;
        default: break;
        }
        break;
    case 4:
        switch (slot) {
        case 0: return 5;
        default: break;
        }
        break;
    case 6:
        switch (slot) {
        case 0: return 7;
        case 1: return 10;
        default: break;
        }
        break;
    case 7:
        switch (slot) {
        case 0: return 10;
        case 1: return 10;
        case 2: return 10;
        case 3: return 12;
        case 4: return 7;
        case 5: return 12;
        case 6: return 12;
        case 7: return 7;
        default: break;
        }
        break;
    case 8:
        switch (slot) {
        case 0: return 12;
        default: break;
        }
        break;
    case 9:
        switch (slot) {
        case 0: return 10;
        case 1: return 12;
        default: break;
        }
        break;
    default: break;
    }
    return UINT32_MAX;
}
static void fixity_associativity_precedence_lookup(int *fixity_associativity, int *precedence, uint32_t rule, uint32_t choice, void *context) {
    switch (rule) {
    case 7:
        switch (choice) {
        case 4:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 5:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 6:
            *precedence = -1;
            *fixity_associativity = CONSTRUCT_POSTFIX;
            return;
        case 7:
            *precedence = -2;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        case 8:
            *precedence = -3;
            *fixity_associativity = CONSTRUCT_INFIX_FLAT;
            return;
        default: return;
        }
    default: return;
    }
}
static size_t number_of_slots_lookup(uint32_t rule, void *context) {
    switch (rule) {
    case 0: return 3;
    case 1: return 2;
    case 2: return 3;
    case 3: return 2;
    case 4: return 1;
    case 5: return 0;
    case 6: return 2;
    case 7: return 8;
    case 8: return 1;
    case 9: return 2;
    case 10: return 0;
    case 11: return 0;
    case 12: return 0;
    default: return 0;
    }
}
static void left_right_operand_slots_lookup(uint32_t rule, uint32_t *left, uint32_t *right, uint32_t *operand, void *context) {
    switch (rule) {
    case 0:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 1:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 2:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 3:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 4:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 5:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 6:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 7:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 7;
        break;
    case 8:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 9:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 10:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 11:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    case 12:
        *left = 4294967295U;
        *right = 4294967295U;
        *operand = 4294967295U;
        break;
    }
}
#endif

